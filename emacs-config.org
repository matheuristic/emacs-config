#+title: Emacs configuration
#+options: h:4 num:t toc:t
#+property: header-args:emacs-lisp :exports code

* Notes

** Generating the Emacs Lisp config files

The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] (Elisp) config files for Emacs can be generated with
~M-x org-babel-tangle~ or ~C-c C-v C-t~ while in this file's buffer.
Two config files will be created in the same directory:
- ~early-init.el~: Early initialization file (Emacs 27+).
- ~init.el~: Main configuration file.

** Measuring startup times

Startup times can be measured in Linux using
#+begin_example
$ emacs -q --eval='(message "%s" (emacs-init-time))'
#+end_example
or in Mac OS X using
#+begin_example
$ open -n /Applications/Emacs.app \
      --args -q --eval='(message "%s" (emacs-init-time))'
#+end_example

** Optimizing startup times

1. Profile using the ~esup~ package (~M-x esup~).
2. Defer loading of packages when possible, for example use-package's
   ~:defer N~ with ~N~ set to ~1~ (second) for higher priority packages and
   ~2~ for lower priority ones.
3. Avoid helper functions that can cause eager loads.

** What to do when Emacs hangs and C-g does not work

Copied from this StackOverflow [[https://emacs.stackexchange.com/questions/21643/what-do-i-do-when-emacs-is-frozen][question]].

When Emacs stalls, usually ~C-g~ will quit the current activity and
make Emacs responsive again.

If that does not work, one solution is to try sending Emacs a
~SIGUSR2~ signal which tells Emacs to turn on ~debug-on-quit~.

After Emacs recovers, it can be turned back off using
~M-x toggle-debug-on-quit~.

#+begin_example
$ pkill -SIGUSR2 -i emacs
#+end_example

If using ~emacsclient~, an additional command can be sent right
after the signal is sent to turn off ~debug-on-quit~.

#+begin_example
$ pkill -SIGUSR2 -i emacs ; emacsclient -e '(setq debug-on-quit nil)'
#+end_example

For more information, see the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Misc-Events.html#Misc-Events][official]] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#Error-Debugging][documentation]] (specifically on
the ~debug-on-event~ user option).

** Useful Emacs Lisp references

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference Manual]]
- [[http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/][Pattern Matching in Emacs Lisp]]
- [[https://github.com/alphapapa/emacs-package-dev-handbook][GitHub - alphapapa/emacs-package-dev-handbook: An Emacs package development handbook]]

** Tags

- ~early~: Configuration code (not boilerplate comments) that should
  be loaded in ~early-init.el~ to optimize startup time.
- ~elpa~: Uses a package from GNU ELPA.
- ~external~: Configuration code in the section uses external tools
  that are not typically packaged with the default userland on Linux
  and BSD systems (including Mac OS X), and which need to be installed
  at the system-level outside of Emacs packaging.
- ~hydra~: Configuration code that enables, creates or modifies
  [[Hydra][hydras]].
- ~melpa~: Uses a package from MELPA.

* Front matter

** Header and lexical binding

File header comment indicating the filename, along with declaring any file-specific variables.
One file-specific variable that should generally be set is enabling ~lexical-binding~ ([[https://nullprogram.com/blog/2016/12/22/][link]]), which has the following benefits:
- Closures.
- Better performance.
- Less bugs.

#+name: generate-header
#+begin_src emacs-lisp
(concat ";;; " feature ".el --- " summary " -*- lexical-binding: t; -*-")
#+end_src

** File generation timestamp

Tangled initialization files are timestamped to track when they were last generated.

#+name: generate-timestamp
#+begin_src emacs-lisp
(concat ";; Generated: " (current-time-string))
#+end_src

** Author info

Author information and where to get the newest version of this configuration.

#+name: author-info
#+begin_src emacs-lisp
;; Author: matheuristic
;; URL: https://github.com/matheuristic/emacs-config
#+end_src

** File commentary

File descriptions.

*** early-init

#+name: file-commentary-early-init
#+begin_src emacs-lisp
;; Emacas early initialization configuration file, symlink or copy to
;; ~/.emacs.d/early-init.el or $XDG_CONFIG_HOME/.emacs.d/early-init.el

;; In Emacs 27+, the sequence of initialization is
;; 1. early-init.el
;; 2. package.el
;; 3. init.el

;; early-init.el is run before UI elements are rendered,
;; so it is best to configure UI elements here rather than init.el
#+end_src

*** init

#+name: file-commentary-init
#+begin_src emacs-lisp
;; Emacs initialization configuration file, symlink or copy to
;; ~/.emacs.d/init.el or $XDG_CONFIG_HOME/.emacs.d/init.el

;; In Emacs 27+, the sequence of initialization is
;; 1. early-init.el
;; 2. package.el
;; 3. init.el
#+end_src

* Backward compatibility

In Emacs versions before 27, we should load the ~early-init.el~ file explicitly in ~init.el~.

#+name: early-init-pre-27
#+begin_src emacs-lisp
;; backwards-compatibility code for Emacs versions <27
(when (version<= emacs-version "26.3")
  ;; load early-initialization file ~/.emacs.d/early-init.el
  ;; Emacs 27+ automatically loads this file before rendering UI elements
  (let ((local-f (expand-file-name "early-init.el" user-emacs-directory)))
    (when (file-exists-p local-f) (load-file local-f))))
#+end_src

* Optimizations

** Startup optimizations                                              :early:

Optimizations for improving startup time:
- Increase garbage collection threshold from the default (~800~ kb) to
  ~128~ MB and revert it after initialization.
- Set ~file-name-handler-alist~ to ~nil~ as it is always scanned
  whenever files are loaded and revert it after initialization.
  This specifies special I/O handlers for files based on file name.
  Startup files are always local ~*.el~ files, so no special handlers
  are needed for them.
- Don't load installed packages automatically.
  Load them manually in the config.
  (*TODO* double check this works properly in Emacs 27.)

#+name: startup-optimizations
#+begin_src emacs-lisp
;; optimizations for reducing startup time (reverted later)
;; * file-name-handler-alist -> nil as it is scanned when files are loaded
;; * increase garbage collection threshold
;; * increase max bytes read from a sub-process in a single op (Emacs 27+)
(setq file-name-handler-alist-orig file-name-handler-alist
      gc-cons-threshold-orig gc-cons-threshold
      file-name-handler-alist nil ;; no special file handling during init
      gc-cons-threshold 134217728) ;; 128MB in bytes, default is 800k

;; revert optimizations after initialization
(add-hook 'after-init-hook
          (lambda ()
            (setq file-name-handler-alist file-name-handler-alist-orig)
            (setq gc-cons-threshold gc-cons-threshold-orig))
          t)

;; disable automatic activation of installed packages
(setq package-enable-at-startup nil)
#+end_src

** I/O optimizations                                                  :early:

Increase the maximum bytes read from a sub-process in a single file
operation from the default (~4096~ bytes) to ~1~ MB ([[https://github.com/emacs-mirror/emacs/blob/master/etc/NEWS.27#L3212-L3217][Emacs 27+]]).

#+name: io-optimizations
#+begin_src emacs-lisp
;; optimizations for improving I/O performance
;; * increase max bytes read from a sub-process in a single op (Emacs 27+)
(when (boundp 'read-process-output-max)
  (setq read-process-output-max 1048576)) ;; 1MB in bytes, default 4096 bytes
#+end_src

* Customize file

Emacs has a text GUI interface for customizing the editor, and
settings configured with this interface are saved in ~custom-file~.
To avoid the ~M-x customize~ settings clobbering the tangled
initialization files (which it does by default), set ~custom-file~ to
to something that is not the Emacs init file.

#+name: custom-file
#+begin_src emacs-lisp
;; store Customize settings in a separate file, custom.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(add-hook 'after-init-hook
          (load custom-file 'noerror))
#+end_src

* Package management

** Local packages                                                     :early:

Add the ~lisp/~ and ~site-lisp/~ directories in the user Emacs
directory to the load path to facilitate loading of user maintained
and local copies of third-party packages.

This can be done in ~early-init.el~ so that locally maintained
decoration and theming code can be loaded there.

#+name: add-dirs-to-load-path
#+begin_src emacs-lisp
;; add user packages in lisp/ to load path
(defvar lisp-dir (expand-file-name "lisp" user-emacs-directory))
(unless (file-exists-p lisp-dir) (make-directory lisp-dir))
(add-to-list 'load-path lisp-dir)
(dolist (project (directory-files lisp-dir t "\\w+"))
  (when (file-directory-p project) (add-to-list 'load-path project)))

;; add third-party packages in site-lisp/ and its subdirs to load path
(defvar site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory))
(unless (file-exists-p site-lisp-dir) (make-directory site-lisp-dir))
(add-to-list 'load-path site-lisp-dir)
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project) (add-to-list 'load-path project)))
#+end_src

** ELPA-compatible package repositories

Set ELPA-compatible repositories to fetch and install packages from,
and their priorities.
When the packages with the same name exist on multiple repositories,
the version on the repository with the highest priority is preferred.

The following package repositories are the most well-known:
- [[https://elpa.gnu.org/][GNU Emacs Lisp Package Archive]] (ELPA).
  This is the default package repository for Emacs.
- [[https://melpa.org/][Milkypostman’s Emacs Lisp Package Archive]] (MELPA).
  This is an unofficial package repository containing a large
  selection of packages.
  Packages in this repository are vetted at time of initial inclusion,
  which are automatically rebuilt on source updates.
  Does not contain some packages from [[https://www.emacswiki.org/][EmacsWiki]] due to [[https://github.com/melpa/melpa/pull/5008][security risks]]
  (some are in MELPA because they were mirrored on Github)
- [[https://stable.melpa.org/][Milkypostman’s Emacs Lisp Package Archive Stable]] (MELPA Stable).
  This is a version of MELPA that only builds tagged releases.
  Has less packages compared to MELPA.
- [[https://orgmode.org/elpa.html][Org Emacs Lisp Package Archive]] (Org).
  This is the official [[https://orgmode.org/][Org]] package repository that contains the newest
  version of ~org~ (also in ELPA), along with ~org-plus-contrib~ that
  contains all contributed files (not in ELPA).

Only ELPA and MELPA are used here so the latest package versions are
installed, and because there isn't generally a need for all the
contributed files for Org.

#+name: elpa-repositories
#+begin_src emacs-lisp
;; set ELPA-compatible package repositories and their priorities
(setq package-archives '(("GNU"   . "https://elpa.gnu.org/packages/")
                         ("MELPA" . "https://melpa.org/packages/"))
      package-archive-priorities '(("GNU"   . 1)
                                   ("MELPA" . 2)))
#+end_src

** Package initialization

Initialize package loading support.
Disable auto-package loading and load packages explicitly for faster initialization times.

#+name: package-init
#+begin_src emacs-lisp
;; initialize package.el
(require 'package)
(package-initialize)
#+end_src

** use-package                                                        :melpa:

Download the [[https://github.com/jwiegley/use-package][use-package]] if not already on the system.
Load it, which will provide configuration macros for installing,
loading and configuring packages.
Also load its subpackage [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]], which provides macros for key
bindings.

#+name: use-package
#+begin_src emacs-lisp
;; bootstrap use-package, provides configuration macros
;; for info, see https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; preload use-package and bind-key packages
;; configure imenu support for the `require' and `use-package' keywords
(eval-when-compile
  (setq use-package-enable-imenu-support t)
  (require 'use-package)
  (require 'bind-key)
  (setq use-package-always-ensure t)) ;; default to ":ensure t"
#+end_src

* Environment variables                                               :melpa:

On Mac OS X, copy the environment variables over from the login shell.

#+name: environment-variables
#+begin_src emacs-lisp
;; copy environment variables from shell, OS X GUI mode-only
(if (eq system-type 'darwin)
    (use-package exec-path-from-shell
      :init (if (memq window-system '(mac ns))
                (exec-path-from-shell-initialize))))
#+end_src

* Backend and frontend frameworks for building user interfaces

** Minibuffer completion with Icomplete

Use [[https://github.com/emacs-mirror/emacs/blob/master/lisp/icomplete.el][Icomplete]] as the completion backend, emulating [[https://www.gnu.org/software/emacs/manual/html_mono/ido.html][Ido]] where possible.
In Emacs 27+, there is a ~fido-mode~ that very close emulates Ido.
In prior versions, we configure Icomplete behavior directly (though
not as thoroughly as ~fido-mode~).

#+name: icomplete
#+begin_src emacs-lisp
;; use Icomplete as the completion backend
;; emulate ido behavior where possible
(if (version<= emacs-version "26.3")
    ;; no `fido-mode' on older Emacs versions
    (progn
      (setq completion-category-defaults nil
            icomplete-compute-delay 0
            icomplete-hide-common-prefix nil
            icomplete-prospects-height 2
            icomplete-show-matches-on-no-input t
            icomplete-tidy-shadowed-file-names t)
      (icomplete-mode)
      ;; C-s and C-r cycles through completion candidates like isearch
      (define-key icomplete-minibuffer-map (kbd "C-s")
        #'icomplete-forward-completions)
      (define-key icomplete-minibuffer-map (kbd "C-r")
        #'icomplete-backward-completions)
      ;; RET selects current completion candidate like ido
      ;; M-j uses input as is, e.g. to create new files or new dirs
      (define-key icomplete-minibuffer-map (kbd "RET")
        #'icomplete-force-complete-and-exit)
      (define-key icomplete-minibuffer-map (kbd "M-j")
        #'exit-minibuffer))
  ;; enable `fido-mode'
  (fido-mode))
#+end_src

** Hydra                                                        :melpa:hydra:

[[https://github.com/abo-abo/hydra][Hydra]] is a framework for surfacing temporary bindings with visual
help.

Temporary bindings are defined using ~defhydra~.
They are not bound by default on creation, and need to be explicitly
given a binding (for example, using ~define-key~) for easy invocation.

Hydra bindings and definitions in this configuration adhere to the
following conventions:
- Globally-accessible hydras are always bound to a key sequence
  prefixed by ~C-c C-M-~ (like ~C-c C-M-b~ for the basic buffer
  management hydra).
- Major mode-specific hydras are always bound to ~C-c C-M-m~.
- A hydra always has a ~q~ head that quits the hydra, except when the
  user is expected to type normally while the hydra is active
  (for example, the [[Multiple cursors hydra][multiple cursors hydra]]).

For ease of reference, hydra colors are mapped to the following
behavior (copied from [[https://github.com/abo-abo/hydra/wiki/Hydra-Colors][here]]):

| Body color | Head color | Executing NON-HEADS   | Executing HEADS |
|------------+------------+-----------------------+-----------------|
| amaranth   | red        | Disallow and Continue | Continue        |
| teal       | blue       | Disallow and Continue | Quit            |
| pink       | red        | Allow and Continue    | Continue        |
| red        | red        | Allow and Quit        | Continue        |
| blue       | blue       | Allow and Quit        | Quit            |

The ~:demand t~ keyword is used to make sure the package is loaded and
the ~defhydra~ macro immediately available when the block is
processed.

#+name: hydra
#+begin_src emacs-lisp
;; framework for defining temporary, repeatable bindings
;; see https://github.com/abo-abo/hydra
(use-package hydra
  :demand t)
#+end_src

** Text completion with Company                                       :melpa:

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs that supports
pluggable back-ends and front-ends for retrieving and displaying
completion candidates.
Many other Emacs packages support this.

This can get in the way for non-programming modes, so it is
enabled by default only in programming modes.

#+name: company
#+begin_src emacs-lisp
;; text completion framework
(use-package company
  :defer t
  :init (with-eval-after-load 'prog-mode
          (add-hook 'prog-mode-hook 'company-mode))
  :config
  (setq company-dabbrev-downcase nil
        company-idle-delay 0.25
        company-minimum-prefix-length 2
        company-selection-wrap-around t
        company-show-numbers t ;; use M-<num> to directly choose completion
        company-tooltip-align-annotations t))
#+end_src

** Edit-indirect                                                      :melpa:

Backend package that allows editing regions in a separate buffer, much like
how ~C-c '~ works in Org source blocks.
This is used by other packages, like ~markdown-mode~.

#+name: edit-indirect
#+begin_src emacs-lisp
;; edit regions in separate buffers, used by other packages like markdown-mode
(use-package edit-indirect)
#+end_src

* Backups

Backup files to the =~/.backup/= directory, keeping only the newest three versions.

#+name: backup-files-directory
#+begin_src emacs-lisp
;; backup files to ~/.backup/
(let ((backup-dir (expand-file-name "~/.backup/")))
  (when (not (file-directory-p backup-dir))
    (make-directory backup-dir t))
  (setq backup-directory-alist `(("." . ,backup-dir))
        version-control t ;; use version numbers for backups
        kept-new-versions 3 ;; number of newest versions to keep
        kept-old-versions 0 ;; number of oldest versions to keep
        delete-old-versions t ;; don't ask before deleting old backups
        backup-by-copying t)) ;; backup by copying instead of renaming
#+end_src

* Bookmarks and history

** Bookmarks hydra                                                    :hydra:

Hydra for easier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]] manipulation and usage.

#+name: bookmarks-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/bookmarks (:color teal :columns 3)
  "
Bookmarks (_q_: quit)"
  ("q" nil nil)
  ("s" bookmark-set "set")
  ("d" bookmark-delete "delete")
  ("l" list-bookmarks "list")
  ("j" bookmark-jump "jump")
  ("i" bookmark-insert "insert")
  ("I" bookmark-insert-location "insert-loc")
  ("L" bookmark-load "load")
  ("W" bookmark-write "write"))
(global-set-key (kbd "C-c C-M-b m") 'my-hydra/bookmarks/body)
#+end_src

** Minibuffer commands                                                :melpa:

Use [[https://github.com/DarwinAwardWinner/amx][amx]] in place of the standard ~M-x~.

It is compatible with most completion systems and provides the
following enhancements:
- Prioritizing most-used commands.
- Showing keyboard shortcuts.

#+name: amx
#+begin_src emacs-lisp
;; alternative interface for M-x
(use-package amx
  :bind ("M-X" . amx-major-mode-commands)
  :init (amx-mode))
#+end_src

** Recent files

The built in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/recentf.el][recentf]] provides functionality to track and list recently
opened files.

#+name: recentf
#+begin_src emacs-lisp
;; recently opened files
(setq recentf-max-menu-items 10
      recentf-max-saved-items 50
      recentf-auto-cleanup 'mode) ;; clean up recent list when turning on mode
(recentf-mode 1)
;; exclude files opened with SSH so TRAMP is not spammed with stat calls
;; exclude files opened as the superuser with su or sudo
(add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?:")
(global-set-key (kbd "C-c C-M-r f") #'recentf-open-files)
#+end_src

** Save location in file

Enable [[https://www.emacswiki.org/emacs/SavePlace][saveplace]] to automatically save location in file,
so that the next time the file is visited the point will
automatically go to the last place it was at during the
previous visit.

#+name: saveplace
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** Save minibuffer history

Enable [[https://github.com/emacs-mirror/emacs/blob/master/lisp/savehist.el][savehist]] to automatically save minibuffer command history,
which can be leverage by different completion packages.
The default history file location is ~history~ in the
~user-emacs-directory~ directory, and can be changed by setting
the ~savehist-file~ variable.
The number of items saved is determined by the ~history-length~
variable.

#+name: savehist
#+begin_src emacs-lisp
(setq history-length 10000)
(savehist-mode 1)
#+end_src

* Buffer management

** Bury scratch and message buffer instead of killing them

Make ~*scratch*~ and ~*Message*~ buffers unkillable, burying the
buffers instead when the user tries to delete them.

#+name: bury-not-kill-buffers
#+begin_src emacs-lisp
;; bury these buffers on kill command instead of killing them
(setq my-unkillable-buffers '("*scratch*"
                              "*Messages*"))
(defun my-bury-unkillable-buffers ()
  "Buries the current buffer if it is unkillable, otherwise return t."
  (if (member (buffer-name) my-unkillable-buffers)
      (progn
        (bury-buffer)
        nil)
    t))
(add-hook 'kill-buffer-query-functions #'my-bury-unkillable-buffers)
#+end_src

** Buffer manipulation hydra                                          :hydra:

Hydra for basic [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffers.html][buffer]] manipulation.

#+name: buffer-hydra
#+begin_src emacs-lisp
;; hydra for basic buffer management
(defhydra my-hydra/buffer (:color amaranth :columns 5)
  "
Buffer (_q_: quit)"
  ("q" nil nil :exit t)
  ("p" previous-buffer "previous")
  ("n" next-buffer "next")
  ("R" revert-buffer "revert")
  ("B" bury-buffer "bury")
  ("U" unbury-buffer "unbury")
  ("s" save-buffer "save")
  ("S" save-some-buffers "save-all")
  ("k" kill-this-buffer "kill")
  ("K" kill-matching-buffers "kill-match")
  ("b" switch-to-buffer "switch" :exit t))
(global-set-key (kbd "C-c C-M-b f") 'my-hydra/buffer/body)
#+end_src

** Advanced buffer management with Ibuffer

Use [[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] to manage buffers.

#+name: ibuffer
#+begin_src emacs-lisp
;; advanced buffer management with Ibuffer
(add-hook 'ibuffer-mode-hook
          (lambda ()
            ;; refresh buffer after interactive commands
            ;; default to first saved group
            (progn (ibuffer-auto-mode 1)
                   (when ibuffer-saved-filter-groups
                     (ibuffer-switch-to-saved-filter-groups
                      (car (car ibuffer-saved-filter-groups)))))))
(setq ibuffer-expert t ;; skip extraneous confirm messages
      ibuffer-show-empty-filter-groups nil)
(global-set-key (kbd "C-x C-b") #'ibuffer)
#+end_src

*** Ibuffer filter groups

Set default rules for grouping files in Ibuffer.

#+name: ibuffer-filter-groups
#+begin_src emacs-lisp
;; configure Ibuffer filter groups
(with-eval-after-load 'ibuffer
  (setq ibuffer-saved-filter-groups
        ;; files are grouped by the first matching filter group in the list
        '(("default"
           ("Emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")))
           ("Shell" (or (mode . eshell-mode)
                        (mode . shell-mode)
                        (mode . term-mode)))
           ("Programming" (derived-mode . prog-mode))
           ("Web Browsing" (mode . eww-mode))
           ("Org" (or (mode . org-mode)
                      (mode . org-agenda-mode)))
           ("Magit" (or (name . "\*magit.*\\*")
                        (mode . magit-mode)))
           ("Dired" (mode . dired-mode))
           ("Help" (or (derived-mode . apropos-mode)
                       (derived-mode . help-mode)
                       (derived-mode . Info-mode)))))))
#+end_src

*** Group by version-controlled project in Ibuffer                    :melpa:

Add support for grouping files by version-controlled project ([[https://github.com/purcell/ibuffer-vc][link]]).

#+name: ibuffer-vc
#+begin_src emacs-lisp
;; build VC project ibuffer filter groups
(use-package ibuffer-vc
  :after ibuffer
  :bind (:map ibuffer-mode-map
         ("/ V" . ibuffer-vc-set-filter-groups-by-vc-root)))
#+end_src

*** Ibuffer hydra                                                     :hydra:

Major mode-specific hydra for Ibuffer.

#+name: ibuffer-hydra
#+begin_src emacs-lisp
;; hydras for Ibuffer commands
;; adapted from https://github.com/abo-abo/hydra/wiki/Ibuffer
(defhydra my-hydra/ibuffer-mode (:color amaranth :columns 3)
  "
Ibuffer (_q_: quit)"
  ("q" nil nil :exit t)
  ;; navigation
  ("n" ibuffer-forward-line "next")
  ("p" ibuffer-backward-line "prev")
  ("RET" (condition-case nil
             (progn (ibuffer-toggle-filter-group)
                    (my-hydra/ibuffer-mode/body))
           (error (ibuffer-visit-buffer))) "open" :exit t)
  ;; mark
  ("m" ibuffer-mark-forward "mark")
  ("u" ibuffer-unmark-forward "unmark")
  ("*" my-hydra/ibuffer-mode/mark/body "→ Mark" :exit t)
  ;; actions
  ("S" ibuffer-do-save "save")
  ("D" ibuffer-do-delete "delete")
  ("a" my-hydra/ibuffer-mode/action/body "→ Action" :exit t)
  ;; view
  ("g" ibuffer-update "refresh")
  ("s" my-hydra/ibuffer-mode/sort/body "→ Sort" :exit t)
  ("/" my-hydra/ibuffer-mode/filter/body "→ Filter" :exit t)
  ;; other
  ("o" ibuffer-visit-buffer-other-window "open-other" :exit t))
(defhydra my-hydra/ibuffer-mode/mark (:color amaranth :columns 5
                                      :after-exit (my-hydra/ibuffer-mode/body))
  "
Ibuffer → Mark (_q_: ←)"
  ("q" nil nil :exit t)
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed"))
(defhydra my-hydra/ibuffer-mode/action (:color teal :columns 3
                                        :after-exit (if (eq major-mode 'ibuffer-mode)
                                                        (my-hydra/ibuffer-mode/body)))
  "
Ibuffer → Action (_q_: ←)"
  ("q" nil nil)
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe"))
(defhydra my-hydra/ibuffer-mode/sort (:color amaranth :columns 5)
  "
Ibuffer → Sort (_q_: ←)"
  ("q" my-hydra/ibuffer-mode/body nil :exit t)
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("s" ibuffer-do-sort-by-size "size")
  ("v" ibuffer-do-sort-by-recency "recency")
  ("i" ibuffer-invert-sorting "invert"))
(defhydra my-hydra/ibuffer-mode/filter (:color amaranth :columns 5)
  "
Ibuffer → Filter (_q_: ←)"
  ("q" my-hydra/ibuffer-mode/body nil :exit t)
  ("a" ibuffer-add-saved-filters "add-saved")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("p" ibuffer-pop-filter "pop")
  (">" ibuffer-filter-by-size-gt "size-gt")
  ("<" ibuffer-filter-by-size-lt "size-lt")
  ("&" ibuffer-and-filter "and")
  ("|" ibuffer-or-filter "or")
  ("V" ibuffer-vc-set-filter-groups-by-vc-root "vc-groups")
  ("R" ibuffer-switch-to-saved-filter-groups "saved-groups")
  ("\\" ibuffer-clear-filter-groups "clear-groups")
  ("/" ibuffer-filter-disable "disable"))
(with-eval-after-load 'ibuffer
  (define-key ibuffer-mode-map (kbd "C-c C-M-m") #'my-hydra/ibuffer-mode/body))
#+end_src

*** Ibuffer icons                                                     :melpa:

Add file icons next to the file names.
Uses file icon API exposed by the ~all-the-icons~ package.

#+name: all-the-icons-ibuffer
#+begin_src emacs-lisp
;; use font icons in Ibuffer
(when (display-graphic-p)
  (use-package all-the-icons-ibuffer
    :after (all-the-icons ibuffer)
    :config (all-the-icons-ibuffer-mode 1)))
#+end_src

* Command-line interaction

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] is an Elisp shell-like command interpreter that can be used in place of ~term-mode~ and ~bash~.
[[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][More information]] on Eshell usage.

*Customizations*:
_ Increase the size of the history input ring from ~128~ to ~1024~.
- Don't review quick commands (those that have no output and returns a
  ~0~ exit code indicating success).
- Have space go to the end of the buffer when it is visible.
- Have point jump to the beginning of the last command after each
  command.
- Load [[https://github.com/emacs-mirror/emacs/blob/master/lisp/eshell/em-smart.el][em-smart]] which adds some quality of life improvements.

*Usage note*:
- When searching history using the beginning of a command,
  ~eshell-previous-matching-input-from-input~ (~UP~), ~M-p~ or ~C-c
  M-r~ is much friendlier than ~eshell-previous-matching-input~
  (~M-r~).
  Type the first few characters of the command, and press
  the ~UP~ or ~M-p~ key repeatedly to cycle only through the matching
  commands in the history.
  Copied from StackOverflow answer [[https://stackoverflow.com/questions/13009908/eshell-search-history][here]].

#+name: eshell
#+begin_src emacs-lisp
(setq eshell-history-size 1024
      eshell-review-quick-commands nil
      eshell-smart-space-goes-to-end t
      eshell-where-to-jump 'begin)
(require 'em-smart)
#+end_src

*** Run visual commands in a separate term buffers

Some "visual" commands present and update a full-screen interface
instead of streaming output to stdout.
Run these commands inside a separate term buffer instead.

#+name: eshell-visual-commands
#+begin_src emacs-lisp
;; enable Eshell to spawn visual commands inside
(require 'em-term)
;; run visual commands and subcommands in term sessions
(dolist (cmd '("htop" "lftp" "ssh" "vi" "vim" "watch"))
  (add-to-list 'eshell-visual-commands cmd))
(dolist (subcmd '(("tail" "-f" "-F")
                  ("sudo" "vi" "vim")
                  ("vagrant" "ssh")))
  (add-to-list 'eshell-visual-subcommands subcmd))
#+end_src

*** Disabling Git pagers so Git can be used in Eshell

#+name: eshell-disable-git-pager
#+begin_src emacs-lisp
;; ensure Git does not launch a pager for easier usage with eshell
(setenv "GIT_PAGER" "")
#+end_src

*** Named Eshell buffers for easier management of multiple Eshell buffers

Provide a binding to a wrapper function that spawns or switches to a
named Eshell buffer.
This allows for easier access to and management of multiple Eshell
buffers.

#+name: eshell-named-buffers
#+begin_src emacs-lisp
;; adapted from https://arte.ebrahimi.org/blog/named-eshell-buffers
(defun my-eshell-with-name ()
  "Open new or switch to existing named eshell buffer."
  (interactive)
  (let* ((my-es-bufs (seq-filter
                      (lambda (buf)
                        (string-match-p "*eshell*" (buffer-name buf)))
                      (buffer-list)))
         (my-es-buf-name-list (mapcar #'buffer-name my-es-bufs))
         (my-es-buf-name (completing-read
                          "Eshell Buffer : " my-es-buf-name-list)))
    (if (member my-es-buf-name (mapcar #'buffer-name (buffer-list)))
        (switch-to-buffer my-es-buf-name)
      (progn
        (eshell 42)
        (rename-buffer (concat "*eshell*<" my-es-buf-name ">"))))))
;; binding for spawning or switching to a named Eshell buffer
(global-set-key (kbd "C-c C-M-e s") #'my-eshell-with-name)
#+end_src

*** Eshell fish-like history autosuggestions                          :melpa:

[[https://github.com/dieggsy/esh-autosuggest][esh-autosuggest]] provides [[https://fishshell.com/][fish]]-like history autosuggestions in Eshell.

When an autosuggestion is displayed, press ~<right>~ or ~C-f~ to fully
autocomplete, or ~M-<right>~ or ~M-f~ to autocomplete just the next word.

#+name: esh-autosuggest
#+begin_src emacs-lisp
;; history autosuggestions
;; <right> or C-f completes fully, <M-right> or M-f completes partially
(use-package esh-autosuggest
  :after eshell
  :hook (eshell-mode . esh-autosuggest-mode))
#+end_src

*** Extend pcomplete with fish-like completions              :external:melpa:

The [[https://gitlab.com/ambrevar/emacs-fish-completion][fish-completion]] package extends [[https://github.com/emacs-mirror/emacs/blob/master/lisp/pcomplete.el][pcomplete]] ([[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][more info]])
to power Eshell command-line completions using [[https://fishshell.com/][fish]].

This package requires that ~fish~ be installed on the system and
be on the system path.

#+name: fish-completion
#+begin_src emacs-lisp
;; extend pcomplete with fish shell
(when (executable-find "fish")
  (use-package fish-completion
    :after eshell
    :hook (eshell-mode . fish-completion-mode)))
#+end_src

** Command interpreters for other shells

*** Make command interpreter prompts read-only

Make the command interpreter (comint) prompts read-only.

#+name: comint-prompt-read-only
#+begin_src emacs-lisp
;; make shell prompts read-only
(setq comint-prompt-read-only t)
#+end_src

*** Kill term buffers using "q" after session end

Kill term buffers after session end on a "q" keypress.

#+name: kill-term-buffers-with-q-after-end
#+begin_src emacs-lisp
;; kill term buffers with 'q' after session end
(defun term-handle-exit--close-buffer-on-cmd (&rest args)
  "Kill term buffer with 'q' after session exit."
   (when (null (get-buffer-process (current-buffer)))
     (use-local-map (let ((map (make-sparse-keymap)))
                      (define-key map (kbd "q")
                        (lambda ()
                          (interactive)
                          (kill-buffer (current-buffer))))
                      map))))
(advice-add 'term-handle-exit :after #'term-handle-exit--close-buffer-on-cmd)
#+end_src

*** Term hydra

Major mode-specific hydra for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Terminal-emulator.html][term-mode]] for toggling between char mode
(mostly similar to a regular terminal emulator) and line mode (which
acts like [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Mode.html#Shell-Mode][Shell mode]]).

#+name: term-hydra
#+begin_src emacs-lisp
;; hydra for term-mode for toggling between char and line modes
(defhydra my-hydra/term-mode (:color amaranth :columns 4)
  "
Term (_q_: quit)"
  ("q" nil nil :exit t)
  ("m" (lambda () (interactive)
         (if (term-in-line-mode)
             (progn (term-char-mode) (message "line → char"))
           (progn (term-line-mode) (message "char → line")))) "toggle-mode"))
;; bindings
(with-eval-after-load 'term
  (define-key term-mode-map (kbd "C-c C-M-m") #'my-hydra/term-mode/body)
  (define-key term-raw-map (kbd "C-c C-M-m") #'my-hydra/term-mode/body))
#+end_src

* Comparison tools

** Ediff hydra                                                        :hydra:

Hydra for the built-in [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]], which visualizes the standard Unix [[https://en.wikipedia.org/wiki/Diff][diff]]
and [[https://en.wikipedia.org/wiki/Patch_(Unix)][patch]] programs.

#+name: ediff-hydra
#+begin_src emacs-lisp
;; hydra for Ediff
(defhydra my-hydra/ediff (:color teal :hint nil)
  "
Ediff (_q_: quit)
Buffer   _b_ : 2-way       _B_ : 3-way
Files    _f_ : 2-way       _F_ : 3-way       _c_ : current
Region   _l_ : line-wise   _w_ : word-wise
Windows  _L_ : line-wise   _W_ : word-wise
"
  ("q" nil nil :exit t)
  ("b" ediff-buffers)
  ("B" ediff-buffers3)
  ("f" ediff-files)
  ("F" ediff-files3)
  ("c" ediff-current-file)
  ("l" ediff-regions-linewise)
  ("w" ediff-regions-wordwise)
  ("L" ediff-windows-linewise)
  ("W" ediff-windows-wordwise))

;; binding for Ediff hydra
(global-set-key (kbd "C-c C-M-d f") #'my-hydra/ediff/body)
#+end_src

** Smerge hydra

Major mode-specific hydra for [[https://github.com/emacs-mirror/emacs/blob/master/lisp/vc/smerge-mode.el][Smerge]], a lightweight alternative to Ediff.
It is the default merge tool called by [[Magit][Magit]] to resolve merge conflicts.

#+name: smerge-hydra
#+begin_src emacs-lisp
;; hydra for smerge-mode
(defhydra my-hydra/smerge-mode (:color pink :hint nil)
  "
Smerge (_q_: quit)
Move   _n_   : next          _p_ : prev
Keep   _b_   : base          _u_   : upper         _l_   : lower
       _a_   : all           _RET_ : current
Diff   _<_   : upper/base    _=_   : upper/lower   _>_   : base/lower
       _R_   : refine        _E_   : ediff
Other  _C_   : combine       _r_   : resolve       _k_   : kill current
"
  ("q" nil nil :exit t)
  ("n" smerge-next)
  ("p" smerge-prev)
  ("b" smerge-keep-base)
  ("u" smerge-keep-upper)
  ("l" smerge-keep-lower)
  ("a" smerge-keep-all)
  ("RET" smerge-keep-current)
  ("<" smerge-diff-base-upper)
  ("=" smerge-diff-upper-lower)
  (">" smerge-diff-base-lower)
  ("R" smerge-refine)
  ("E" smerge-ediff)
  ("C" smerge-combine-with-next)
  ("r" smerge-resolve)
  ("k" smerge-kill-current))
;; binding
(with-eval-after-load 'smerge-mode
  (define-key smerge-mode-map (kbd "C-c C-M-m") #'my-hydra/smerge-mode/body))
#+end_src

** View and compare directory trees using Ztree                       :melpa:

The [[https://github.com/fourier/ztree][Ztree]] package provides a directory tree viewer and directory tree
comparison functionality similar to [[https://www.scootersoftware.com/][Beyond Compare]] or [[https://www.araxis.com/merge/index.en][Araxis Merge]].

#+name: ztree
#+begin_src emacs-lisp
;; view and compare directory trees, like Beyond Compare
(use-package ztree
  :bind (("C-c C-M-d z" . ztree-diff)
         ("C-c C-M-d t" . ztree-dir))
  :config
  (setq ztree-dir-move-focus t ;; RET in ztree-dir also moves focus
        ztree-draw-unicode-lines t ;; unicode lines
        ztree-show-number-of-children t)) ;; show number of files in subdir tree

;; convenience navigation bindings for `ztreedir-mode' and `ztreediff-mode'
(with-eval-after-load 'ztree-view
  (define-key ztree-mode-map (kbd "n") #'ztree-next-line)
  (define-key ztree-mode-map (kbd "p") #'ztree-previous-line))
#+end_src

*** Ztree directory tree hydra                                        :hydra:

Major mode-specific hydra for ~ztreedir-mode~.

#+name: ztree-dir-hydra
#+begin_src emacs-lisp
;; mode-specific hydra for ztreedir-mode
(defhydra my-hydra/ztreedir-mode (:color pink :columns 3)
  "
ztree-dir (_q_: quit)"
  ("q" nil nil)
  ("RET" ztree-perform-action "toggle/open-other" :exit t)
  ("SPC" ztree-perform-soft-action "toggle/open" :exit t)
  ("x" ztree-toggle-expand-subtree "toggle" :exit t)
  ("g" ztree-refresh-buffer "refresh" :exit t)
  ("DEL" ztree-move-up-in-tree "goto-parent" :exit t)
  ("H" ztree-dir-toggle-show-filtered-files "show-filtered" :exit t)
  (">" ztree-dir-narrow-to-dir "narrow" :exit t)
  ("<" ztree-dir-widen-to-parent "widen" :exit t)
  ("d" ztree-dir-open-dired-at-point "dired" :exit t))
(with-eval-after-load 'ztree-dir
  (define-key ztreedir-mode-map (kbd "C-c C-M-m") #'my-hydra/ztreedir-mode/body))
#+end_src

*** Ztree directory tree comparison hydra                             :hydra:

Major mode-specific hydra for ~ztreediff-mode~.

#+name: ztree-diff-hydra
#+begin_src emacs-lisp
;; mode-specific hydra for ztreediff-mode
(defhydra my-hydra/ztreediff-mode (:color pink :columns 3)
  "
ztree-diff (_q_: quit)"
  ("q" nil nil)
  ("RET" ztree-perform-action "toggle/ediff" :exit t)
  ("SPC" ztree-perform-soft-action "toggle/diff" :exit t)
  ("TAB" ztree-jump-side "jump-side" :exit t)
  ("x" ztree-toggle-expand-subtree "toggle" :exit t)
  ("g" ztree-refresh-buffer "refresh" :exit t)
  ("DEL" ztree-move-up-in-tree "goto-parent" :exit t)
  ("h" ztree-diff-toggle-show-equal-files "show-equal" :exit t)
  ("H" ztree-diff-toggle-show-filtered-files "show-filtered" :exit t)
  ("d" ztree-diff-simple-diff-files "diff-files" :exit t)
  ("v" ztree-diff-view-file "view" :exit t)
  ("C" ztree-diff-copy "copy" :exit t)
  ("D" ztree-diff-delete-file "delete" :exit t)
  ("r" ztree-diff-partial-rescan "rescan-part" :exit t)
  ("R" ztree-diff-full-rescan "rescan-full" :exit t))
(with-eval-after-load 'ztree-diff
  (define-key ztreediff-mode-map (kbd "C-c C-M-m") #'my-hydra/ztreediff-mode/body))
#+end_src

* Dired


[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] is a built-in directory editor for Emacs.n

#+name: dired
#+begin_src emacs-lisp
(require 'dired-x) ;; extra features
(require 'dired-aux) ;; even more extra features
(setq dired-dwim-target t ;; use neighboring dired buffer as default target dir
      dired-listing-switches "-alhvFG" ;; more readable file listings
      dired-omit-files (concat dired-omit-files "\\|^\\..+$") ;; omit dot files in dired-omit-mode
      dired-recursive-copies 'always ;; always copy recursively
      dired-recursive-deletes 'always) ;; always delete recursively
(add-hook 'dired-mode-hook 'auto-revert-mode) ;; auto-refresh on file change
#+end_src

** Dired hydra                                                        :hydra:

Hydra for Dired, one of the heads uses [[dired-filter extension to add Ibuffer-like filters to Dired][dired-filter]].

#+name: dired-hydra
#+begin_src emacs-lisp
;; hydras for Dired
(defhydra my-hydra/dired-mode (:color pink :columns 4)
  "
Dired (_q_: quit)"
  ("q" nil nil :exit t)
  ("RET"
   (progn
     (dired-find-file)
     (when (eq major-mode 'dired-mode)
       (my-hydra/dired-mode/body)))
   "open" :exit t)
  ("{" find-name-dired "find-name" :exit t)
  ("}" find-grep-dired "find-grep" :exit t)
  ("(" dired-hide-details-mode "toggle-details")
  (")" dired-omit-mode "toggle-omit")
  ("+" dired-create-directory "mkdir")
  ("=" dired-diff "diff" :exit t)
  ("_" dired-show-file-type "show-file-type")
  ("?" dired-summary "help")
  ("A" dired-do-find-regexp "find-regex" :exit t)
  ("C" dired-do-copy "copy")
  ("c" dired-do-compress-to "compress-to")
  ("D" dired-do-delete "delete")
  ("E" dired-mark-extension "mark-ext")
  ("F" dired-do-find-marked-files "find-marked" :exit t)
  ("G" dired-do-chgrp "chgrp")
  ("g" revert-buffer "refresh")
  ("i" dired-maybe-insert-subdir "insert-subdir")
  ("K" my-dired-kill-and-next-subdir "kill-subdir")
  ("l" dired-do-redisplay "redisplay")
  ("M" dired-do-chmod "chmod")
  ("m" dired-mark "mark")
  ("O" dired-display-file "display")
  ("o" dired-find-file-other-window "find-file-o" :exit t)
  ("Q" dired-do-find-regexp-and-replace "find-regex-sub" :exit t)
  ("R" dired-do-rename "rename")
  ("S" dired-do-symlink "symlink")
  ("s" dired-sort-toggle-or-edit "date-sort")
  ("T" dired-do-touch "touch")
  ("t" dired-toggle-marks "toggle-marks")
  ("U" dired-unmark-all-marks "unmark-all")
  ("u" dired-unmark "unmark")
  ("v" dired-view-file "view-file" :exit t) ;; open file in view-mode
  ("Y" dired-do-relsymlink "symlink-to-dir")
  ("Z" dired-do-compress "compress"))
;; binding for dired hydra
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "C-c C-M-m") #'my-hydra/dired-mode/body))
#+end_src

*** Helper functions for Dired hydra

Helper functions for Dired hydra:
- Kill a Dired directory buffer and jump to its parent.

#+name: dired-hydra-helper-functions
#+begin_src emacs-lisp
;; adapted from https://www.reddit.com/r/emacs/comments/jh1me/keeping_large_dired_buffers_tidy/
(defun my-dired-kill-and-next-subdir ()
  "Kill current subdir in dired, and jump back to its parent dir."
  (interactive)
  (let* ((subdir-name (directory-file-name (dired-current-directory)))
         (parent-dir  (file-name-directory subdir-name))
         (search-term (concat " "
                              (file-name-base subdir-name)
                              (file-name-extension subdir-name t))))
    (dired-kill-subdir)
    (dired-goto-subdir parent-dir)
    (search-forward search-term)))
#+end_src

** dired-filter extension to add Ibuffer-like filters to Dired        :melpa:

~dired-filter~ from the [[https://github.com/Fuco1/dired-hacks][dired-hacks]] collection adds filtering capability like that of [[Advanced buffer management with Ibuffer][Ibuffer]] to Dired.

#+name: dired-filter
#+begin_src emacs-lisp
(use-package dired-filter
  :bind (:map dired-mode-map
         ("/" . dired-filter-map))
  :hook (dired-mode . dired-filter-mode)
  :init (setq-default dired-filter-stack nil))
#+end_src

*** dired-filter hydra                                                :hydra:

Hydra for ~dired-filter~.
Entrypoint is through the [[Dired hydra]].

#+name: dired-filter-hydra
#+begin_src emacs-lisp
;; add dired-filter hydra
(defhydra my-hydra/dired-mode/filter (:color pink :columns 4)
  "
Dired → Filter (_q_: ←)"
  ("q" my-hydra/dired-mode/body nil :exit t)
  ("n" dired-filter-by-name "by-name")
  ("r" dired-filter-by-regex "by-regex")
  ("." dired-filter-by-extension "by-ext")
  ("h" dired-filter-by-dot-files "by-hidden")
  ("o" dired-filter-by-omit "by-omit")
  ("g" dired-filter-by-garbage "by-garbage")
  ("e" dired-filter-by-predicate "by-pred")
  ("f" dired-filter-by-file "by-file")
  ("d" dired-filter-by-directory "by-dir")
  ("m" dired-filter-by-mode "by-mode")
  ("s" dired-filter-by-symlink "by-symlink")
  ("x" dired-filter-by-executable "by-exe")
  ("ig" dired-filter-by-git-ignored "by-git-ign")
  ("|" dired-filter-or "or")
  ("!" dired-filter-negate "negate")
  ("*" dired-filter-decompose "decompose")
  ("TAB" dired-filter-transpose "transpose")
  ("p" dired-filter-pop "pop")
  ("/" dired-filter-pop-all "reset")
  ("S" dired-filter-save-filters "save")
  ("D" dired-filter-delete-saved-filters "del")
  ("A" dired-filter-add-saved-filters "add")
  ("L" dired-filter-load-saved-filters "load"))
;; add entrypoint for dired-filter hydra in my-hydra/dired-mode
(defhydra+ my-hydra/dired-mode nil
  ("/" my-hydra/dired-mode/filter/body "→ Filter" :exit t))
#+end_src

** Dired icons using all-the-icons-dired                              :melpa:

Add font icons from ~all-the-icons~ to Dired using [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]].
Requires the ~all-the-icons~ package be loaded.

#+name: all-the-icons-dired
#+begin_src emacs-lisp
;; use font icons in Dired
(use-package all-the-icons-dired
  :after (all-the-icons dired)
  :hook (dired-mode . all-the-icons-dired-mode)
  :config (set-face-attribute 'all-the-icons-dired-dir-face nil
                              :weight 'normal))
#+end_src

* Editing text

** Indent with soft tabs

Use spaces (soft tabs) to indent by default instead of actual tab
characters (hard tabs).

Use ~C-q TAB~ to input hard tabs if necessary.

#+name: indent-with-soft-tabs
#+begin_src emacs-lisp
;; indent with soft tabs; use C-q <TAB> for real tabs
(setq-default indent-tabs-mode nil)
#+end_src

** Completion-enabled yanking from kill-ring

Add a convenience function for yanking (pasting) from the kill-ring
with completion.
Completion support is provided through ~completing-read~, which is
shadowed by completion frameworks like Icomplete, Ido, Ivy, etc.

#+name: completing-yank
#+begin_src emacs-lisp
(defun my-yank-from-kill-ring ()
  "Yank from the kill ring into buffer at point or region.
Uses `completing-read' for selection, which is set by Ido, Ivy, etc."
  (interactive)
  (let ((to-insert (completing-read
                    "Yank : " (cl-delete-duplicates kill-ring :test #'equal))))
    ;; delete selected buffer region if any
    (if (and to-insert (region-active-p))
      (delete-region (region-beginning) (region-end)))
    ;; insert the selected entry from the kill ring
    (insert to-insert)))

;; yank with completion key binding
(global-set-key (kbd "C-c C-M-y y") #'my-yank-from-kill-ring)
#+end_src

** Delete selected region on delete or character input

Use the built-in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/delsel.el][delsel]] package to support deleting the selected
region on delete or some character input, which is the behavior in
line with typical user interface conventions.

#+name: delsel
#+begin_src emacs-lisp
;; typing text replaces the active (i.e. selected) region, if any is selected
(delete-selection-mode)
#+end_src

** Single spacing after sentences.

Single spacing after sentences.
For abbreviations, use non-breaking spaces that can be input with
~\\{}nbsp~ in Org documents, or with ~C-x 8 SPC~ for the UTF-8
non-breaking space character.

#+name: sentence-end-single-space
#+begin_src emacs-lisp
;; use single spaces after sentences
(setq sentence-end-double-space nil)
#+end_src

** Transparent editing of GPG files

[[https://www.gnu.org/software/emacs/manual/html_mono/epa.html][EasyPG Assistant]] is a [[https://gnupg.org/][GnuPG]] interface for Emacs.

#+name: epa-file
#+begin_src emacs-lisp
;; enable transparent editing of GPG files
(require 'epa-file)
(epa-file-enable)
#+end_src

** Keyboard macros hydra                                              :hydra:

Hydra for manipulating and using Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][keyboard macros]].
For an example, see the writeup on [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki]].

#+name: kmacros-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/kmacros (:color teal :columns 3)
  "
Keyboard Macros (_q_: quit)"
  ("q" nil nil)
  ;; start, end and execute macros
  ("(" kmacro-start-macro "start")
  (")" kmacro-end-or-call-macro "end-or-call-last")
  ("r" apply-macro-to-region-lines "call-last-region")
  ;; macro ring
  ("C-n" kmacro-cycle-ring-next "cycle-ring-next" :exit nil)
  ("C-p" kmacro-cycle-ring-previous "cycle-ring-prev" :exit nil)
  ("C-v" kmacro-view-macro "view-last" :exit nil)
  ("C-d" kmacro-delete-ring-head "delete-ring-head" :exit nil)
  ;; macro editing
  ("e" edit-kbd-macro "edit")
  ("RET" kmacro-edit-macro "edit-last")
  ("l" kmacro-edit-lossage "edit-lossage")
  ("SPC" kmacro-step-edit-macro "step-edit")
  ;; naming and binding
  ("b" kmacro-bind-to-key "bind-to-key")
  ("n" kmacro-name-last-macro "name-last")
  ("x" kmacro-to-register "to-register")
  ;; other
  ("i" insert-kbd-macro "insert-named"))
(global-set-key (kbd "C-c C-M-k") 'my-hydra/kmacros/body)
#+end_src

** Registers hydra                                                    :hydra:

Hydra for easier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][register]] manipulation and usage.

#+name: registers-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/registers (:color teal :columns 4)
  "
Registers (_q_: quit)"
  ("q" nil nil)
  ("SPC" point-to-register "save-point")
  ("w" window-configuration-to-register "save-windows")
  ("f" frameset-to-register "save-frames")
  ("j" jump-to-register "jump")
  ("s" copy-to-register "copy-region")
  ("a" append-to-register "append-region")
  ("p" prepend-to-register "prepend-region")
  ("r" copy-rectangle-to-register "copy-rect")
  ("i" insert-register "insert")
  ("l" list-registers "list")
  ("v" view-register "view"))
(global-set-key (kbd "C-c C-M-r r") 'my-hydra/registers/body)
#+end_src

** Display available bindings in a popup                              :melpa:

[[https://github.com/justbur/emacs-which-key][which-key]] shows the available bindings in the minibuffer.
Modify the configuration from the default to only manually using ~C-h~
in the middle of a key sequence.

#+name: which-key
#+begin_src emacs-lisp
;; display available bindings in popup
(use-package which-key
  :bind ("C-c C-M-w k" . which-key-show-top-level)
  :init
  (setq which-key-allow-multiple-replacements t
        which-key-compute-remaps t
        ;; configure for manual activation using C-h in the middle of a key seq
        ;; see https://github.com/justbur/emacs-which-key#manual-activation
        which-key-idle-delay 10000
        which-key-idle-secondary-delay 0.05
        which-key-show-early-on-C-h t)
  (which-key-mode 1))
#+end_src

** Expanding selected regions by semantic units                       :melpa:

Use the [[https://github.com/magnars/expand-region.el][expand-region]] package to support expanding selected regions by semantic units.
Examples include character to word, word to sentence, etc.

#+name: expand-region
#+begin_src emacs-lisp
;; expand selected region by semantic units
(use-package expand-region
  :commands er/expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

** Multiple cursors                                                   :melpa:

[[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el]] is package that enables the creation of multiple cursors in Emacs that all do the same thing simultaneously.

#+name: multiple-cursors
#+begin_src emacs-lisp
;; multiple cursors
(use-package multiple-cursors
  :defer t
  :init (setq mc/always-run-for-all nil
              mc/always-repeat-command nil
              mc/insert-numbers-default 1))
#+end_src

*** Multiple cursors hydra                                            :hydra:

Hydra providing usage hints for ~multiple-cursor-mode~.
It enables ~multiple-cursors-mode~ automatically on entrance and
disables ~multiple-cursors-mode~ on exit.

#+name: multiple-cursors-hydra
#+begin_src emacs-lisp
;; hydra helper for multiple-cursors-mode
;; disable prefix interpretation when multiple-cursors-mode is active
;; see https://stackoverflow.com/questions/53798055
(defhydra my-hydra/multiple-cursors (:color pink :hint nil
                                     :base-map (make-sparse-keymap)
                                     :post (mc/keyboard-quit))
  "
Multiple-cursors (_C-g_: quit)
Mark    _C-<_: add-prev _C->_: add-next _C-%_: add-all  _C-s_: search
        _C-,_: skp-prev _C-._: skp-next _M-<_: rm-prev  _M->_: rm-next
        _C-|_: edit-lns _<mouse-1>_: add/remove
Misc    _C-{_: number   _C-}_: letter
"
  ("C-g" nil :exit t)
  ("C-<" mc/mark-previous-like-this)
  ("C-," mc/skip-to-previous-like-this)
  ("M-<" mc/unmark-previous-like-this)
  ("C->" mc/mark-next-like-this)
  ("C-." mc/skip-to-next-like-this)
  ("M->" mc/unmark-next-like-this)
  ("C-%" mc/mark-all-like-this)
  ("C-s" mc/mark-all-in-region-regexp)
  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("<wheel-up>" scroll-down-line)
  ("<wheel-down" scroll-up-line)
  ("C-{" mc/insert-numbers)
  ("C-}" mc/insert-letters)
  ("C-|" mc/edit-lines))
(global-set-key (kbd "C-c C-M-c") #'my-hydra/multiple-cursors/body)
#+end_src

** Snippet expansion using YASnippet                                  :melpa:

[[https://github.com/joaotavora/yasnippet/tree/5b1217ab085fab4abeb1118dccb260691b446703][YASnippet]] is a snippet expansion package for Emacs, which supports
expanding abbreviations into templates.

Two additional supporting packages are also loaded:
- The YASnippet official snippet collections package, which contains
  snippet definitions for multiple file types and languages.
- The [[https://github.com/abo-abo/auto-yasnippet][Auto-YASnippet]] package, which enables temporary snippet
  definitions that can optionally be persisted.
  Persisted snippets are saved to ~aya-persist-snippet-dir~
  (defaults to ~snippets~ in ~user-emacs-directory~) in a subfolder
  corresponding to the major mode.

#+name: yasnippet
#+begin_src emacs-lisp
;; expandable snippet template system
(use-package yasnippet
  :defer 1 ;; load asynchronously after startup
  :config
  (use-package yasnippet-snippets) ;; official snippets
  (use-package auto-yasnippet) ;; enable creation of temporary snippets
  ;; remove default bindings to avoid conflicts with other packages
  ;; removing prefix bindings also removes bindings that use them
  (unbind-key "\C-c&" yas-minor-mode-map)
  (unbind-key "\C-c" yas-minor-mode-map)
  (yas-global-mode 1))
#+end_src

*** YASnippet hydra                                                   :hydra:

Hydra for ~yas-minor-mode~ YASnippet commands and YASnippet supporting
packages.

#+name: yasnippet-hydra
#+begin_src emacs-lisp
;; hydra for YASnippet commands
(defhydra my-hydra/yas-minor-mode (:color teal :columns 4)
  "
YASnippet (_q_: quit)"
  ("q" nil nil)
  ("SPC" yas-expand "expand") ;; expand snippet
  ("d" yas-describe-tables "describe") ;; snippets for current mode
  ("s" yas-insert-snippet "insert") ;; insert snippet
  ("n" yas-new-snippet "new") ;; create new snippet
  ("v" yas-visit-snippet-file "visit-snippet") ;; visit snippet file
  ("w" aya-create "create-auto") ;; store temp snippet
  ("y" aya-expand "expand-auto") ;; paste temp snippet
  ("?"
   (message "Current auto-yasnippet:\n%s" aya-current)
   "current-auto")) ;; show temp snippet
(with-eval-after-load 'yasnippet
  (define-key yas-minor-mode-map (kbd "C-c C-M-y s") #'my-hydra/yas-minor-mode/body))
#+end_src

** Structured editing using Paredit                                   :melpa:

[[https://www.emacswiki.org/emacs/ParEdit][Paredit]] provides a minor mode for structured editing S-expression data.
Enable it for editing Emacs Lisp buffers and the minibuffer.
Also configure it so its commands integrate appropriately with
~delete-selection-mode~.

#+name: paredit
#+begin_src emacs-lisp
;; structured editing of S-expressions with Paredit
(use-package paredit
  :commands paredit-mode
  :hook ((emacs-lisp-mode . paredit-mode)
         ;; when in minibuffer via `eval-expression`
         (eval-expression-minibuffer-setup . paredit-mode)
         ;; *scratch* default mode
         (lisp-interaction-mode . paredit-mode))
  :config
  (with-eval-after-load 'minions
    (add-to-list 'minions-direct 'paredit-mode))
  ;; make delete-selection-mode work within paredit-mode
  (with-eval-after-load 'delsel
    (put 'paredit-forward-delete 'delete-selection 'supersede)
    (put 'paredit-backward-delete 'delete-selection 'supersede)
    (put 'paredit-open-round 'delete-selection t)
    (put 'paredit-open-square 'delete-selection t)
    (put 'paredit-doublequote 'delete-selection t)
    (put 'paredit-newline 'delete-selection t)))
#+end_src

** Traverse undo history as a tree                                     :elpa:

The [[http://www.dr-qubit.org/undo-tree.html][undo-tree]] package allows the traversal of the undo history as a
tree, which makes utilizing Emacs rather flexible undo/redo
capabilities much easier.
Default bindings are ~C-/~ to undo, ~C-S-/~ to redo, and ~C-x u~ to
open a new window whose buffer where the undo history is presented as
a tree and can be navigated using the regular movement keys.

#+name: undo-tree
#+begin_src emacs-lisp
;; traverse undo history as a tree, default binding is "C-x u"
(use-package undo-tree
  :init (setq undo-tree-visualizer-relative-timestamps nil)
  :config (global-undo-tree-mode))
#+end_src

* Email

This section describes the following email setup to sync and read mail:
- [[https://github.com/gauteh/lieer][Lieer]] is used for syncing with a Gmail source (which requires XOAUTH2).
  - ~gmi pull~ pulls changes from source like new email or tag changes.
  - ~gmi push~ pushes changes to the source like tag changes.
  - ~gmi send~ sends an email via the Gmail API.
- Index emails using [[https://notmuchmail.org/][notmuch]].
- Read and tag email via notmuch using Emacs.
- Send email via lieer using Emacs.

#+begin_example
  ------- push tags with lieer      (gmi push) <------------
  |                                                        |
  v                                                        |
Gmail --> pull mail/tags with lieer (gmi pull) --> notmuch (index) <--> Emacs
  ^                                                                       |
  |                                                                       |
  ------- send mail with lieer      (gmi send) <---------------------------
#+end_example

** Setting up lieer and notmuch                                    :external:

~pip install -e .~ or ~setup.py install -e~ installs lieer in editable
mode (setuptools "develop mode").

#+begin_example
$ sudo port install notmuch
$ notmuch
#+end_example

Create the mail directory at =/Users/myusername/Mail=.

Edit =~/.notmuch-config= and modify the ~[new]~ section as follows:

#+begin_example
[new]
tags=
ignore=/.*[.](json|lock|bak)$/
#+end_example

Next create a virtual environment for ~lieer~ and activate it.

#+begin_example
$ conda create -n lieer python=3.7
$ conda activate lieer
#+end_example

Create a build directory (say =~/build=, change as needed).

#+begin_example
$ mkdir -p ~/build
#+end_example

Install the Python bindings for ~notmuch~.
If possible, ~git checkout~ the commit or tag corresponding to the
version of ~notmuch~ installed for maximum compatibility before
installing the binding via ~pip~.

#+begin_example
$ cd ~/build
$ git clone git://git.notmuchmail.org/git/notmuch
$ cd notmuch/bindings/python
$ pip install .
#+end_example

Install ~lieer~.

#+begin_example
$ cd ~/build
$ git clone https://github.com/gauteh/lieer.git
$ cd lieer
$ pip install .
#+end_example

*Note*: After doing the above, lieer can run using a command ~gmi~.
Because ~notmuch~ was installed with MacPorts and lieer within its own
environment, ~gmi~ needs to be called from within the virtual
environment container and with ~DYLD_FALLBACK_LIBRARY_PATH~ set to
MacPort's library directory at =/opt/local/lib= so it can find the
~notmuch~ libraries, for example:

#+begin_example
DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi
#+end_example

To avoid having to specify this every time ~gmi~ needs to be called,
a wrapper script can be used (change the paths as appropriate).

#+begin_example
#!/bin/sh

# Wrapper script for running gmi

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi "$@"
#+end_example

Run the following to create such a file in a directory on the system
path (say =~/.local/bin=), after which calling ~gmi~ directly should
work as expected.

#+begin_example
$ cat > ~/.local/bin/gmi <<EOF
#!/bin/sh

# Wrapper script for running gmi

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi "$@"
EOF
$ chmod +x ~/.local/bin/gmi
#+end_example

Deactivate the virtual environment and build the ~notmuch~ database.

#+begin_example
$ conda deactivate lieer
$ cd ~/Mail
$ notmuch new
#+end_example

Initialize the ~notmuch~ database.

#+begin_example
$ cd ~
$ mkdir Mail
$ notmuch new
#+end_example

Create a local mail directory for the account (replace
=username@emailserver.com= with the actual email address).

#+begin_example
$ cd Mail
$ mkdir username@emailserver.com
$ cd username@emailserver.com
#+end_example

Two options for setting up and authenticating the email account in lieer:

1. Run ~gmi init username@emailserver.com~ which uses the developer's
   client ID.
2. Create a Google dev OAuth client ID, download its secrets file, and
   run ~gmi init -c your-client-secrets.json username@emailserver.com~
   to use the client secrets file.

Option 2 is typically better due to the higher likelihood of running
up against potential usage limits on the shared client ID key, so that
is covered here.

- Go to [[https://console.developers.google.com/flows/enableapi?apiid=gmail][this link]] to create a new Gmail project and API credentials for it.
- Agree to the terms and conditions.
- Continue and navigate to the project. Click the *Credentials* entry
  on the sidebar.
- /Which API are you using?/ \to Gmail API
- /Where will you be calling from?/ \to Other UI (e.g. Windows, CLI tool)
- /What data will you be accessing?/ \to User data
- Click *What credentials do I need?*.
- Click *SET UP CONSENT SCREEN* which opens an /OAuth consent screen/
  tab.
- Select *Internal* if a GSuite user, otherwise *External*.
- In the next screen, fill in the application name (like ~my-email-app~)
  and click *Save*.
- Close the tab and return to the previous one on the /Credentials/ page.
- Refresh the page or click again on *Credentials* and the page
  layout should now be a different one.
# - Click *+ CREATE CREDENTIALS* followed by *API KEY*.
# - Note down the API key.
# - Make sure to edit the API key settings to restrict it to only Gmail APIs.
- Click *+ CREATE CREDENTIALS* followed by *OAuth client ID*.
  Set application type to *Desktop app* and name the application
  (like ~my-email-app~).
- After setting it up, click the download button to download that
  OAuth client ID secret as a JSON file.

When done, move the client secret file (replace ~CLIENT_ID~ with the
actual client id) to the local mailbox directory and use it to
authenticate.
If there's a need to change client IDs in the future, it is possible to
use something like ~gmi auth -f -c client_secrets.json~ (untested).

#+begin_example
$ mv ~/Downloads/client_secret_CLIENTID.json 
$ gmi init -c client_secret_CLIENTID.json username@emailserver.com
#+end_example

Now retrieve email using ~gmi~.

#+begin_example
$ gmi pull
#+end_example

*Aside*

By default the custom tags in ~new.tags~ in the notmuch configuration
that are populated for all new emails are also pushed to the remote.

As an example, suppose notmuch is configured to add the ~new~ tag
to any new email pulled per the following section in =~/.notmuch-config=:

#+begin_example
[new]
tags=new
ignore=/.*[.](json|lock|bak)$/
#+end_example

Lieer can be configured to not push the custom tag ~new~ when syncing
for each specific email source (so that the source does not get
populated with extraneous tags) by running the following in the email
source directory.

#+begin_example
$ gmi set --ignore-tags-local new
#+end_example

*Back from aside*

Next, configure a hook that runs ~gmi pull~ when ~notmuch new~ is called.

First, make a ~hooks~ directory in the notmuch database.

#+begin_example
$ mkdir -p ~/Mail/.notmuch/hooks
#+end_example

Next create the file =~/Mail/.notmuch/hooks/pre-new= with the following contents
(change the local mailbox directory name and ~gmi~ path as relevant).

#+begin_example
#/bin/sh
cd ~/Mail/username@emailserver.com
~/.local/bin/gmi sync
#+end_example

Modify its permissions so it is executable.

#+begin_example
$ chmod +x ~/Mail/.notmuch/hook/pre-new
#+end_example

After setting this up, running ~notmuch new~ will sync new mail to the database.

(Adapted from [[http://www.johnborwick.com/2019/02/09/notmuch-gmailieer.html][this blog post]] and the lieer [[https://github.com/gauteh/lieer/blob/master/docs/index.md][documentation]].)

** Lieer and notmuch usage notes

*** Changing local or remote ignored tags in lieer Gmail synchronization

When changing local or remote ignored tags (for example using commands
~gmi set --ignore-tags-remote~ or ~gmi set --ignore-tags-local~), it
is best to do a full push or push (doing a dry run first to make sure
the changes are the ones that are desired).

The reason is that if the ignored tags were changed after the initial
sync, this will not update already synced messages.

Before changing anything, make sure the local and remote respositories
are fully synchronized.

After ~gmi set --ignore-tags-remote~ or editing the JSON config to the
same effect:

#+begin_example
$ gmi pull -f --dry-run
$ gmi pull -f
#+end_example

And after ~gmi set --ignore-tags-local~ or editing the JSON config to
the same effect:

#+begin_example
$ gmi push -f --dry-run
$ gmi push -f
#+end_example

Also, most importantly make sure to *only change one at a time* (don't
change both local and remote ignored tags at the same time).

A full push or pull is also a heavy handed fix when tags end up not
synchronizing in general.

** Reading email using notmuch.el                            :external:melpa:

Notmuch has an Emacs [[https://notmuchmail.org/notmuch-emacs/][client]].

*Configuration*:
- Prompt for which account to use when sending email.
- When archiving, remove the ~inbox~ tag.
- Show 10 most recent searches in the hello screen.
- Use ~,~ as the thousands separator character.
- Sort search results by date descending (default is date ascending).
- Don't show notmuch logo.

#+name: notmuch
#+begin_src emacs-lisp
;; configure Notmuch email client
(when (executable-find "notmuch")
  (use-package notmuch
    :bind (("C-c C-M-n" . notmuch)
           :map notmuch-hello-mode-map
           ("i" . my-notmuch-hello--search-inbox))
    :init
    (setq notmuch-always-prompt-for-sender t
          notmuch-archive-tags '("-inbox")
          notmuch-hello-recent-searches-max 10
          notmuch-hello-thousands-separator "," ;; US convention
          notmuch-search-oldest-first nil
          notmuch-search-result-format
          `(("date" . "%12s ")
            ("count" . "%-7s ")
            ("authors" . "%-20s ")
            ("tags" . "%s ")
            ("subject" . "%s"))
          notmuch-show-logo nil)
    ;; convenience function for jumping to inbox view from the hello screen
    (defun my-notmuch-hello--search-inbox ()
      "Go to inbox search view from the Notmuch hello screen."
      (interactive)
      (notmuch-hello-search "tag:inbox"))))
#+end_src

** Toggling visibility of search tags in the notmuch search results list

Add ability to toggle search tags in the notmuch search results.
If this is turned on, the search results will not show tags that
are part of the search query, the rationale being the user knows
what they searched for.

This is like what Gmail does with labels in search results, hiding
the labels that are part of the search query.

*Configuration*:
- Turned on by default.
- ~C-t~ in a search results buffer toggles search tag visibility.

#+name: notmuch-toggle-search-tags-in-results
#+begin_src emacs-lisp
(with-eval-after-load 'notmuch
  ;; advises the search listings field insertion function to remove
  ;; tags in the search query from the displayed tags
  (defun notmuch-search--search-query-label-list ()
    "Extracts out a list of labels from the current notmuch search query.
More concretely, it looks at `notmuch-search-query-string',
identifies the tokens that begin with the prefix 'is:' or 'tag:'
and returns a list of those tokens without the prefix.
Returns nil if there are no labels in the query."
    (if (boundp 'notmuch-search-query-string)
        (seq-filter 'identity
                    (mapcar (lambda (x)
                              (if (string-match "^\\(tag\\|is\\):\\([^ ]*\\)" x)
                                  (match-string 2 x)
                                nil))
                            (split-string notmuch-search-query-string)))
      nil))
  (defun notmuch-search--remove-search-labels-from-label-list (labels)
    "Returns difference of LABELS and those in the current notmuch query."
    (set-difference labels
                    (notmuch-search--search-query-label-list)
                    :test 'string-equal))
  (defun notmuch-search-insert-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-search-insert-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-search-insert-field' and ARGS are the
original arguments passed to it."
    (pcase-let ((`(,field ,format-string ,result) args))
      (if (string-equal field "tags")
          (let* ((tags (notmuch-search--remove-search-labels-from-label-list
                        (plist-get result :tags)))
                 (orig-tags (notmuch-search--remove-search-labels-from-label-list
                             (plist-get result :orig-tags))))
            (insert (format format-string
                            (notmuch-tag-format-tags tags orig-tags))))
        (apply orig-fun args))))
  (defun notmuch-search--toggle-search-tag-visibility ()
    "Toggles the visibility of search tags in the search results."
    (interactive)
    (if (advice-member-p #'notmuch-search-insert-field--filter-search-tags
                         'notmuch-search-insert-field)
        (advice-remove 'notmuch-search-insert-field
                       #'notmuch-search-insert-field--filter-search-tags)
      (advice-add 'notmuch-search-insert-field :around
                  #'notmuch-search-insert-field--filter-search-tags))
    (notmuch-refresh-this-buffer))
  ;; enable filtering of search tags in the search results by default
  (notmuch-search--toggle-search-tag-visibility)
  ;; bindings to toggle visibility of search tags in the results
  (define-key notmuch-search-mode-map (kbd "C-t")
    #'notmuch-search--toggle-search-tag-visibility))
#+end_src

** Sending mail with notmuch.el using Lieer as the sendmail program :external:

Lieer can be used to send outgoing mail through the Gmail account
([[https://github.com/gauteh/lieer/wiki/GNU-Emacs-and-Lieer][instructions]]).

This can be configured by creating a =notmuch-config.el= file in the
~user-emacs-directory~ with the following contents, but changing the
paths to the mailbox =~/Mail/username@emailserver.com= and the ~gmi~
executable path =~/.local/bin/gmi= as appropriate.

In most instances the filepath for the notmuch init file is the
=~/.emacs.d/notmuch-config.el=.

#+begin_example
;;; notmuch-config.el --- Notmuch config file -*- lexical-binding: t -*-

;;; Commentary:

;; Notmuch configuration file, helpful for avoiding clutter in the
;; regular config files due to machine-specific notmuch settings.
;; This file is loaded when notmuch starts up in Emacs.

;;; Code:

;; configure sendmail to use lieer to send email
(setq sendmail-program (expand-file-name "~/.local/bin/gmi"))
(setq message-sendmail-extra-arguments
      `("send" "--quiet" "-t"
        "-C" ,(expand-file-name "~/Mail/username@emailserver.com")))

;; don't save outgoing mail locally, as sent mails are saved in Gmail
;; automatically
(setq notmuch-fcc-dirs nil)

;; kill message composition buffers after sending
(setq message-kill-buffer-on-exit t)

(provide 'notmuch-config)

;;; notmuch-config.el ends here
#+end_example

** OrgMsg for composing HTML emails

[[https://github.com/jeremy-compostella/org-msg][OrgMsg]] provides HTML email composition capability.
Calling ~org-msg-mode~ toggles whether to use HTML composition for emails
by (by default, it is off).

#+name: org-msg
#+begin_src emacs-lisp
;; provides HTML email composition using Org-mode
;; set `org-msg-greeting-fmt' to "\nHi *%s*,\n\n" for auto greeting
(use-package org-msg
  :config
  (setq org-msg-options (concat "html-postamble:nil H:5 num:nil ^:{}"
                                "toc:nil author:nil email:nil \\n:t")
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt nil
        org-msg-greeting-name-limit 3
        org-msg-text-plain-alternative t)
  ;; -- START --
  ;; TODO: remove when code is merged into master
  ;; add notmuch capability, from a pull request in org-msg
  ;; see https://github.com/jeremy-compostella/org-msg/pull/49
  (add-to-list 'org-msg-supported-mua '(notmuch-user-agent . "notmuch"))
  (defun org-msg-article-htmlp-notmuch ()
    "Return t if the current notmuch reply is an HTML article."
    ;; Seems like never the case for notmuch but we want to use org-msg
    t)
  (defun org-msg-post-setup--if-not-reply (&rest _args)
    "Helper for new mail setup vs reply in notmuch"
    (unless (org-msg-message-fetch-field "subject")
      (org-msg-post-setup _args)))
  (defun org-msg-mode-notmuch ()
    "Setup the hook for notmuch mail user agent."
    (if org-msg-mode
        (progn
          (advice-add 'notmuch-mua-reply :after 'org-msg-post-setup)
          (advice-add 'notmuch-mua-mail :after 'org-msg-post-setup--if-not-reply))
      (progn
        (advice-remove 'notmuch-mua-reply 'org-msg-post-setup)
        (advice-remove 'notmuch-mua-mail 'org-msg-post-setup--if-not-reply))))
  ;; also fill in defalias so "C-c C-k" works properly
  (defalias 'org-msg-edit-kill-buffer-notmuch 'message-kill-buffer)
  ;; -- END --
  )
#+end_src

* Frame and window management

** Traverse window configuration history using Winner mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][Winner mode]] allows the traversal of window configuration history using
~C-c <left>~ (undo) and ~C-c <right>~ (redo).

#+name: winner-mode
#+begin_src emacs-lisp
;; traverse window config changes, use C-c left/right to undo/redo
(add-hook 'after-init-hook #'winner-mode)
#+end_src

** Window manipulation hydra                                          :hydra:

Hydra for [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows.html][window]] (panes) manipulation.

#+name: window-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/window (:color amaranth :columns 3)
  "
Window (_q_: quit)"
  ("q" nil nil :exit t)
  ("u" winner-undo "winner-undo")
  ("r" winner-redo "winner-redo")
  ("n" next-multiframe-window "next")
  ("p" previous-multiframe-window "previous")
  ("v" split-window-right "split-v")
  ("s" split-window-below "split-h")
  ("<left>" windmove-left "left")
  ("<down>" windmove-down "down")
  ("<up>" windmove-up "up")
  ("<right>" windmove-right "right")
  ("S-<left>" (my-transpose-windows 'windmove-left) "transpose-l")
  ("S-<down>" (my-transpose-windows 'windmove-down) "transpose-d")
  ("S-<up>" (my-transpose-windows 'windmove-up) "transpose-u")
  ("S-<right>" (my-transpose-windows 'windmove-right) "transpose-r")
  ("-" shrink-window "shrink-v")
  ("+" enlarge-window "enlarge-v")
  ("<" shrink-window-horizontally "shrink-h")
  (">" enlarge-window-horizontally "enlarge-h")
  ("M" minimize-window "minimize")
  ("m" maximize-window "maximize")
  ("=" balance-windows "balance")
  ("_" balance-windows-area "balance-area")
  ("o" delete-other-windows "only")
  ("d" delete-window "delete")
  ("D" kill-buffer-and-window "delete-buf"))
(global-set-key (kbd "C-c C-M-w w") 'my-hydra/window/body)
#+end_src

*** Window manipulation helper functions

Helper functions for the frame manipulation hydra.

#+name: window-hydra-helper-functions
#+begin_src emacs-lisp
(defun my-transpose-windows (selector)
  "Call SELECTOR and transpose buffers between current and selected windows."
  (let ((from-win (selected-window))
        (from-buf (window-buffer)))
    (funcall selector)
    (set-window-buffer from-win (window-buffer))
    (set-window-buffer (selected-window) from-buf)))
#+end_src

** Frame manipulation hydra                                           :hydra:

Hydra for easier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Frames.html][frame]] (application window) manipulation.

#+name: frame-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/frame (:color amaranth :columns 4)
  "
Frame (_q_: quit)"
  ("q" nil nil :exit t)
  ("<up>" (lambda (n) (interactive "p") (my-move-frame-pct 0 (- n))) "move-u")
  ("<down>" (lambda (n) (interactive "p") (my-move-frame-pct 0 n)) "move-d")
  ("<left>" (lambda (n) (interactive "p") (my-move-frame-pct (- n) 0)) "move-l")
  ("<right>" (lambda (n) (interactive "p") (my-move-frame-pct n 0)) "move-r")
  ("+" (lambda (n) (interactive "p") (my-enlarge-frame 0 n)) "enlarge-v")
  ("-" (lambda (n) (interactive "p") (my-enlarge-frame 0 (- n))) "shrink-v")
  (">" (lambda (n) (interactive "p") (my-enlarge-frame n 0)) "enlarge-h")
  ("<" (lambda (n) (interactive "p") (my-enlarge-frame (- n) 0)) "shrink-h")
  ("M" toggle-frame-maximized "maximize")
  ("f" toggle-frame-fullscreen "fullscreen")
  ("p" (other-frame -1) "previous")
  ("n" other-frame "next")
  ("s" select-frame-by-name "select")
  ("m" (lambda () (interactive) (my-make-frame 15 20)) "make")
  ("d" delete-frame "delete")
  ("o" delete-other-frames "only"))
(global-set-key (kbd "C-c C-M-f") 'my-hydra/frame/body)
#+end_src

*** Frame manipulation helper functions

Helper functions for the frame manipulation hydra.

#+name: frame-hydra-helper-functions
#+begin_src emacs-lisp
(defun my-enlarge-frame (w h)
  "Enlarge width, height of selected frame by W, H lines (shrink if negative)."
  (let ((this-frame (selected-frame)))
    (set-frame-width this-frame (+ (frame-width this-frame) w))
    (set-frame-height this-frame (+ (frame-height this-frame) h))))

(defun my-move-frame (x y)
  "Move selected frame by X pixels horizontally and Y pixels vertically."
  (let* ((this-frame (selected-frame))
         (fpos (frame-position this-frame)))
    (set-frame-position this-frame (+ (car fpos) x) (+ (cdr fpos) y))))

(defun my-move-frame-pct (x y)
  "Move selected frame within display by X% horizontally and Y% vertically."
  (my-move-frame (* x (/ (x-display-pixel-width) 100))
                 (* y (/ (x-display-pixel-height) 100))))

(defun my-make-frame (x y)
  "Make new frame, offset by X pixels horizontally and Y pixels vertically."
  (let ((cur-pos (frame-position)))
    (select-frame (make-frame (list (cons 'left (+ x (car cur-pos)))
                                    (cons 'top (+ y (cdr cur-pos))))))))
#+end_src

* Non-programming files

** csv-mode for comma-delimited and tab-delimited files (CSV, TSV)     :elpa:

[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] provides a major mode for editing comma and tab delimited
(CSV and TSV) files.

To extend it to separator characters other the default comma and tab,
add or modify the ~csv-separators~ list.

#+name: csv-mode
#+begin_src emacs-lisp
(use-package csv-mode
    :commands csv-mode
    :bind (:map csv-mode-map
           ("C-c C-M-m" . my-hydra/csv-mode/body)
           ("C-c C-S-a" . csv-align-visible-fields))
    :config
    (setq csv-align-style 'auto) ;; `csv-align-fields' left/right-aligns text/numbers
    (defun csv-align-visible-fields ()
      "Align visible lines in `csv-mode'. Useful for large CSV files where
`csv-align-fields' can take a very long time to run."
      (interactive)
      (csv-align-fields nil (window-start) (window-end))))
#+end_src

*** csv-mode hydra                                                    :hydra:

Hydra for ~csv-mode~.

#+name: csv-mode-hydra
#+begin_src emacs-lisp
;; major mode-specific hydra for csv-mode
(defhydra my-hydra/csv-mode (:color teal :columns 4)
  "
CSV (_q_: quit)"
  ("q" nil nil)
  ("s" csv-sort-fields "sort")
  ("n" csv-sort-numeric-fields "numsort")
  ("r" csv-reverse-region "reverse")
  ("d" csv-toggle-descending "toggle-desc-sort" :exit nil)
  ("t" csv-transpose "transpose")
  ("k" csv-kill-fields "cut")
  ("y" csv-yank-fields "paste")
  ("z" csv-yank-as-new-table "paste-as-new-tab")
  ("A" csv-align-visible-fields "align-visible" :exit nil)
  ("a" csv-align-fields "align" :exit nil)
  ("u" csv-unalign-fields "unalign" :exit nil)
  ("h" csv-header-line "toggle-header" :exit nil)
  ("v" csv-toggle-invisibility "toggle-invis-sep" :exit nil))

;; binding for csv-mode hydra
(with-eval-after-load 'csv-mode
  (define-key csv-mode-map (kbd "C-c C-M-m") #'my-hydra/csv-mode/body))
#+end_src

** dockerfile-mode for Dockerfiles                                    :melpa:

[[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] provides a major mode for editing Docker files.

#+name: dockerfile-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :commands dockerfile-mode
  :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** ebib for Bibtex support                                            :melpa:

[[http://joostkremers.github.io/ebib/][ebib]] provides support for managing BibTeX bibliographic databases
(=.bib= files).

*Configuration*:
- Add new Org link type supporting ebib key lookup and preamble,
  pre-note and post-note text for the reference, with the format being
  =[[ebib:key][Preamble text::Pre-note::Post-note]]= where
  ~key~ should be a valid key in the =.bib= file currently open in ebib.
- ~C-c C-M-b e~ calls ~ebib~ globally.
- ~C-c C-M-b i~ calls ~ebib-insert-citation~ in Org-mode buffers.

#+name: ebib
#+begin_src emacs-lisp
;; manager for BibTeX bibliographic databases
;;
;; this setup supports exporting Org to PDF with BibTeX bibliographies via
;; xelatex and biber, so they will need to be installed on the system
;;
;; Org documents should include the LaTeX headers for bibliographies via
;; "#+LATEX_HEADER:" structural markup elements, and "\printbibliography"
;; should be added at the desired location for the bibliography (usually
;; at the end of an article or book chapter or before the index)
;;
;; Org references to bibliography entries can be inserted by pressing `i' when
;; on an entry in ebib or by calling `ebib-insert-citation' within Org mode
;;
;; to export references from Org to LaTeX, ebib needs to be opened with the
;; bibliographies for the references that appear in the document
;;
;; use "::" in the Org link description to separate the preamble text,
;; pre-note, and post-note elements (all optional) for export to LaTeX,
;; i.e. "[[ebib:key][Preamble text::Pre-note::Post-note]]"
;; will export to "Preamble text\cite[Pre-note][Post-note]{key}"
;;
;; example:
;; ---
;; ...
;; #+LATEX_HEADER: \usepackage[backend=biber]{biblatex}
;; #+LATEX_HEADER: \addbibresource{path/to/bibtex_file.bib}
;; ...
;; [[ebib:some_ebib_entry_key]]
;; [[ebib:some_ebib_entry_key][Preamble]
;; [[ebib:some_ebib_entry_key][Preamble::::Post-note]
;; [[ebib:some_ebib_entry_key][Preamble::Pre-note::Post-note]]
;; [[ebib:incognito_1970][::see::pg. 99]]
;; ...
;; \printbibliography
;; ...
;; ---
;;
(use-package ebib
  :commands (ebib ebib-insert-citation)
  :bind (("C-c C-M-b e" . ebib)
         :map org-mode-map
         ("C-c C-M-b i" . ebib-insert-citation))
  :config
  (with-eval-after-load 'org
    (require 'org-ebib)
    (defun my-org-ebib-export (path desc format)
      "Export an ebib link. See `org-link-parameters' for details about PATH, DESC and FORMAT."
      (let* ((my-desc (or desc ""))
             (desc-parts (split-string my-desc "::"))
             (desc-name (car desc-parts))
             (desc-pre-note (or (nth 1 desc-parts) ""))
             (desc-post-note (mapconcat 'identity (nthcdr 2 desc-parts) "::")))
        (cond
         ((eq format 'html)
          (if desc
              (format "(%s<cite>%s</cite>%s)"
                      (if (string= "" desc-pre-note) "" (concat desc-pre-note " "))
                      (if (string= "" desc-name) path desc-name)
                      (if (string= "" desc-post-note) "" (concat ", " desc-post-note)))
            (format "(<cite>%s</cite>)" path)))
         ((eq format 'latex)
          (if desc
              (format "%s\\cite%s%s{%s}"
                      (concat desc-name " ")
                      (if (string= "" desc-pre-note) "" (format "[%s]" desc-pre-note))
                      (if (string= "" desc-post-note) "" (format "[%s]" desc-post-note))
                      path)
            (format "\\cite{%s}" path))))))
    (org-link-set-parameters "ebib" :export 'my-org-ebib-export)))
#+end_src

** json-mode for JSON files                                           :melpa:

[[https://github.com/joshwnj/json-mode][json-mode]] provides a major mode for editing [[https://www.json.org/json-en.html][JSON]] files.

#+name: json-mode
#+begin_src emacs-lisp
;; provides a major mode for editing JSON files
(use-package json-mode
  :defer t)
#+end_src

** markdown-mode for Markdown files                                   :melpa:

[[https://jblevins.org/projects/markdown-mode/][markdown-mode]] provdes a major mode for editing Markdown files.

*Configuration*:
- Enable ~markdown-mode~ automatically for the common suffixes, except
  for =README.md= where ~gfm-mode~ is enabled instead for editing
  Github-flavored Markdown.
- Load the [[https://www.mathjax.org/][MathJax]] Javascript library in HTML output to render [[http://tug.org/][TeX]],
  [[https://www.w3.org/Math/][MathML]] and [[http://asciimath.org/][AsciiMath]] expressions, target HTML+CSS (the loaded
  configuration can be modified if targeting SVG or MathML instead).

#+name: markdown-mode
#+begin_src emacs-lisp
;; major mode for editing Markdown files
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.Rmd\\'" . markdown-mode)) ;; R markdown
  :config
  ;; place header markup only at the start of a line
  ;; syntax highlighting in fenced code blocks
  (setq markdown-asymmetric-header t
        markdown-fontify-code-blocks-natively t)
  ;; render mathematical expressions in HTML previews
  (setq markdown-xhtml-header-content
        (concat "<script type=\"text/x-mathjax-config\">"
                "MathJax.Hub.Config({"
                "  tex2jax: {"
                "    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],"
                "    processEscapes: true"
                "  }"
                "});"
                "</script>"
                "<script type=\"text/javascript\" async"
                "        src=\"https://cdnjs.cloudflare.com/ajax/libs/"
                "mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">"
                "</script>")))
#+end_src

*** markdown-mode hydra                                               :hydra:

Major mode-specific hydra for ~markdown-mode~.

#+name: markdown-mode-hydra
#+begin_src emacs-lisp
;; major mode-specific hydra for markdown-mode
(defhydra my-hydra/markdown-mode (:color teal :hint nil)
  "
Markdown mode (_q_: quit)
Keymaps     _c_ : commands  _s_ : styles
Outline     _n_ : next      _p_ : prev      _f_ : fwd-level _b_ : bwd-level
            _←_ : promote   _→_ : demote    _↓_ : move-down _↑_ : move-up
Shift-Rgn   _<_ : left      _>_ : right
Toggle      _E_ : math      _F_ : code-font _I_ : images    _L_ : url
            _M_ : markup
Other       _d_ : do        _o_ : follow    _'_ : edit code block
"
  ("q" nil nil)
  ;; keymaps
  ("c" (lambda () (interactive) (setq unread-command-events (listify-key-sequence "\C-c\C-c"))))
  ("s" (lambda () (interactive) (setq unread-command-events (listify-key-sequence "\C-c\C-s"))))
  ;; outline
  ("n" markdown-outline-next :color red)
  ("p" markdown-outline-previous :color red)
  ("f" markdown-outline-next-same-level :color red)
  ("b" markdown-outline-previous-same-level :color red)
  ("<left>" markdown-promote :color red)
  ("<right>" markdown-demote :color red)
  ("<down>" markdown-move-down :color red)
  ("<up>" markdown-move-up :color red)
  ;; shift region
  ("<" markdown-outdent-region :color red)
  (">" markdown-indent-region :color red)
  ;; user interface
  ("E" markdown-toggle-math)
  ("F" markdown-toggle-fontify-code-blocks-natively)
  ("I" markdown-toggle-inline-images)
  ("L" markdown-toggle-url-hiding)
  ("M" markdown-toggle-markup-hiding)
  ;; other
  ("d" markdown-do)
  ("o" markdown-follow-thing-at-point)
  ("'" markdown-edit-code-block))

;; bindings for markdown-mode hydra
(with-eval-after-load 'markdown-mode
  (define-key gfm-mode-map (kbd "C-c C-M-m") #'my-hydra/markdown-mode/body)
  (define-key markdown-mode-map (kbd "C-c C-M-m") #'my-hydra/markdown-mode/body))
#+end_src

*** markdown-toc for creating tables of content in Markdown buffers   :melpa:

#+name: markdown-toc
#+begin_src emacs-lisp
(use-package markdown-toc
  :after markdown-mode)
#+end_src

**** Add heads to create or remove Markdown TOCs to markdown-mode hydra :hydra:

#+name: add-markdown-toc-to-markdown-mode-hydra
#+begin_src emacs-lisp
;; add heads to create, update and delete tables of contents in
;; markdown-mode buffers
(with-eval-after-load 'markdown-toc
  (defhydra+ my-hydra/markdown-mode nil
    ("t" markdown-toc-generate-or-refresh-toc "insert-or-refresh-toc")
    ("C-t" markdown-toc-delete-toc "delete-toc")))
#+end_src

** YAML

[[https://github.com/yoshiki/yaml-mode][yaml-mode]] provides a major mode for editing [[https://yaml.org/][YAML]] files.

#+name: yaml-mode
#+begin_src emacs-lisp
;; provides a major mode for editing YAML files
(use-package yaml-mode
  :commands yaml-mode
  :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

* Org-mode

[[https://orgmode.org/][Org-mode]] is a major mode for document editing, formatting and
organizing, designed to help with taking notes, planning and authoring
in Emacs.
Org files typically have filenames with the ~.org~ suffix.

*Note*: The version of Org packaged with a given Emacs version is
typically adequate, but it is often better to install the newest
version of ~org~ from ELPA or the Org repository through
~list-packages~.

Examples of good configurations include [[http://doc.norang.ca/org-mode.html][this]].

*Customizations*:
- Use =~/org/= as the main Org directory.
- Set =inbox.org= in ~org-directory~ as the default filing location to
  be utilized later.

#+name: org
#+begin_src emacs-lisp
;; set Org directory and inbox file
(setq org-directory (file-name-as-directory (file-truename "~/org"))
      my-org-agenda-inbox (concat org-directory "inbox.org"))

;; basic Org-mode settings
(setq org-adapt-indentation nil ;; don't auto-indent when promoting/demoting
      org-catch-invisible-edits 'error
      org-confirm-babel-evaluate nil ;; don't confirm before evaluating code blocks in Org documents
      org-edit-src-content-indentation 2
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t
      org-fontify-whole-heading-line t
      org-hide-emphasis-markers nil
      org-hide-leading-stars t
      org-highlight-latex-and-related '(latex script entities) ;; highlight LaTeX fragments with the `org-highlight-latex-and-related' face
      org-log-into-drawer t
      org-outline-path-complete-in-steps nil
      org-pretty-entities t
      org-pretty-entities-include-sub-superscripts nil ;; don't render sub/superscripts in-buffer
      org-return-follows-link t
      org-src-fontify-natively nil ;; don't syntax color org source blocks
      org-src-preserve-indentation t ;; preserve src code block indentation on export and when switching btw org buffer and edit buffer
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window ;; reuse Org file window for editing source blocks when using "C-c '"
      org-startup-folded t
      org-startup-indented nil
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-use-fast-todo-selection t
      org-use-speed-commands nil)
#+end_src

** Org TODO keywords and task states

Possible Org task states:
- *TODO*: Pending inactive task.
- *NEXT*: Active task.
- *DONE*: Completed task.
- *HOLD*: Paused inactive task.
- *WAIT*: Paused active task, waiting for external action before continuation.
- *CANX*: Canceled task.

#+name: org-todo-keywords
#+begin_src emacs-lisp
;; Set possible Org task states
;; Diagram of possible task state transitions
;;     -------------------------
;;     |                       |
;;     |                       v
;; -> TODO....... -> NEXT -> DONE ----->
;;    | ^  |  | ^    | ^      ^     |
;;    v |  |  v |    v |      |     |
;;   HOLD  |  WAIT...... ------     |
;;     |   |  | (note records what  |
;;     v   v  v  it is waiting for) |
;;     CANX.... ---------------------
;;     (note records why it was cancelled)
(setq org-todo-keywords '((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d!)")
                          (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANX(c@/!)")))
#+end_src

** Automatic text wrapping in Org-mode documents

#+name: org-visual-line-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src

** Org basic capture templates

#+name: org-capture-templates
#+begin_src emacs-lisp
;; Org capture templates
(setq org-capture-templates '(("t" "Todo" entry (file my-org-agenda-inbox)
                               "* TODO %i%?\n%U")
                              ("r" "Respond" entry (file my-org-agenda-inbox)
                               "* NEXT Respond to %i%?\n%U")
                              ("i" "Interrupt Task" entry (file my-org-agenda-inbox)
                               "* NEXT %i%?\n%U"
                               :jump-to-captured t :clock-in t :clock-resume t)
                              ("n" "Note" entry (file my-org-agenda-inbox)
                               "* %i%? :note:\n%U")
                              ("s" "Someday" entry (file my-org-agenda-inbox)
                               "* %i%? :someday:\n%U")
                              ("l" "Link" entry (file my-org-agenda-inbox)
                               "* %a%?\n%U")
                              ("y" "Paste" entry (file my-org-agenda-inbox)
                               "* %?\n%U\n%c")))
#+end_src

** Maximize Org capture buffers

Have Org capture buffers always be maximized.
Restore the window configuration after capturing the task.

#+name: org-maximize-capture-buffers
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; maximize org-capture buffer
  (defun my-org-capture-setup (&rest args)
    "Save window configuration prior to `org-capture'."
    (set-frame-parameter
     nil
     'my-org-capture-prior-config
     (current-window-configuration)))
  (defun my-org-capture-teardown ()
    "Restore window configuration prior to `org-capture'."
    (let ((prior-window-configuration (frame-parameter
                                       nil
                                       'my-org-capture-prior-config)))
      (when prior-window-configuration
        (set-window-configuration prior-window-configuration))))
  (advice-add 'org-capture :before 'my-org-capture-setup)
  (add-hook 'org-capture-mode-hook 'delete-other-windows)
  (add-hook 'org-capture-after-finalize-hook 'my-org-capture-teardown))
#+end_src

** Org tags

#+name: org-tags
#+begin_src emacs-lisp
;; tags (note that tags within the same group are mutually exclusive)
(setq org-tag-alist '((:startgroup) ;; difficulty
                      ("easy" . ?1)
                      ("medium" . ?2)
                      ("hard" . ?3)
                      (:endgroup)
                      (:startgroup) ;; location
                      ("@home" . ?H)
                      ("@work" . ?W)
                      ("@traveling" . ?V)
                      ("@phone" . ?P)
                      ("@email" . ?M)
                      ("@errands" . ?E)
                      (:endgroup)
                      (:startgroup) ;; time-sensitivity
                      ("someday" . ?s)
                      ("urgent" . ?u)
                      (:endgroup)
                      (:startgroup) ;; export
                      ("export" . ?e)
                      ("noexport" . ?x)
                      (:endgroup)
                      ;; ungrouped
                      ("note" . ?n)))
#+end_src

** Org-mode hydra                                                     :hydra:

Major mode-specific hydra for ~org-mode~.

#+name: org-mode-hydra
#+begin_src emacs-lisp
;; hydra for org-mode
(defhydra my-hydra/org-mode (:color amaranth :columns 3)
  "
Org-mode (_q_: quit)"
  ("q" nil nil :exit t)
  ("M-s" org-narrow-to-subtree "narrow-subtree")
  ("M-b" org-narrow-to-block "narrow-block")
  ("M-w" widen "widen")
  ("i" org-toggle-inline-images "toggle-images")
  ("I" org-indent-mode "toggle-indent")
  ("P" org-toggle-pretty-entities "toggle-prettify")
  ("<tab>" org-cycle "cycle")
  ("<S-tab>" org-global-cycle "global-cycle")
  ("/" org-sparse-tree "sparse-tree")
  ("c" org-remove-occur-highlights "occur-clear")
  ("p"
   (lambda (n)
     (interactive "p")
     (if org-occur-highlights
         (previous-error n)
       (org-previous-visible-heading n)))
   "previous")
  ("n"
   (lambda (n)
     (interactive "p")
     (if org-occur-highlights
         (next-error n)
       (org-next-visible-heading n)))
   "next")
  ("g" org-goto "goto" :exit t)
  ("s" org-sort "sort" :exit t)
  ("o" org-occur "occur" :exit t)
  ("r" org-refile "refile" :exit t)
  ("t" org-todo "state" :exit t)
  (":" org-set-tags-command "tags" :exit t)
  ("," org-priority "priority" :exit t)
  ("D" org-insert-drawer "drawer" :exit t)
  ("P" org-set-property "property" :exit t)
  ("N" org-add-note "note" :exit t)
  ("F" org-footnote-action "footnote" :exit t)
  ("a" org-archive-subtree-default "archive" :exit t)
  ("<" org-insert-structure-template "structure" :exit t)
  ("'" org-edit-special "edit-special" :exit t)
  ("e" my-hydra/org-mode/emphasize/body "→ Emphasize" :exit t))

;; hydra for org-mode text formatting
(defhydra my-hydra/org-mode/emphasize (:color teal :columns 4)
  "
Org-mode → Emphasize (_q_: ←)"
  ("q" my-hydra/org-mode/body nil)
  ("b" (org-emphasize ?*) "bold")
  ("i" (org-emphasize ?/) "italic")
  ("u" (org-emphasize ?_) "underline")
  ("s" (org-emphasize ?+) "strike-through")
  ("c" (org-emphasize ?~) "code")
  ("v" (org-emphasize ?=) "verbatim"))

;; binding for org-mode hydra
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-M-m") #'my-hydra/org-mode/body))
#+end_src

** Org Agenda

Org-mode provides [[https://orgmode.org/manual/Agenda-Views.html][agenda views]] that give an overview of open action
items or events with specific scheduled or deadline dates in Org files
specified by ~org-agenda-files~.

A number of customizations are done here, including defining
a view that displays 3-day agenda and undated ~TODO~ entries.

#+name: org-agenda
#+begin_src emacs-lisp
;; org-agenda settings:
;; - narrow to subtree in org-agenda-follow-mode ("F" in agenda)
;; - full-frame Agenda view
;; - use ~/ORG-DIRECTORY/*.org files as Org agenda files
(setq org-agenda-follow-indirect t
      org-agenda-restore-windows-after-quit t
      org-agenda-start-on-weekday nil
      org-agenda-window-setup 'only-window
      org-agenda-files (file-expand-wildcards (concat org-directory "*.org")))

(with-eval-after-load 'org-agenda
  ;; add custom agenda commands that only show undated tasks in list view
  (dolist (my-custom-cmd
           '(("N" "Three-day agenda and undated TODO entries"
              ((agenda "" ((org-agenda-span 3)))
               (alltodo "" ((org-agenda-todo-ignore-with-date t)
                            (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up category-keep alpha-up))))))
             ("u" "Undated TODO entries"
              (alltodo "" ((org-agenda-todo-ignore-with-date t)
                           (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up category-keep alpha-up)))))))
    (add-to-list 'org-agenda-custom-commands my-custom-cmd)))
#+end_src

** Org Agenda hydra                                                   :hydra:

Major mode-specific hydra for ~org-agenda-mode~.

#+name: org-agenda-hydra
#+begin_src emacs-lisp
;; mode-specific hydra for org-agenda-mode
(defhydra my-hydra/org-agenda-mode (:color amaranth :hint nil)
  "
Org agenda (_q_: quit)
Headline    _ht_  : set status   _hk_  : kill         _hr_  : refile
            _hA_  : archive      _h:_  : set tags     _hp_  : set priority
Visit Entry _SPC_ : other window _TAB_ : & go to loc  _RET_ : & del other wins
            _o_   : link
Date        _ds_  : schedule     _dd_  : set deadline _dt_  : timestamp
View        _vd_  : day          _vw_  : week         _vm_  : month
            _vn_  : next span    _vp_  : prev span    _vr_  : reset
Filter      _ft_  : by tag       _fc_  : by category  _fh_  : by top headline
            _fx_  : by regex     _fd_  : reset
Clock       _ci_  : in           _co_  : out          _cq_  : cancel
            _cg_  : goto
Other       _gr_  : reload       _gd_  : go to date   _._   : go to today
            _sd_  : hide done
"   
  ("q" nil nil :exit t)
  ("ht" org-agenda-todo)
  ("hk" org-agenda-kill)
  ("hr" org-agenda-refile) 
  ("hA" org-agenda-archive-default)
  ("h:" org-agenda-set-tags)
  ("hp" org-agenda-priority)
  ("SPC" org-agenda-show-and-scroll-up)
  ("TAB" org-agenda-goto :exit t)
  ("RET" org-agenda-switch-to :exit t)
  ("o" link-hint-open-link :exit t)
  ("ds" org-agenda-schedule)
  ("dd" org-agenda-deadline)
  ("dt" org-agenda-date-prompt)
  ("vd" org-agenda-day-view)
  ("vw" org-agenda-week-view)
  ("vm" org-agenda-month-view)
  ("vn" org-agenda-later)
  ("vp" org-agenda-earlier)
  ("vr" org-agenda-reset-view)
  ("ft" org-agenda-filter-by-tag)
  ("fc" org-agenda-filter-by-category)
  ("fh" org-agenda-filter-by-top-headline)
  ("fx" org-agenda-filter-by-regexp)
  ("fd" org-agenda-filter-remove-all)
  ("ci" org-agenda-clock-in :exit t)
  ("co" org-agenda-clock-out)
  ("cq" org-agenda-clock-cancel)
  ("cg" org-agenda-clock-goto :exit t)
  ("gr" org-agenda-redo)
  ("gd" org-agenda-goto-date)
  ("." org-agenda-goto-today)
  ("sd" (lambda () (interactive)
          (progn (setq org-agenda-skip-scheduled-if-done
                       (if org-agenda-skip-scheduled-if-done nil t))
                 (org-agenda-redo-all t)))))

;; bind org-agenda-mode hydra
(with-eval-after-load 'org-agenda
  (define-key org-agenda-mode-map (kbd "C-c C-M-m") #'my-hydra/org-agenda-mode/body))
#+end_src

** Org refiling of tasks and subtrees

#+name: org-refile
#+begin_src emacs-lisp
;; allow refiling up to 9 levels deep in the current buffer
;; and 3 levels deep in Org agenda files
;; allow refiling to the top level
(setq org-refile-targets '((nil . (:maxlevel . 9)) ;; current buffer
                           (org-agenda-files . (:maxlevel . 3)))
      org-refile-use-outline-path 'file
      org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

** Org entrypoint hydra                                               :hydra:

Hydra providing entrypoints to multiple Org-mode functions.

#+name: org-entrypoints-hydra
#+begin_src emacs-lisp
;; hydra for Org entrypoints
(defhydra my-hydra/org-entrypoints (:color teal :columns 4)
  "
Org (_q_: quit)"
  ("q" nil nil)
  ("a" org-agenda "agenda")
  ("c" org-capture "capture")
  ("b" org-switchb "switch buffer")
  ("l" org-store-link "store link"))

;; bind Org entrypoints hydra
(global-set-key (kbd "C-c C-M-o") #'my-hydra/org-entrypoints/body)
#+end_src

** Compile Org documents to PDF with LaTeX                         :external:

*TODO*: change to LuaTeX

Org-mode supports an Org \to LaTeX \to PDF build chain for compiling Org
documents to PDF files.
By default, this build process utilizes the base ~latex~ compiler and
does not handle [[http://tug.org/bibtex/][BibTeX]] bibliography database files (~.bib~ files).
It is better change to this to a more modern compiler ~xelatex~ for
better font and unicode support, and to add a BibTex compiler like
[[http://biblatex-biber.sourceforge.net/][Biber]] to the build chain.

#+name: org-latex-pdf-process
#+begin_src emacs-lisp
;; compile Org documents to PDF with xelatex and biber
(when (executable-find "xelatex")
  (with-eval-after-load 'org
    (setq org-latex-pdf-process
          '("xelatex -interaction nonstopmode -output-directory %o %f"
            "xelatex -interaction nonstopmode -output-directory %o %f"))
    (if (executable-find "biber")
        (push "biber %b" org-latex-pdf-process))
    (push "xelatex -interaction nonstopmode -output-directory %o %f"
          org-latex-pdf-process)))
#+end_src

** Use LuaTeX to generate LaTeX fragments previews in Org-mode     :external:

Use [[http://www.luatex.org/][LuaTeX]] to generate previews of [[https://orgmode.org/manual/LaTeX-fragments.html][LaTeX fragments]] as images in
~org-mode~.

The build chain converts LaTeX \to DVI \to PNG, so besides ~lualatex~ from
LuaTeX ~dvipng~ (which should come installed with most TeX
distributions) is also needed.

For more information on LaTeX fragment previews, see [[https://orgmode.org/manual/Previewing-LaTeX-fragments.html#Previewing-LaTeX-fragments][here]].

#+name: org-preview-latex-process
#+begin_src emacs-lisp
;; use LuaTeX for previewing LaTeX math formula as images
(when (and (executable-find "lualatex")
           (executable-find "dvipng"))
  (with-eval-after-load 'org
    (add-to-list 'org-preview-latex-process-alist
                 '(dvipng :programs ("lualatex" "dvipng")
                          :description "dvi > png"
                          :message "you need to install lualatex and dvipng."
                          :image-input-type "dvi"
                          :image-output-type "png"
                          :image-size-adjust (1.0 . 1.0)
                          :latex-compiler
                          (concat "lualatex -output-format dvi"
                                  " -interaction nonstopmode"
                                  " -output-directory %o %f")
                          :image-converter ("dvipng -D %D -T tight -o %O %f")))))
#+end_src

** Automatically preview LaTeX fragments and resize them with text scaling :external:

Automatically preview LaTeX fragments and also scale them according
the current text scale (font size modifier).

#+name: org-preview-and-scale-latex-fragments
#+begin_src emacs-lisp
;; preview LaTeX fragments scaled to font size, requires dvipng from TexLive
(when (and (display-graphic-p)
           (executable-find "dvipng"))
  (with-eval-after-load 'org
    (defvar my-org-latex-scale-base (plist-get org-format-latex-options :scale)
      "Base LaTeX fragment scale.")
    (defun my-org-display-latex-fragments ()
      "Previews LaTeX fragments in the buffer scaled to match font size."
      (interactive)
      (let* ((curr-text-scale (condition-case nil
                                  text-scale-mode-amount
                                (error 0)))
             (new-latex-scale (+ my-org-latex-scale-base curr-text-scale)))
        (when (eq major-mode 'org-mode)
          ;; modify LaTeX scale in a local copy of `org-format-latex-options'
          (if (not (assoc 'org-format-latex-options (buffer-local-variables)))
              (setq-local org-format-latex-options
                          (copy-tree org-format-latex-options)))
          (setq-local org-format-latex-options
                      (plist-put org-format-latex-options :scale new-latex-scale))
          ;; preview LaTeX fragments
          (org--latex-preview-region (point-min) (point-max)))))
    ;; preview LaTeX fragments when opening Org documents ...
    (add-hook 'org-mode-hook (lambda (&optional arg)
                               (my-org-display-latex-fragments)))
    ;; ... and regenerate after changing font size
    (advice-add 'text-scale-mode :after (lambda (&optional arg)
                                          (my-org-display-latex-fragments)))))
#+end_src

** Mouse support and variable pitch fonts in graphical Emacs Org-mode

When using graphical emacs, enable mouse support (like clicking on the
header stars to cycle visibility of the subtree) and use variable
pitch fonts with a little extra line spacing except for certain parts of
Org documents like code and tables.

#+name: org-graphical-customizations
#+begin_src emacs-lisp
;; add mouse support and use variable pitch fonts in graphical Emacs org-mode
(when (display-graphic-p)
  (with-eval-after-load 'org
    (require 'org-mouse) ;; mouse support
    ;; use variable pitch fonts ...
    (add-hook 'org-mode-hook #'variable-pitch-mode)
    (add-hook 'org-mode-hook (lambda () (setq line-spacing 0.1)))
    ;; ... but keep some faces fixed-pitch
    (require 'org-indent) ;; ensure `org-indent' face is defined
    (let ((fixed-pitch-family (face-attribute 'fixed-pitch :family nil 'default)))
      (dolist (curr-face '(org-block
                           org-block-begin-line
                           org-block-end-line
                           org-code
                           org-date
                           org-document-info-keyword
                           org-done
                           org-indent ;; properly align indentation
                           org-latex-and-related
                           org-meta-line
                           org-property-value
                           org-special-keyword
                           org-table
                           org-todo
                           org-verbatim))
        (set-face-attribute curr-face nil :family fixed-pitch-family)))))
#+end_src

** Display the outline path at point in Org-mode using which-func

Use ~which-func~ to display the outline path where the point is within
the Org-mode document.

This depends on some of the ~which-func~ customization set up in
\S[[Display function or outline node at point using which-func]]
so make sure the code there is loaded first.

#+name: org-which-func
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; display the outline path at point using which-func
  (with-eval-after-load 'which-func
    (add-to-list 'which-func-modes 'org-mode)
    (defun my-org-which-function-string-shortener (str &optional maxlen)
      "Shortens STR if it is longer than MAXLEN chars."
      (let* ((len (length str))
             (maxlen (or maxlen 40)) ;; default maxlen of 40
             (num-left-chars (/ maxlen 2))
             (num-right-chars (- maxlen num-left-chars 3)))
        (if (> len maxlen)
            (concat (substring str 0 num-left-chars)
                    "..."
                    (substring str (- len num-right-chars) len))
          str)))
    (defun my-org-which-function ()
      "Returns current outline path."
      (if (eq major-mode 'org-mode)
        (condition-case nil
            (mapconcat #'my-org-which-function-string-shortener
                       (org-get-outline-path t)
                       " > ")
          (error nil))))
    (add-to-list 'which-func-functions #'my-org-which-function)
    ;; Org-specific which-func header
    (defun my-org-narrow-to-subtree-toggle ()
      "Toggle org-narrow-to-subtree."
      (interactive)
      (if (buffer-narrowed-p)
          (widen)
        (org-narrow-to-subtree)))
    (defvar my-which-func-header-keymap-org
      (let ((map (make-sparse-keymap)))
        (define-key map [header-line mouse-1] 'my-org-narrow-to-subtree-toggle)
        ;; work around mouse-1 mapping to mouse-2 when cursor is on org bullet
        (define-key map [header-line mouse-2] 'my-org-narrow-to-subtree-toggle)
        (define-key map [header-line mouse-3] 'outline-up-heading)
        (define-key map [header-line wheel-up] 'org-backward-heading-same-level)
        (define-key map [header-line wheel-down] 'org-forward-heading-same-level)
        map)
      "Keymap for header line which-func.")
    (defvar my-which-func-header-keymap-help-text-org
      "mouse-1 : toggle rest visibility\n\
mouse-3 : go up one heading\n\
wheel-u : next same-level heading\n\
wheel-d : prev same-level heading"
      "Help text for `my-which-fun-header-keymap-org'.")
    (defvar my-which-func-header-format-org
            `(:propertize which-func-current
                          local-map ,my-which-func-header-keymap-org
                          face which-func
                          mouse-face mode-line-highlight
                          help-echo my-which-func-header-keymap-help-text-org))
    ;; add Org-mode which-func header to lookup assoc list, see init-ui.el
    (add-to-list 'my-which-func-header-formats `(org-mode . ,my-which-func-header-format-org))))
#+end_src

** org-bullets for nicer header bullets in Org-mode                   :melpa:

*TODO*: migrate to [[https://github.com/integral-dw/org-superstar-mode][org-superstar]].

[[https://github.com/integral-dw/org-bullets][org-bullets]] mode replaces header stars in Org-mode with UTF-8
characters that can be customized to differ by header leve.

#+name: org-bullets
#+begin_src emacs-lisp
;; UTF-8 bullets in Org buffers
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :config (setq org-bullets-bullet-list '("■" "◆" "▲" "▶")))
#+end_src

** org-cliplink for inserting URLs from the clipboard as Org-mode links :melpa:

[[https://github.com/rexim/org-cliplink][org-cliplink]] provides support for inserting URLs from the clipboard as
links in Org-mode documents with the URL page titles as link
descriptions.

#+name: org-cliplink
#+begin_src emacs-lisp
;; insert urls from clipboard as links with title of page
(when (display-graphic-p)
  (use-package org-cliplink
    :after org
    :bind (:map org-mode-map
           ("C-c C-S-l" . org-cliplink))))
#+end_src

** org-download for dragging and dropping images into Org-mode        :melpa:

[[https://github.com/abo-abo/org-download][org-download]] enables support for downloading images to Org-mode
documents, either by running an external command to capture a
screenshot or by dragging and dropping an image onto the document.

#+name: org-download
#+begin_src emacs-lisp
;; drag and drop images into Org buffers
(when (display-graphic-p)
  (use-package org-download
    :after org
    :config
    ;; Mac screenshot command
    (if (memq window-system '(mac ns))
        (setq org-download-screenshot-method "screencapture -i %s"))
    ;; adapted from https://coldnew.github.io/hexo-org-example/2018/05/22/use-org-download-to-drag-image-to-emacs/
    ;; save drag-and-drop images into folder of the same name as Org file
    ;; with filename prefixed by a timestamp of format `org-download-timestamp'
    ;; e.g. dragging test.png to abc.org saves it to abc/20180522183050-test.png
    (defun my-org-download-method (link)
      """Returns download save path for LINK, for use with `org-download'"""
      (let ((filename (format "%s%s"
                              (format-time-string org-download-timestamp)
                              (file-name-nondirectory
                                (car (url-path-and-query
                                       (url-generic-parse-url link))))))
            (dirname (file-name-sans-extension (buffer-name))))
        ;; create dir if it does not exist
        (unless (file-exists-p dirname)
          (make-directory dirname))
        ;; save path
        (expand-file-name filename dirname)))
    (setq org-download-method 'my-org-download-method
          org-download-timestamp "%Y%m%d%H%M%S-")))
#+end_src

*** org-download hydra                                                :hydra:

Hydra for ~org-download~.
Add an entrypoint for the hydra to the org-mode hydra.

#+name: org-download-hydra
#+begin_src emacs-lisp
(when (display-graphic-p)
  ;; hydra for org-download
  (defhydra my-hydra/org-mode/download (:color teal :columns 3)
    "
Org-mode → Download (_q_: ←)"
    ("q" my-hydra/org-mode/body nil)
    ("s" org-download-screenshot "screenshot")
    ("y" org-download-yank "yank"))

  ;; add entrypoint to download hydra to the org-mode hydra
  (defhydra+ my-hydra/org-mode nil
    ("d" my-hydra/org-mode/download/body "→ Download" :exit t)))
#+end_src

** org-journal for journaling using Org-mode                          :melpa:

[[https://github.com/bastibe/org-journal][org-journal]] extends journaling capabilities to Org-mode.

#+name: org-journal
#+begin_src emacs-lisp
;; journaling using Org documents
(use-package org-journal
  :after org
  :init
  ;; org-capture helper function from https://github.com/bastibe/org-journal
  (defun my-org-journal-find-location ()
    "Find location of today's Org journal, for use with `org-capture'."
    ;; Open today's journal but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
  ;; add org-capture-template for new journal entries
  (push '("j" "Journal" entry (function my-org-journal-find-location)
              "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
        org-capture-templates)
  (setq org-journal-date-prefix "#+TITLE: Daily Journal "
        org-journal-file-format "%Y%m%d.org"
        org-journal-file-type 'daily
        ;; use ORG-DIRECTORY/journal/ as the default journal directory
        org-journal-dir (concat org-directory "journal/")))
#+end_src

** org-present for minimalist presentations within Emacs              :melpa:

[[https://github.com/rlister/org-present][org-present]] extends org-mode so that it can be used for minimalist
presentations within Emacs.

Each top-level heading will correspond to a presentation slide.
=LEFT= and =RIGHT= will move forward and backward through the
slides, and =C-c C-q= will quit the presentation.

*Customizations*:
- Hide header and mode lines when presentation is active.
- Additional keybindings during presentation
  - =UP=/=DOWN=: Scroll up/down.
  - =SHIFT-UP=/=SHIFT-DOWN=: Go to top/bottom of slide.
  - =SHIFT-LEFT=/=SHIFT-RIGHT=: Go to first/last slide.
  - =f=: Toggle fullscreen.
  - =q=: Quit presentation (like =C-c C-q=).
  - =-=: Decrease text scale.
  - =+=: Increase text scale.

#+name: org-present
#+begin_src emacs-lisp
;; in-editor presentations using Org documents
(use-package org-present
  :after org
  :hook ((org-present-mode . (lambda ()
                               (org-present-big)
                               (org-display-inline-images)
                               (org-present-read-only)
                               (my-hide-header-and-mode-lines)))
         (org-present-mode-quit . (lambda ()
                                    (org-present-small)
                                    (org-remove-inline-images)
                                    (org-present-read-write)
                                    (my-unhide-header-and-mode-lines))))
  :config
  ;; regenerate LaTeX fragment preview images on slide transition
  (when (and (display-graphic-p)
             (executable-find "dvipng"))
    (add-hook 'org-present-after-navigate-functions
              (lambda (&optional name header)
                (my-org-display-latex-fragments))))
  ;; functions for hiding header and mode lines when in a presentation
  (defvar-local my-orig-mode-line-format nil
    "Temporary variable to store original `mode-line-format'.")
  (defvar-local my-orig-header-line-format nil
    "Temporary variable to store original `header-line-format'.")
  (defun my-hide-header-and-mode-lines ()
    "Hide header and mode lines, and store originals in temporary variables."
    (interactive)
    (when mode-line-format
        (setq-local my-orig-mode-line-format mode-line-format)
        (setq-local mode-line-format nil))
    (when header-line-format
        (setq-local my-orig-header-line-format header-line-format)
        (setq-local header-line-format nil)))
  (defun my-unhide-header-and-mode-lines ()
    "Reset header and mode lines using originals in temporary variables."
    (interactive)
    (when (not mode-line-format)
      (setq-local mode-line-format my-orig-mode-line-format)
      (setq-local my-orig-mode-line-format nil))
    (when (not header-line-format)
      (setq-local header-line-format my-orig-header-line-format)
      (setq-local my-orig-header-line-format nil)))
  ;; easier nav keys for read-only presentations
  (define-minor-mode my-org-present-extra-mode
    "Overlay minor mode on top of org-present-mode with easier nav keys."
    :keymap (let ((map (make-sparse-keymap)))
              ;; <left>/<right> = previous/next slide
              (define-key map (kbd "<up>") 'scroll-down-line)
              (define-key map (kbd "<down>") 'scroll-up-line)
              (define-key map (kbd "s-<up>") 'beginning-of-buffer)
              (define-key map (kbd "s-<down>") 'end-of-buffer)
              (define-key map (kbd "s-<left>") 'org-present-beginning)
              (define-key map (kbd "s-<right>") 'org-present-end)
              (define-key map (kbd "f") 'toggle-frame-fullscreen)
              (define-key map (kbd "q") 'org-present-quit)
              (define-key map (kbd "-") 'text-scale-decrease)
              (define-key map (kbd "+") 'text-scale-increase)
              map))
  ;; toggle minor mode after the relevant org-present funcalls
  (advice-add 'org-present-read-only
              :after (lambda () (my-org-present-extra-mode 1)))
  (advice-add 'org-present-read-write
              :after (lambda () (my-org-present-extra-mode 0))))
#+end_src

*** Add Org-mode presentation head to org-mode hydra                  :hydra:

Add head for initializing an ~org-present~ presentation to org-mode
hydra.

#+name: add-org-present-to-org-mode-hydra
#+begin_src emacs-lisp
;; add org-present present head to org-mode hydra
(defhydra+ my-hydra/org-mode nil
  ("C-p" (lambda ()
           (interactive)
           (let ((in-present-mode (condition-case nil
                                      org-present-mode
                                    (error nil))))
             (if in-present-mode (org-present-quit) (org-present))))
   "org-present" :exit t))
#+end_src

** org-projectile for Projectile project Org TODOs                    :melpa:

[[https://github.com/IvanMalison/org-projectile][org-projectile]] provides functions for creating Org TODOs for [[Projectile][Projectile]] projects.
It can be set up to use one file for all projects (the default), or one file per
project.
Configure it to use one file per project, specifically a ~TODO.org~ file at the
root directory of the project.
Also add a corresponding entry type to ~org-capture-templates~.

#+name: org-projectile
#+begin_src emacs-lisp
;; Org TODOs for projectile projects
;; use `org-capture' to capture and store TODOs for the current project
;; in `org-projectile-per-project-filepath' at the project's root directory
(use-package org-projectile
  :after (org projectile)
  :config
  (org-projectile-per-project)
  (setq org-projectile-per-project-filepath "TODO.org")
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src

** ox-md for Org export backend to Markdown

Load the [[https://github.com/emacsmirror/org/blob/master/lisp/ox-md.el][built-in Org backend]] for exporting Org documents to Markdown.

#+name: ox-md
#+begin_src emacs-lisp
;; load Org backend for exporting to Markdown
(with-eval-after-load 'org
  (require 'ox-md))
#+end_src

* Outlines

** Imenu

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][Imenu]] allows jumping to major definitions in a file by name.
Have Imenu automatically rescan whenever the content changes.

#+name: imenu-auto-rescan
#+begin_src emacs-lisp
(setq imenu-auto-rescan t)
#+end_src

** Imenu extension to all open buffers using imenu-anywhere    :melpa:

[[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]] provides an Imenu extension that lists major
definitions across all open buffers.

#+name: imenu-anywhere
#+begin_src emacs-lisp
;; menu list of major definitions across several buffers
(use-package imenu-anywhere
  :defer t
  :after imenu
  :bind ("C-c C-M-j" . imenu-anywhere))
#+end_src

** Imenu extension to list headings in a side buffer                  :melpa:

[[https://github.com/bmag/imenu-list][imenu-list]] is an Imenu extension that opens up a side buffer
listing the major definitions and headings in the current buffer.
This configuration customizes it such that on jumping to a
definition or heading, it pulses the destination line once
and automatically closes the imenu-list.

#+name: imenu-list
#+begin_src emacs-lisp
;; show imenu as a list in a side buffer
(use-package imenu-list
  :defer t
  :after imenu
  :bind ("C-c C-M-'" . imenu-list-smart-toggle)
  :config
  (setq imenu-list-focus-after-activation t)
  ;; pulse target after selecting
  (add-hook 'imenu-list-after-jump-hook
            (lambda () (pulse-momentary-highlight-one-line (point))))
  ;; close imenu list after going to entry
  (advice-add 'imenu-list-goto-entry :after 'imenu-list-quit-window))
#+end_src

* Programming

** Flymake syntax checker

[[https://elpa.gnu.org/packages/flymake.html][Flymake]] is a built-in on-the-fly syntax checker, with updated versions
available from the GNU ELPA repository.

To display the error message at point in the minibuffer, do ~C-h .~
while the point is over an error.

To define new Flymake backend, refer to the docstring of
~flymake-diagnostic-functions~, the [[https://www.gnu.org/software/emacs/manual/html_node/flymake/index.html][Flymake manual]] or the code of
existing backends.

#+name: flymake
#+begin_src emacs-lisp
;; basic Flymake customizations
(setq flymake-no-changes-timeout 0.5 ;; auto check buffer change wait time
      flymake-start-on-save-buffer nil) ;; don't run checks when saving

;; deferred Flymake customizations
(with-eval-after-load 'flymake
  ;; don't use legacy Flymake checker
  (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake)
  ;; function for toggling Flymake diagnostics window
  (defun my-toggle-flymake-diagnostics ()
    "Toggles flymake diagnostics window for current buffer."
    (interactive)
    (if flymake-mode
        (let* ((buf-name (buffer-name (current-buffer)))
               (flymake-winds (condition-case nil
                                  (get-buffer-window-list
                                   (concat "*Flymake diagnostics for " buf-name "*"))
                                (error nil))))
          (if flymake-winds
              (dolist (wind flymake-winds) (quit-window nil wind))
            (flymake-show-diagnostics-buffer)))))
  ;; shorten mode line symbol in when running Emacs in the TTY
  (when (not (display-graphic-p))
    ;; Truncate Flymake mode-line symbol
    (defun my-flymake-modeline-filter (ret)
      "Filter function for `flymake--mode-line-format`."
      (setf (seq-elt (car ret) 1) " FlyM")
      ret)
    (advice-add #'flymake--mode-line-format
                :filter-return #'my-flymake-modeline-filter))
  ;; convenience bindings
  (define-key flymake-mode-map (kbd "C-c ! n") #'flymake-goto-next-error)
  (define-key flymake-mode-map (kbd "C-c ! p") #'flymake-goto-prev-error)
  (define-key flymake-mode-map (kbd "C-c ! l") #'my-toggle-flymake-diagnostics))

;; enable Flymake when editing Emacs Lisp buffers
(add-hook 'emacs-lisp-mode-hook #'flymake-mode)
#+end_src

*** Flymake hydra                                                     :hydra:

Hydra for Flymake.

#+name: flymake-hydra
#+begin_src emacs-lisp
;; hydra for Flymake
(defhydra my-hydra/flymake (:color amaranth :columns 4)
  "
Flymake (_q_: quit)"
  ("q" nil nil :exit t)
  ("p" flymake-goto-prev-error "prev-err")
  ("n" flymake-goto-next-error "next-err")
  ("l" my-toggle-flymake-diagnostics "list")
  ("s" flymake-start "start-check"))

;; binding for Flymake hydra
(with-eval-after-load 'flymake
  (define-key flymake-mode-map (kbd "C-c C-M-e e") #'my-hydra/flymake/body))
#+end_src

*** flymake-quickdef for defining Flymake backends                    :melpa:

[[https://github.com/karlotness/flymake-quickdef][Flymake-Quickdef]] provides a macro for quickly defining Flymake backends.
See the [[https://github.com/karlotness/flymake-quickdef/blob/master/flymake-quickdef.el#L56-L158][documentation]] for how to use this macro.

#+name: flymake-quickdef
#+begin_src emacs-lisp
(use-package flymake-quickdef
  :demand t)
#+end_src

** Security linting using DevSkim and Flymake                      :external:

[[https://github.com/Microsoft/DevSkim/][DevSkim]] is a collection of static analyzers that does code security analysis.

If it is installed on the system, Flymake backend can be defined to
use it to provide security linting.

Flymake-Quickdef (see above) can be used for defining this backend.

To use this backend in for specific programming language, call the
custom setup function ~flymake-devskim-setup~ before ~flymake-mode~
is enabled.

One way to ensure the order is to add ~flymake-mode~ to a programming
mode's hook by appending instead of pushing, for example by doing
~(add-hook 'python-mode-hook #'flymake-mode t)~.

#+name: devskim-flymake
#+begin_src emacs-lisp
;; Code security analysis using devskim, https://github.com/microsoft/DevSkim
;; A Flymake backend for it is defined here, and can be used by calling
;; `flymake-devskim-setup' before `flymake-mode' in a given mode's hook, e.g.
;;   (add-hook 'python-mode-hook 'flymake-devskim-setup)
;;   (add-hook 'python-mode-hook 'flymake-mode t)
;; For more info on the different severity types, see
;; https://github.com/microsoft/DevSkim/wiki/Rule-Object-Schema
(with-eval-after-load 'flymake-quickdef
  (flymake-quickdef-backend flymake-devskim-backend
    :pre-let ((devskim-exec (executable-find "devskim")))
    :pre-check (unless devskim-exec (error "Cannot find devskim executable"))
    :write-type 'file
    :proc-form (list devskim-exec
                     "analyze"
                     "-f" "text"
                     "-o" "%L:%C: %S : [%R] %N"
                     fmqd-temp-file)
    :search-regexp
    "\\([[:digit:]]+\\):\\([[:digit:]]+\\): \\([[:alpha:]]+\\) : \\(.+\\)$"
    :prep-diagnostic (let* ((lnum (string-to-number (match-string 1)))
                            (lcol (string-to-number (match-string 2)))
                            (severity (downcase (match-string 3)))
                            (msg (match-string 4))
                            (pos (flymake-diag-region fmqd-source lnum lcol))
                            (beg (car pos))
                            (end (cdr pos))
                            (type (cond
                                    ((string= severity "critical") :error)
                                    ((string= severity "important") :error)
                                    ((string= severity "moderate") :warning)
                                    ((string= severity "best-practice") :note)
                                    ((string= severity "manual-review") :note)
                                    (t :note))))
                       (list fmqd-source beg end type msg)))
  ;; define function for enabling the Flymake backend
  (defun flymake-devskim-setup ()
    "Enable devskim backend for Flymake."
    (add-hook 'flymake-diagnostic-functions #'flymake-devskim-backend nil t)))
#+end_src

** Conda package and environment manager                              :melpa:

[[https://docs.conda.io/][Conda]] is a cross-platform package and environment manager, enabling
easy creation, saving, loading and switching of environments.

It was initially created to target Python development, but has
expanded beyond just that and now includes R and other software
packages.

*Customizations*:
- Set the conda home directory to =~/miniconda3/=.
- Support Eshell and term-mode buffers.
- Show current conda environment in the mode line.

#+name: conda
#+begin_src emacs-lisp
(when (executable-find "conda")
  (use-package conda
    :init (setq conda-anaconda-home (expand-file-name "~/miniconda3/"))
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    ;; display current conda env in the mode line
    (add-to-list 'mode-line-misc-info
                 '(:eval (if conda-env-current-name
                             (format " «%s»"
                                     (truncate-string-to-width
                                      conda-env-current-name
                                      15 nil nil "…"))
                           ""))
                 t))
#+end_src

*** Conda hydra                                                       :hydra:

Hydra for conda.

#+name: conda-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/conda (:color teal :columns 4)
  "
conda (_q_: quit)"
  ("q" nil nil)
  ("a" conda-env-activate "activate")
  ("d" conda-env-deactivate "deactivate")
  ("l" conda-env-list "list"))
(with-eval-after-load 'conda
  (global-set-key (kbd "C-c C-M-v e") 'my-hydra/conda/body)))
#+end_src

** Eglot Language Server Protocol client                              :melpa:

[[https://github.com/joaotavora/eglot][Emacs Polyglot]] (eglot) is an Emacs Language Server Protocol client.
It is a lighter weight than [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]], though also with less features.

A useful customization is to have display the diagnostic error message
under the point when there is a Flymake error ([[https://github.com/joaotavora/eglot/issues/8#issuecomment-414149077][link]]).

#+name: eglot
#+begin_src emacs-lisp
(use-package eglot
  :commands eglot
  :config
  ;; increase wait time after last change before asking for
  ;; completions from 0.5s to 1s to reduce request rate
  (setq eglot-send-changes-idle-time 1)
  ;; prioritize diagnostic message display if a Flymake error is under the point
  ;; https://github.com/joaotavora/eglot/issues/8#issuecomment-414149077
  (advice-add 'eglot-eldoc-function :around
              (lambda (oldfun)
                (let ((help (help-at-pt-kbd-string)))
                  (if help (message "%s" help) (funcall oldfun))))))
#+end_src

*** Eglot hydra                                                       :hydra:

Hydra for Eglot.

#+name: eglot-hydra
#+begin_src emacs-lisp
;; hydra for Eglot
(defhydra my-hydra/eglot-mode (:color teal :columns 4)
  "
Eglot [active=%(if (boundp 'eglot--managed-mode) eglot--managed-mode nil)] (_q_: quit)"
  ("q" nil nil)
  ("s" eglot "start")
  ("r" eglot-reconnect "reconnect")
  ("Q" eglot-shutdown "shutdown")
  ("R" eglot-rename "rename")
  ("f" eglot-format "format")
  ("a" eglot-code-actions "code-actions")
  ("h" eglot-help-at-point "help-at-pt")
  ("U" eglot-signal-didChangeConfiguration "update-cfg")
  ("be" eglot-events-buffer "events-buf")
  ("bs" eglot-stderr-buffer "stderr-buf"))

;; binding setup function for Eglot hydra
;; call `eglot--setup-hydra-bindings' in a mode's init config code
;; to set up the hydra for use in that mode at the "C-c C-M-l" binding
(defun eglot--setup-hydra-bindings (mode-map)
  "Sets up 'C-c C-M-l' binding to Eglot hydra in given MODE-MAP."
  (define-key mode-map (kbd "C-c C-M-l") #'my-hydra/eglot-mode/body))
#+end_src

** Emacs Lisp

*** Emacs Lisp debugger hydra                                         :hydra:

Hydras for [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugging.html][debugging]] Emacs Lisp.
One is for changing when the debugger is invoked.
The other is a mode-specific hydra.

#+name: debugger-hydra
#+begin_src emacs-lisp
;; hydra for built-in Emacs Lisp debugger
(defhydra my-hydra/debugger (:color teal :hint nil)
  "
Emacs debugger settings (_q_: quit)
Toggle    _1_ : debug-on-error (currently: %`debug-on-error)
          _2_ : debug-on-quit  (currently: %`debug-on-quit)
Functions _fl_ : list functions to invoke debugger on entry
          _fa_ : add debugger invocation to function
          _fc_ : cancel debugger invocation from function
Variables _vl_ : list variables to invoke debugger on change
          _va_ : add debugger invocation to variable on change
          _vc_ : cancel debugger invocation from variable on change
"
  ("q" nil nil)
  ("1" toggle-debug-on-error :exit nil)
  ("2" toggle-debug-on-quit :exit nil)
  ("fl" debugger-list-functions)
  ("fa" debug-on-entry)
  ("fc" cancel-debug-on-entry)
  ("vl" (lambda () (interactive) (prin1 (debug--variable-list))))
  ("va" debug-on-variable-change)
  ("vc" cancel-debug-on-variable-change))

;; binding for debugger-settings hydra
(global-set-key (kbd "C-c C-M-d e") 'my-hydra/debugger/body)
#+end_src

#+name: debugger-mode-hydra
#+begin_src emacs-lisp
;; mode-specific hydra for debugger
(defhydra my-hydra/debugger-mode (:color teal :columns 4)
    "
Emacs debugger (_q_: quit)"
    ("q" nil nil)
    ("c" debugger-continue "continue")
    ("d" debugger-step-through "step")
    ("b" debugger-frame "frame")
    ("u" debugger-frame-clear "no-frame")
    ("j" debugger-jump "jump")
    ("e" debugger-eval-expression "eval-expr")
    ("R" debugger-record-expression "record-expr")
    ("Q" top-level "quit-to-top")
    ("r" debugger-return-value "return-val")
    ("l" debugger-list-functions "list-funs")
    ("v" debugger-toggle-locals "list-vars")
    ("h" describe-mode "help"))

;; binding for debugger hydra
(with-eval-after-load 'debug
 (define-key debugger-mode-map (kbd "C-c C-M-m") #'my-hydra/debugger-mode/body))
#+end_src

*** Emacs Lisp profiler hydra                                         :hydra:

Hydra for built in Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html][profiler]].

#+name: profiler-hydra
#+begin_src emacs-lisp
;; hydra for built-in Emacs Lisp profiler
(defhydra my-hydra/profiler (:color teal :columns 3
                             :pre (require 'profiler))
  "
Emacs profiler [CPU=%(profiler-running-p) MEM=%(profiler-memory-running-p)] (_q_: quit)"
  ("q" nil nil)
  ("s" profiler-start "start/reset" :exit nil)
  ("p" profiler-report "report")
  ("e" profiler-stop "stop" :exit nil))

;; binding for profiler hydra
(global-set-key (kbd "C-c C-M-e p") 'my-hydra/profiler/body)
#+end_src

*** el-patch                                                          :melpa:

[[https://github.com/raxod502/el-patch][el-patch]] provides a way to customize Emacs Lisp functions.

#+name: el-patch
#+begin_src emacs-lisp
(use-package el-patch
  :demand t)
#+end_src

**** Modify lisp-indent-function to handle property list indentation

Modify ~lisp-indent-function~ so that it indents property lists in
Emacs Lisp (and other Lisps) in the expected manner (like in Clojure).

Uses functions from the ~el-patch~ package, so make sure that package
is loaded before this code block.

#+name: modify-lisp-indent-function
#+begin_src emacs-lisp
;; Modifies lisp indentation to handle property lists used as
;; data structures
;; --- DEFAULT BEHAVIOR
;;  `(:token ,token
;;           :token-quality ,quality)
;; ---
;; --- DESIRED BEHAVIOR
;;  `(:token ,token
;;    :token-quality ,quality)
;; ---
;; Copied from https://emacs.stackexchange.com/questions/10230/
(with-eval-after-load 'lisp-mode
  (el-patch-defun lisp-indent-function (indent-point state)
    "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  (this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
    (el-patch-let (($cond (and (elt state 2)
                               (el-patch-wrap 1 1
                                 (or (not (looking-at "\\sw\\|\\s_"))
                                     (looking-at ":")))))
                   ($then (progn
                            (if (not (> (save-excursion (forward-line 1) (point))
                                        calculate-lisp-indent-last-sexp))
                                (progn (goto-char calculate-lisp-indent-last-sexp)
                                       (beginning-of-line)
                                       (parse-partial-sexp (point)
                                                           calculate-lisp-indent-last-sexp 0 t)))
                            ;; Indent under the list or under the first sexp on the same
                            ;; line as calculate-lisp-indent-last-sexp.  Note that first
                            ;; thing on that line has to be complete sexp since we are
                            ;; inside the innermost containing sexp.
                            (backward-prefix-chars)
                            (current-column)))
                   ($else (let ((function (buffer-substring (point)
                                                            (progn (forward-sexp 1) (point))))
                                method)
                            (setq method (or (function-get (intern-soft function)
                                                           'lisp-indent-function)
                                             (get (intern-soft function) 'lisp-indent-hook)))
                            (cond ((or (eq method 'defun)
                                       (and (null method)
                                            (> (length function) 3)
                                            (string-match "\\`def" function)))
                                   (lisp-indent-defform state indent-point))
                                  ((integerp method)
                                   (lisp-indent-specform method state
                                                         indent-point normal-indent))
                                  (method
                                   (funcall method indent-point state))))))
      (let ((normal-indent (current-column))
            (el-patch-add
              (orig-point (point))))
        (goto-char (1+ (elt state 1)))
        (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
        (el-patch-swap
          (if $cond
              ;; car of form doesn't seem to be a symbol
              $then
            $else)
          (cond
           ;; car of form doesn't seem to be a symbol, or is a keyword
           ($cond $then)
           ((and (save-excursion
                   (goto-char indent-point)
                   (skip-syntax-forward " ")
                   (not (looking-at ":")))
                 (save-excursion
                   (goto-char orig-point)
                   (looking-at ":")))
            (save-excursion
              (goto-char (+ 2 (elt state 1)))
              (current-column)))
           (t $else)))))))
#+end_src

** Python

*** Developing

#+begin_example
$ pip install -e .
#+end_example

or

#+begin_example
$ python setup.py --editable
#+end_example

*** Debugging

The intrusive way to debug Python programs is to create a debugging
breakpoint by adding a ~import pdb; pdb.set_trace()~ statement to the
desired breakpoint location.
Running the Python program normally will stop the program at the
breakpoint and bring up the ~pdb~ interface.

The non-intrusive way to debug is to run ~pdb~ as a module using
~python -m pdb some_script.py~ which starts debugging from the
beginning of the code.

Emacs provides a way to start the debugging session from the buffer:
run ~M-x pdb~ which opens ~pdb~ using Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html][Grand Unified Debugger]]
(GUD) which provides some additional user interface around ~pdb~.

*Note*: For autocompletion in ~pdb~, create a =~/.pdbrc= file with the
following contents.

#+begin_example
import rlcompleter
import pdb

pdb.Pdb.complete=rlcompleter.Completer(locals()).complete
#+end_example

*** Python hydra                                                      :hydra:

Mode-specific Hydra for Python mode.

#+name: python-hydra
#+begin_src emacs-lisp
;; mode-specific hydra for Python mode
(defhydra my-hydra/python-mode (:color teal :columns 4)
  "
Python (_q_: quit)"
  ("q" nil nil)
  ;; python repl
  ("p" run-python "run-python") 
  ("s" python-shell-send-string "send-str")
  ("e" python-shell-send-statement "send-stmt")
  ("r" python-shell-send-region "send-rgn")
  ("x" python-shell-send-defun "send-def")
  ("c" python-shell-send-buffer "send-buf")
  ("l" python-shell-send-file "send-file")
  ("z" python-shell-switch-to-shell "switch-to-sh")
  ;; indentation
  ("<" python-indent-shift-left "indent-l")
  (">" python-indent-shift-right "indent-r")
  ;; utilities
  ("v" python-check "check-err")
  ("f" python-eldoc-at-point "eldoc-at-pt")
  ("d" python-describe-at-point "descr-at-pt")
  ;; other
  ("j" imenu "imenu")
  ("D" pdb "pdb"))

;; binding for Python hydra
(with-eval-after-load 'python
  (define-key python-mode-map (kbd "C-c C-M-m") #'my-hydra/python-mode/body))
#+end_src

*** Enable Flymake mode when editing Python backends

Enable Flymake mode as the last function in the Python mode hook.

#+name: python-flymake
#+begin_src emacs-lisp
(add-hook 'python-mode-hook #'flymake-mode t)
#+end_src

*** Enable which-func and Imenu menubar entry in Python buffers

When editing Python buffers, enable which-func and add an Imenu
entry to the menubar.

#+name: python-which-func-imenu
#+begin_src emacs-lisp
;; show function at point
(with-eval-after-load 'which-func
  (add-to-list 'which-func-modes 'python-mode))

;; add Imenu index to menubar
(with-eval-after-load 'imenu
  (add-hook 'python-mode-hook 'imenu-add-menubar-index))
#+end_src

*** Enable Flymake DevSkim backend when editing Python buffers     :external:

Enable the Flymake DevSkim back when editing Python buffers (see
\S[[Security linting using DevSkim and Flymake]]).

#+name: python-devskim-flymake
#+begin_src emacs-lisp
(when (executable-find "devskim")
  (with-eval-after-load 'flymake-quickdef
    (add-hook 'python-mode-hook #'flymake-devskim-setup)))
#+end_src

*** Microsoft Python Language Server support using eglot           :external:

Use ~eglot~ as a client for the Microsoft Python Language Server. 

Uses functions from the ~el-patch~ package, so make sure that package
is loaded before this code block.

*Installing the Microsoft Python Language Server*:
- Building from source

*Configuration*:
- Assumes the binary for the Microsoft Python Language Server is at
  =~/.local/bin/Microsoft.Python.LanguageServer=.

#+name: python-eglot
#+begin_src emacs-lisp
;; set path to Microsoft Python Language Server binary
(setq mspyls-path (expand-file-name "~/.local/bin/Microsoft.Python.LanguageServer"))

;; eglot Python settings
;; cobbled together from the following sources:
;; https://github.com/joaotavora/eglot/issues/144#issuecomment-557229445
;; https://www.reddit.com/r/emacs/comments/do2z6y/i_am_moving_from_lspmode_to_eglot/f87p7hb/
(with-eval-after-load 'eglot
  ;; patch to ignore format-markup errors.
  ;; Workaround for MS Python language server which can send empty values.
  (el-patch-defun eglot--format-markup (markup)
    "Format MARKUP according to LSP's spec."
    (pcase-let ((`(,string ,mode)
                 (if (stringp markup) (list (string-trim markup)
                                            (intern "gfm-view-mode"))
                   (list (plist-get markup :value)
                         major-mode))))
      (el-patch-swap
        (with-temp-buffer
          (insert string)
          (ignore-errors (funcall mode))
          (font-lock-ensure)
          (buffer-string))
        (when string
          (with-temp-buffer
            (insert string)
            (ignore-errors (funcall mode))
            (font-lock-ensure)
            (buffer-string))))))

  (setq-default eglot-workspace-configuration
                (cons '(:python :autoComplete (:extraPaths nil)
                        :analysis (:autoSearchPaths :json-false
                                   :usePYTHONPATH :json-false))
                      eglot-workspace-configuration))

  (defun eglot-pyls--get-python-version ()
    (with-temp-buffer
      (call-process
       (executable-find python-shell-interpreter) nil t nil
       "-c" "import sys; print(\"%s.%s\" % (sys.version_info[0], sys.version_info[1]))")
      (car (split-string (buffer-string) "\n"))))

  (defclass eglot-pyls (eglot-lsp-server) ()
    :documentation
    "Microsoft Python Language Server.")

  (cl-defmethod eglot-initialization-options ((server eglot-pyls))
    "Passes through required pyls initialization options."
    `(:interpreter (:properties
                    (:UseDefaultDatabase t
                     :InterpreterPath ,(executable-find python-shell-interpreter)
                     :Version ,(eglot-pyls--get-python-version)))
      ;; preferredFormat should be "markdown" or "plaintext"
      :displayOptions (:preferredFormat "markdown"
                       :trimDocumentationLines :json-false
                       :maxDocumentationLineLength 0
                       :trimDocumentationText :json-false
                       :maxDocumentationTextLength 0)
      :analysisUpdates t
      :asyncStartup t))

  (add-to-list 'eglot-server-programs
               `(python-mode eglot-pyls ,mspyls-path)))

;; setup binding to Eglot hydra in Python mode
(eglot--setup-hydra-bindings python-mode-map)
#+end_src

*Note*: The correct flags to feed into Microsoft's Python Language
Server can be a moving target, and the [[https://github.com/emacs-lsp/lsp-python-ms][lsp-python-ms]] issues page can
give good insights into how to adjust accordingly. (~lsp-python-ms~ is
a package for extending ~lsp-mode~, an alternative to Eglot, to
support the Microsoft Python Language Server.)

**** Installing the Microsoft Python Language Server               :external:

The easiest way is to use the ~get-mspyls-nupkg.py~ script in this
folder to download the newest binary.
This ~nupkg~ file can be unzipped using ~unzip~ to the desired
directory and the binary needed by the Language Server Protocol
client is =Microsoft.Python.LanguageServer=.

Make sure the latest release of [[https://dotnet.microsoft.com/][.NET]] is installed.
To do this, download a *SDK binary release* of [[https://dotnet.microsoft.com/download/dotnet-core][.NET Core]],
extract it to some directory and add the directory containing
the ~dotnet~ binary to the system path.

Go to a target directory within which to build the source.

#+begin_example
$ git clone https://github.com/Microsoft/python-language-server.git
$ cd python-language-server/src/LanguageServer/Impl
$ dotnet publish -c Release -r osx-x64
$ cd ../../../output/bin/Release/osx-x64/publish
$ chmod a+x Microsoft.Python.LanguageServer
#+end_example

The binary is installed at
=/path/to/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer=
where =/path/to/= is directory from where the above commands were
begun.

Additionally, a softlink to ~Microsoft.Python.LanguageServer~ can be
created in a directory on the system path for easier access.

** R

*** Emacs Speaks Statistics

R support is provided by [[https://ess.r-project.org/][Emacs Speaks Statistics]], more commonly known by its abbreviation ESS ([[https://github.com/emacs-ess/ESS][Github]]).

#+name: ess
#+begin_src emacs-lisp
;; support for R language using Emacs Speaks Statistics
(use-package ess
  :mode ("\\.R$" . R-mode)
  :commands (R-mode ess-switch-to-ESS)
  :init (setq ess-eval-visibly 'nowait
              ess-default-style 'RStudio))
#+end_src

*** Shortcuts for commonly used R operators

The assignment operator ~<-~ is used a lot, so it makes sense to create a shortcut for that operator that is quicker to input.

Besides that, another good candidate is the forward pipe operator
~%>%~.
This operator is from the [[https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html][magrittr]] package (one of the [[https://www.tidyverse.org/][tidyverse]]
packages), which introduces the forward pipe operator ~%>%~, then
exposition pipe operator ~%$%~, the tee pipe operator ~%T>%~ and the
compound assignment pipe operator ~%<>%~.
Of these, the forward pipe operator ~%>%~ is most common in usage.

*Configuration*:
- ~M--~ inserts ~<-~ in ~ess-mode~ and ~inferior-ess-mode~.
- ~C-S-m~ inserts ~%>%~ followed by a new line in ~ess-mode~ and
  ~inferior-ess-mode~.

#+name: ess-pipe-operators
#+begin_src emacs-lisp
;; forward pipe and assignment R operator shortcuts, adapted from
;; https://emacs.stackexchange.com/questions/8041/how-to-implement-the-piping-operator-in-ess-mode
(defun my-insert-R-forward-pipe-operator ()
  "Insert R magrittr forward pipe operator '%>%'."
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(defun my-insert-R-assignment-operator ()
  "Insert R assigment operator '<-'."
  (interactive)
  (just-one-space 1)
  (insert "<- "))

;; bindings for the above R operator shortcuts
(with-eval-after-load 'ess-mode
  (define-key ess-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key ess-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))
(with-eval-after-load 'ess-inf
  (define-key inferior-ess-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key inferior-ess-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))
#+end_src

*** ess-mode hydra

Hydra for ~ess-mode~.

#+name: ess-mode-hydra
#+begin_src emacs-lisp
;; major mode-specific hydra for ess-mode
(defhydra my-hydra/ess-mode (:color teal :hint nil)
  "
Emacs Speaks Statistics (_q_: quit)
Session       _N_ : new       _R_ : request   _s_ : switch    _C-q_ : quit
Eval          _l_ : line      _f_ : func      _r_ : region    _b_   : buffer
Workspace     _D_ : chdir     _d_ : R dired
Help          _h_ : object    _H_ : browser   _A_ : apropos
"
  ("q" nil nil)
  ;; session
  ("N" (lambda () (interactive)
         (cond ((string= ess-dialect "R") (R))
               ((string= ess-dialect "julia") (julia))
               (t (message "Unsupported dialect")))))
  ("R" ess-request-a-process)
  ("s" ess-switch-to-ESS)
  ("C-q" ess-quit)
  ;; eval
  ("l" ess-eval-line)
  ("f" ess-eval-function)
  ("r" ess-eval-region)
  ("b" ess-eval-buffer)
  ;; workspace
  ("D" ess-change-directory)
  ("d" ess-rdired)
  ;; help
  ("h" ess-display-help-on-object)
  ("H" ess-display-help-in-browser)
  ("A" ess-display-help-apropos))

;; binding for ess-mode hydra
(with-eval-after-load 'ess-mode
  (define-key ess-mode-map (kbd "C-c C-M-m") #'my-hydra/ess-mode/body))
#+end_src

* Project interaction

** Projectile                                                         :melpa:

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs, providing many
convenience functions to navigate, search and build projects.

*Customizations*:
- Create test file if missing when toggling to it using ~projectile-toggle-between-implementation-and-test~.
- Run ~projectile-commander~ instead of ~projectile-find-file~ when switching projects using ~projectile-switch-project~.
- Use ~git grep~ when searching within the project.
- Enable globally.

#+name: projectile
#+begin_src emacs-lisp
;; project interaction library
(use-package projectile
  :demand t
  :config
  (setq projectile-create-missing-test-files t ;; create test file if none is found when toggling
        projectile-switch-project-action 'projectile-commander
        projectile-use-git-grep t) ;; use git grep to skip backup, object, and untracked files when in a Git project
  (projectile-mode)) ;; enable mode globally
#+end_src

*** Projectile hydra                                                  :hydra:

Major mode-specific hydra for interfacing with Projectile commands.

#+name: projectile-hydra
#+begin_src emacs-lisp
;; hydra for Projectile
(defhydra my-hydra/projectile-mode (:color teal :hint nil)
  "
Projectile: %(projectile-project-name) (_q_: quit)
Buffer _←_ : previous proj buf  _→_ : next proj buf      _b_ : switch
       _I_ : ibuffer            _S_ : save proj bufs     _k_ : kill proj bufs
File   _f_ : find (curr proj)   _F_ : find (known projs) _g_ : find (context)
       _t_ : goto impl/test     _e_ : recent             _E_ : dir-locals-file
Dir    _d_ : find dir           _D_ : dired
Search _o_ : multi-occur        _s_ : grep               _r_ : replace string
Tags   _j_ : find tag           _R_ : regenerate tags
Shell  _x_ : eshell             _!_ : run command        _&_ : run command async
Other  _C_ : configure proj     _c_ : compile proj       _u_ : run proj
       _P_ : test proj          _z_ : cache curr file    _i_ : clear cache
"
  ("q" nil nil)
  ;; buffer
  ("b" projectile-switch-to-buffer)
  ("<left>" projectile-previous-project-buffer :exit nil)
  ("<right>" projectile-next-project-buffer :exit nil)
  ("I" projectile-ibuffer)
  ("S" projectile-save-project-buffers)
  ("k" projectile-kill-buffers)
  ;; file
  ("f" projectile-find-file)
  ("F" projectile-find-file-in-known-projects)
  ("g" projectile-find-file-dwim)
  ("t" projectile-toggle-between-implementation-and-test)
  ("e" projectile-recentf)
  ("E" projectile-edit-dir-locals)
  ;; dir
  ("d" projectile-find-dir)
  ("D" projectile-dired)
  ;; search
  ("o" projectile-multi-occur)
  ("s" projectile-grep)
  ("r" projectile-replace)
  ;; tags
  ("j" projectile-find-tag)
  ("R" projectile-regenerate-tags)
  ;; other
  ("C" projectile-configure-project)
  ("c" projectile-compile-project)
  ("u" projectile-run-project)
  ("P" projectile-test-project)
  ("z" projectile-cache-current-file)
  ("i" projectile-invalidate-cache)
  ("x" projectile-run-eshell)
  ("!" projectile-run-shell-command-in-root)
  ("&" projectile-run-async-shell-command-in-root)
  ;; misc
  ("m" projectile-commander "commander")
  ("p" projectile-switch-project "switch project"))
;; binding
(with-eval-after-load 'projectile
  (define-key projectile-mode-map (kbd "C-c C-M-p") #'my-hydra/projectile-mode/body))
#+end_src

*** Projectile project TODO files                                     :melpa:

See \S[[org-projectile for Projectile project Org TODOs]].

** Magit                                                     :external:melpa:

[[https://github.com/magit/magit][Magit]] is a [[https://git-scm.com/][Git]] porcelain.
In other words, it is an high-level interface to the ~git~
command-line program on the system.

#+name: magit
#+begin_src emacs-lisp
;; binding for calling Magit
(use-package magit
    :commands magit-status
    :bind ("C-c C-M-g s" . magit-status))

;; Uncomment to check VC info on file auto-revert (increases I/O load)
;; https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html
;; (setq auto-revert-check-vc-info t)
#+end_src

*** Magit integration with Ibuffer

Integrate Magit with Ibuffer, so that ~magit-status~ can be called on
the file at point in Ibuffer.

This uses the ~ibuffer-vc~ package, which is used to retrieve the
root directory of the file's project.

Adapted from [[https://www.manueluberti.eu/emacs/2019/08/06/ibuffer-magit/][here]].

#+name: magit-ibuffer-integration
#+begin_src emacs-lisp
;; call `magit-status' for file at point in Ibuffer, uses `ibuffer-vc'
;; adapted from https://www.manueluberti.eu/emacs/2019/08/06/ibuffer-magit/
(defun my-ibuffer-magit-status-at-pt ()
  "Call `magit-status' for the buffer at point while in Ibuffer."
  (interactive)
  (condition-case nil
      (progn
        (require 'ibuffer-vc)
        (let ((buf (ibuffer-current-buffer t)))
          (magit-status (cdr (ibuffer-vc-root buf)))))
    (message "requires `ibuffer-vc' package be installed.")))

;; bind the above function to the "G" key in Ibuffer
(with-eval-after-load 'ibuffer
  (define-key ibuffer-mode-map (kbd "G") #'my-ibuffer-magit-status-at-pt))
#+end_src

** Git identity management                                            :melpa:

[[https://github.com/akirak/git-identity.el][git-identity.el]] is a frontend in Emacs for managing Git identities.
This is useful when multiple Git identities need to handled on the
same machine.

It has integration with Magit.

#+name: git-identity
#+begin_src emacs-lisp
;; the "I" key in Magit opens a Git identity management interface
(use-package git-identity
  :after magit
  :bind (:map magit-status-mode-map
              ("I" . git-identity-info))
  :config
  (require 'git-identity-magit)
  (git-identity-magit-mode 1))
#+end_src

** Viewing historical versions of Git-controlled files

[[https://gitlab.com/pidu/git-timemachine][git-timemachine]] provides an easy way to view and step through
historical versions of Git-controlled files.

#+name: git-timemachine
#+begin_src emacs-lisp
;; Browse older versions of Git-controlled files
(use-package git-timemachine
  :commands git-timemachine
  :bind ("C-c C-M-g t" . git-timemachine))
#+end_src

* Search and navigation

** Search hydra                                                       :hydra:

Hydra for easier access to Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Search.html][search]] functionality.

#+name: search-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/search (:color teal :columns 3)
  "
Search (_q_: quit)"
  ("q" nil nil)
  ("gg" grep "grep")
  ("gr" rgrep "rgrep")
  ("gl" lgrep "lgrep")
  ("gf" grep-find "grep-find")
  ("gz" rzgrep "rzgrep")
  ("oo" occur "occur")
  ("om" multi-occur "multi-occur")
  ("ob" multi-occur-in-matching-buffers "multi-occur-match-buf")
  ("oO" org-occur "org-occur")
  ("rs" query-replace "replace string")
  ("rr" query-replace-regexp "replace regexp")
  ("kg" kill-grep "kill-grep"))
(global-set-key (kbd "C-c C-M-/") 'my-hydra/search/body)
#+end_src

** Ripgrep support                                           :hydra:external:

Support for [[https://github.com/BurntSushi/ripgrep][ripgrep]], an alternative for the grep search tool that is
extremely fast.
Besides having its own binding, also add a hydra head for calling it
to the [[Search hydra]].

#+name: ripgrep-support
#+begin_src emacs-lisp
;; support for ripgrep if installed on the system
(when (executable-find "rg")
  (use-package deadgrep
    :defer t
    :bind ("<f5>" . deadgrep))
  (defhydra+ my-hydra/search nil
    ("gR" deadgrep "ripgrep" :exit t)))
#+end_src

** Show match counts with Anzu                                        :melpa:

[[https://github.com/emacsorphanage/anzu][anzu.el]] provides a minor mode that shows the total number of matches
when searching and the current match number.

*Warning*:
This can be pretty slow in large buffers.
Consider turning off this mode for the buffer in those cases.

#+name: anzu
#+begin_src emacs-lisp
;; show current and total search matches, and preview query replace results
(use-package anzu
  :bind (([remap query-replace] . anzu-query-replace)
         ([remap query-replace-regexp] . anzu-query-replace-regexp))
  :init (global-anzu-mode))
#+end_src

** dumb-jump                                                          :melpa:

[[https://github.com/jacktasia/dumb-jump][dumb-jump]] provides jump to definition capability based on fast
searching using [[https://github.com/ggreer/the_silver_searcher][ag]], [[https://github.com/BurntSushi/ripgrep][rg]] or grep to find potential definitions of the
function or variable under point and filtering based on heuristics.

It provides a minor mode ~dumb-jump-mode~ which enables three bindings:
- ~C-M-g~ to jump to the definition of the thing under point.
- ~C-M-p~ to jump backwards.
- ~C-M-q~ to show definition of the thing under point in a tooltip.

#+name: dumb-jump
#+begin_src emacs-lisp
;; jump to definition using ag or rg and applying heuristics
(use-package dumb-jump
  :config (setq dumb-jump-aggressive nil
                dumb-jump-default-project "./"
                dumb-jump-selector 'completing-read))
#+end_src

*** dumb-jump hydra                                                   :hydra:

Hydra for ~dumb-jump~.

#+name: dumb-jump-hydra
#+begin_src emacs-lisp
;; hydra for dumb-jump
;; adapted from https://github.com/jacktasia/dumb-jump/blob/master/README.md
(defhydra my-hydra/search/dumb-jump (:color teal :columns 3
                                     :pre (require 'dumb-jump))
  "
Dumb Jump [mode-enabled=% 3`dumb-jump-mode] (_q_: ←)"
  ("q" my-hydra/search/body nil)
  ("j" dumb-jump-go "go")
  ("o" dumb-jump-go-other-window "go-other")
  ("e" dumb-jump-go-prefer-external "go-ext")
  ("x" dumb-jump-go-prefer-external-other-window "go-ext-other")
  ("i" dumb-jump-go-prompt "prompt")
  ("l" dumb-jump-quick-look "peek")
  ("b" dumb-jump-back "back")
  ("m" dumb-jump-mode "toggle-mode"))

;; add entrypoint for dumb-jump hydra in my-hydra/search
(defhydra+ my-hydra/search nil
  ("j" my-hydra/search/dumb-jump/body "dumb-jump"))
#+end_src

* Session management

** Desktop hydra                                                      :hydra:

Hydra for easier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html][Emacs desktop]] (session) manipulation and usage.

#+name: desktop-hydra
#+begin_src emacs-lisp
(defhydra my-hydra/desktop (:color teal :columns 5)
  "
Desktop (_q_: quit)"
  ("q" nil nil)
  ("c" desktop-clear "clear")
  ("s" desktop-save "save")
  ("r" desktop-read "read")
  ("R" desktop-revert "revert")
  ("d" desktop-change-dir "dir"))
(global-set-key (kbd "C-c C-M-e k") 'my-hydra/desktop/body)
#+end_src

* Web

** Browsing

*** Emacs Web Wowser

[[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][Emacs Web Wowser]] (~eww~) is a built-in Emacs web browser.
It supports text and images, but not webfonts or Javascript.

*Customizations*:
- Use the lightweight version of [[https://duckduckgo.com/][DuckDuckGo]] for web searches by default.
- Don't render images by default.

#+name: eww
#+begin_src emacs-lisp
;; built-in Emacs text web browser
(use-package eww
  :ensure nil ;; built-in
  :commands (eww eww-follow-link)
  :bind (:map eww-mode-map
         ("I" . my-eww-toggle-images))
  :init (setq eww-search-prefix "https://duckduckgo.com/lite?q=")
  ;; don't render images in HTML pages by default
  :config (setq-default shr-inhibit-images t))
#+end_src

*** Emacs Web Wowser hydra

Major mode-specific hydra for Emacs Web Wowser (~eww~).

#+name: eww-hydra
#+begin_src emacs-lisp
;; hydra for Emacs Web Wowser
(defhydra my-hydra/eww-mode (:color teal :columns 3)
  "
Emacs Web Wowser (_q_: quit)"
  ("q" nil nil)
  ("d" eww-download "download-link")
  ("G" eww "search")
  ("o" eww-open-file "open-file")
  ("l" eww-back-url "back")
  ("r" eww-forward-url "forward")
  ("g" eww-reload "reload")
  ("v" eww-view-source "view-source")
  ("w" eww-copy-url "copy-url")
  ("&" eww-browse-with-external-browser "browse-ext")
  ("b" eww-add-bookmark "bookmark-page")
  ("B" eww-list-bookmarks "bookmark-list")
  ("R" eww-readable "readable-only")
  ("F" eww-toggle-fonts "toggle-fonts")
  ("I" my-eww-toggle-images "toggle-images")
  ("M-C" eww-toggle-colors "toggle-colors")
  ("D" eww-toggle-paragraph-direction "toggle-text-dir")
  ("s" eww-switch-to-buffer "eww-switch-buf")
  ("S" eww-list-buffers "eww-list-buf")
  ("H" eww-list-histories "history")
  ("C" url-cookie-list "cookie-list"))

;; binding
(with-eval-after-load 'eww
  (define-key eww-mode-map (kbd "C-c C-M-m") #'my-hydra/eww-mode/body))
#+end_src

**** Helper functions for Emacs Web Wowser hydra

Helper functions for ~eww~:
- Toggle images in ~eww-mode~.

#+name: eww-hydra-helper-functions
#+begin_src emacs-lisp
;; helper function for toggling images in Emacs Web Wowser
(defun my-eww-toggle-images ()
  "Toggle displaying of images when rendering HTML."
  (interactive)
  (setq-local shr-inhibit-images (not shr-inhibit-images))
  (eww-reload)
  (message "Images are now %s" (if shr-inhibit-images "off" "on")))
#+end_src

** REST development tools

*** restclient.el                                                     :melpa:

[[https://github.com/pashky/restclient.el][restclient.el]] provides a major mode for interacting with HTTP queries
stored in text files, in particular editing and sending them.

*Customizations*:
- Load the major mode automatically when opening files with a ~.http~ suffix.
- When the response to a sent HTTP query is received, the request is
  pulsed once in the buffer to give visual feedback on which query the
  response is for (adapted from [[https://github.com/jordonbiondo/.emacs.d/blob/master/init.el][here]]).

#+name: restclient
#+begin_src emacs-lisp
(use-package restclient
  :defer t
  ;; assume request source files have ".http" suffix
  :mode ("\\.http\\'" . restclient-mode)
  :config
  ;; pulse *HTTP Response* buffer after receiving request response
  ;; adapted from https://github.com/jordonbiondo/.emacs.d/blob/master/init.el
  (defun my-restclient-pulse-buffer ()
    "Pulses the current buffer."
    (save-excursion
      (goto-char (point-min))
      (pulse-momentary-highlight-region (point-min) (point-max))))
  (add-hook 'restclient-response-loaded-hook #'my-restclient-pulse-buffer))
#+end_src

*** restclient.el hydra                                               :hydra:

Major mode-specific hydra for ~restclient-mode~.
The head for pretty printing the JSON response requires the
~json-mode~ package be installed.

#+name: restclient-hydra
#+begin_src emacs-lisp
;; hydra for restclient
(defhydra my-hydra/restclient-mode (:color teal :columns 3)
  "
REST client (_q_: quit)"
  ("q" nil nil)
  ("c" restclient-http-send-current "send")
  ("r" restclient-http-send-current-raw "send-raw")
  ("v" restclient-http-send-current-stay-in-window "send-bg")
  ("n" restclient-jump-next "next" :exit nil)
  ("p" restclient-jump-prev "prev" :exit nil)
  ("." restclient-mark-current "mark")
  ("u" restclient-copy-curl-command "copy-curl")
  ("N"
   (lambda ()
     (interactive)
     (if (buffer-narrowed-p)
         (widen)
       (restclient-narrow-to-current)))
   "narrow" :exit nil)
  ("f"
   (lambda ()
     (interactive)
     (require 'json-mode nil t)
     (if (fboundp 'json-mode-pretty-print-dwim)
         (call-interactively 'json-mode-pretty-print-dwim)
       (message "Requires the `json-mode' package be installed.")))
   "fmt-json-rgn"))

;; binding for restclient hydra
(with-eval-after-load 'restclient
  (define-key restclient-mode-map (kbd "C-c C-M-m") #'my-hydra/restclient-mode/body))
#+end_src

** Network security

Increased network security settings.

#+name: network-security
#+begin_src emacs-lisp
;; increase network security settings
(setq gnutls-verify-error t)
(setq gnutls-min-prime-bits 1024)
(setq network-security-level 'high)
(setq nsm-save-host-names t)
#+end_src

** HTTP requests privacy

More private HTTP requests.

#+name: http-requests-privacy
#+begin_src emacs-lisp
;; HTTP requests privacy settings
(setq url-cookie-untrusted-urls '(".*")) ;; no cookies
(setq url-privacy-level 'paranoid) ;; more private HTTP requests
(url-setup-privacy-info) ;; apply `url-privacy-level'
#+end_src

* Visual

** Decorations                                                        :early:

Remove toolbar and menu to maximize space usage.

#+name: remove-decorations
#+begin_src emacs-lisp
;; remove unused UI elements
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (and (not (display-graphic-p))
         (fboundp 'menu-bar-mode))
    (menu-bar-mode -1))
#+end_src

** Color theme                                                        :early:

Use custom ~ereader~ theme in ~lisp/ereader-theme.el~.

#+name: load-custom-theme
#+begin_src emacs-lisp
;; use local eReader theme from ~/.emacs.d/lisp/ereader-theme.el
(require 'ereader-theme)
(load-theme 'ereader t)
#+end_src

** Display face fonts                                                 :early:

Set the fonts used for display faces.

There are a few main display faces many other faces inherit from:
- ~default~: The main display face, everything inherits from this directly or
  indirectly unless otherwise specified.
- ~fixed-pitch~: For specific cases where a fixed-pitch
  (i.e. monospace) font is expected.
- ~variable-pitch~: For specific cases where a variable-pitch
  (i.e. proportional) font is expected.
- ~mode-line~: Mode line face for active buffers.
- ~mode-line-inactive~: Mode line face for inactive buffers.

Also set a fallback font for filling gaps in character coverage in the
display face fonts using ~set-fontset-font~,
which has the function signature
~(set-fontset-font NAME TARGET FONT-SPEC &optional FRAME ADD)~.
The key observations here are that:
- When ~NAME~ is ~t~, this is applied to the default fontset.
- When ~TARGET~ is ~nil~, ~FONT-SPEC~ is used for missing characters
  (if it has that character).
- When ~ADD~ is ~append~, then this font is added to the end of the
  fontset which means it will be searched for a matching character
  glyph after all other fonts in the set.

For a list of good free or open-source fonts, see this [[https://github.com/matheuristic/dotfiles/blob/master/font_notes.org][link]].
For more information about fonts and fontsets in Emacs, see this [[https://idiocy.org/emacs-fonts-and-fontsets.html][link]].

#+name: set-display-face-fonts
#+begin_src emacs-lisp
;; set typefaces for graphical Emacs
;; main fonts
(set-face-attribute 'default nil :family "Iosevka Fixed SS08"
                    :height 150 :weight 'normal :width 'normal)
(set-face-attribute 'fixed-pitch nil :family "Iosevka Fixed SS08"
                    :height 150 :weight 'normal :width 'normal)
(set-face-attribute 'variable-pitch nil :family "Iosevka Aile"
                    :height 150 :weight 'normal :width 'normal)
(set-face-attribute 'mode-line nil :family "Iosevka Fixed SS08"
                    :height 120 :weight 'normal :width 'normal)
(set-face-attribute 'mode-line-inactive nil :family "Iosevka Fixed SS08"
                    :height 120 :weight 'normal :width 'normal)
;; fallback font
(set-fontset-font t nil "Symbola" nil 'append)
#+end_src

For some fonts, an alternative character may be preferable to the
standard character show for some symbol code.
In those instances, the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#Active-Display-Table][standard display table]] can be modified to
display replace characters of a given code with characters of a
different one.
An example is shown below.

#+begin_example
;; the following displays '0' using '\ue007' (private slashed zero in B612 font)
(setq standard-display-table (make-display-table))
(aset standard-display-table ?0 [?])
#+end_example

** Icon fonts using all-the-icons                            :external:melpa:

Icon fonts can be enabled using the [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package.
These are useful for a few scenarios:
- Fitting more information in the mode line by converting descriptor words into icons.
- Making the interface more visually information and/or appealing (subjective).

Package functionality requires that specific icon fonts be installed on the system.
This can be done automatically by running ~M-x all-the-icons-install-fonts~,
or manually by installing the TTF fonts from [[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][here]] using the system font manager (for example the Font Book app in Mac OS X).

#+name: all-the-icons
#+begin_src emacs-lisp
;; font icons
(when (display-graphic-p)
  (use-package all-the-icons
    :config (setq all-the-icons-color-icons nil)))
#+end_src

** Fancy mode line using doom-modeline                                :melpa:

Use [[https://github.com/seagle0128/doom-modeline][doom-modeline]] when not using via a TTY.
Requires the ~all-the-icons~ package.

#+name: doom-modeline
#+begin_src emacs-lisp
;; set custom mode line in graphical Emacs
(when (display-graphic-p)
  ;; fast and fancy minimalist mode line, requires all-the-icons be installed
  (use-package doom-modeline
    :after all-the-icons
    :config
    (setq doom-modeline-buffer-file-name-style 'auto
          doom-modeline-env-version nil
          doom-modeline-height 23 ;; change this based on mode-line face height
          doom-modeline-minor-modes t
          doom-modeline-persp-name nil
          doom-modeline-unicode-fallback t)
    (doom-modeline-mode 1)))
#+end_src

** Hiding minor modes                                                 :melpa:

Hide minor modes by default using the [[https://github.com/tarsius/minions][minions]] package behind a pop-up menu, only displaying the most important ones.

#+name: minions
#+begin_src emacs-lisp
(if (display-graphic-p)
    ;; hide minor modes in a menu, access with mouse or `minions-minor-mode-menu'
    (use-package minions
      :init
      ;; modes in minions-direct are always shown
      ;; use UTF-8 mode line lighter
      (setq minions-direct '(overwrite-mode view-mode)
            minions-mode-line-lighter "☰")
      (minions-mode 1)))
#+end_src

** Display function or outline node at point using which-func

Display current function or outline node at point using [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Which-Function.html][Which Function mode]].
The mode is customized from its defaults as follows:
- The current function or outline node is displayed in the header line
  instead of the mode line.
- Mouse mappings for the which func part in the header line are
  modified to better support trackpads and support narrowing to the
  current definition or outline node.

#+name: which-func
#+begin_src emacs-lisp
;; display function or outline node at point
(setq which-func-modes '() ;; use `which-func-mode' only for given modes
      which-func-unknown "n/a")

;; enable minor mode
(which-function-mode)

;; modify to show current function in header instead of in mode line

(defun my-narrow-to-defun-toggle ()
  "Toggle narrow to defun."
  (interactive)
  (if (buffer-narrowed-p)
      (widen)
    (narrow-to-defun)))

(defvar my-which-func-header-keymap-default
  (let ((map (make-sparse-keymap)))
    (define-key map [header-line s-mouse-1] 'my-narrow-to-defun-toggle) ;; trackpad workaround
    (define-key map [header-line mouse-2] 'my-narrow-to-defun-toggle)
    (define-key map [header-line wheel-up] 'beginning-of-defun)
    (define-key map [header-line wheel-down] 'end-of-defun)
    map)
  "Keymap for header line which-func.")

(defvar my-which-func-header-keymap-help-text-default
  "mouse-2 : toggle rest visibility\n\
wheel-u : go to beginning\n\
wheel-d : go to end"
  "Help text for `my-which-fun-header-keymap-default'.")

(defvar my-which-func-header-format-default
  `(:propertize which-func-current
                local-map ,my-which-func-header-keymap-default
                face which-func
                mouse-face mode-line-highlight
                help-echo my-which-func-header-keymap-help-text-default)
  "Default header format for which-func part.")

;; remove which-func part from the mode line
(setq mode-line-misc-info (assq-delete-all 'which-function-mode mode-line-misc-info))

;; see Org mode section for a mode-specific example for Org-mode
(defvar my-which-func-header-formats
  `((nil . ,my-which-func-header-format-default))
  "Association list for looking up mode-specific which-func header-lines.
Keys should be major mode symbols and values should unevaluated
mode-line constructs, see
https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Data.html
for more info.")

(defun my-which-func-get-header-format ()
  "Gets `header-line-format' associated with the current major mode in `my-which-func-header-formats'."
  (cdr (or (assoc major-mode my-which-func-header-formats) ;; mode-specific
           (assoc nil my-which-func-header-formats)))) ;; default

(defun which-func-ff-hook--add-which-func-to-header-line ()
  "Add which-func part to header line for major modes in `which-func-modes'."
  (when (memq major-mode which-func-modes)
    (add-to-list 'header-line-format
                 '(which-function-mode
                   (which-func-mode
                    ("[ " (:eval (my-which-func-get-header-format)) " ]"))))))

;; run `which-func-ff-hook--add-which-func-to-header-line' after `which-func-ff-hook'
(advice-add 'which-func-ff-hook
            :after #'which-func-ff-hook--add-which-func-to-header-line)
#+end_src

** Visual hydra                                                       :hydra:

Hydra for manipulating various visual settings.

#+name: visual-hydra
#+begin_src emacs-lisp
;; hydra for visual settings
(defhydra my-hydra/visual (:color amaranth :hint nil
                                  :pre (progn
                                         (require 'follow)
                                         (require 'hilit-chg)
                                         (require 'hl-line)
                                         (require 'display-line-numbers)
                                         (require 'face-remap)))
  "
Visual (_q_: quit)
_b_ : blink-cursor [% 5`blink-cursor-mode]   _F_ : follow       [% 5`follow-mode]   _f_ : font-lock    [% 5`font-lock-mode]
_H_ : hl-changes   [% 5`highlight-changes-mode]   _h_ : hl-line      [% 5`hl-line-mode]   _l_ : line-nums    [% 5`display-line-numbers-mode]
_p_ : show-paren   [% 5`show-paren-mode]   _s_ : scroll-bar   [% 5(frame-parameter nil 'vertical-scroll-bars)]   _S_ : hscroll-bar  [% 5(frame-parameter nil 'horizontal-scroll-bars)]
_T_ : transient-mk [% 5`transient-mark-mode]   _t_ : truncate-lns [% 5`truncate-lines]   _v_ : visual-line  [% 5`visual-line-mode]
_nr_ / _np_ / _nd_ / _nw_ : narrow to-region / to-page / to-defun / widen      [% 5(buffer-narrowed-p)]
_+_  / _-_  / _0_       : zoom   in        / out     / reset                 [% 5`text-scale-mode-amount]
"
  ("q" nil :exit t)
  ("b" blink-cursor-mode)
  ("F" follow-mode)
  ("f" font-lock-mode)
  ("H" highlight-changes-mode)
  ("h" hl-line-mode)
  ("l" display-line-numbers-mode)
  ("p" show-paren-mode)
  ("s" toggle-scroll-bar)
  ("S" toggle-horizontal-scroll-bar)
  ("T" transient-mark-mode)
  ("t" toggle-truncate-lines)
  ("v" visual-line-mode)
  ("nr" narrow-to-region)
  ("np" narrow-to-page)
  ("nd" narrow-to-defun)
  ("nw" widen)
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("0" (text-scale-adjust 0)))

;; bind visual hydra
(global-set-key (kbd "C-c C-M-v i") 'my-hydra/visual/body)
#+end_src

** Color coding by depth using prism                                  :melpa:

[[https://github.com/alphapapa/prism.el][prism.el]] disperses Lisp and other forms in different colors by depth.
There are two modes:
- ~prism-mode~ for Lisp forms.
- ~prism-whitespace-mode~ for languages where whitespace has semantic meaning.

#+name: prism
#+begin_src emacs-lisp
;; color code by depth
(use-package prism
  :commands (prism-mode prism-whitespace-mode)
  :config
  (prism-set-colors :num 16
                    :desaturations (cl-loop for i from 0 below 16
                                            collect (* i 2.5))
                    :lightens (cl-loop for i from 0 below 16
                                       collect (* i 2.5))
                    :colors (list "saddle brown"
                                  "midnight blue"
                                  "dark green")
                    :comments-fn
                    (lambda (color)
                      (prism-blend color
                                   (face-attribute 'font-lock-comment-face
                                                   :foreground)
                                   0.25))
                    :strings-fn
                    (lambda (color)
                      (prism-blend color "white" 0.5))))
#+end_src

*** Prism hydra                                                       :hydra:

Hydra for toggling ~prism-mode~ and ~prism-whitespace-mode~.
Entry-point into this hydra is via the [[Visual hydra][visual hydra]].

#+name: prism-hydra
#+begin_src emacs-lisp
;; prism-mode and prism-whitespace-mode hydra
(defhydra my-hydra/visual/prism-mode (:color amaranth :hint nil
                                      :pre (require 'prism))
  "
Visual → Prism (_q_: ←)
_p_ : lisp-c-like [% 3`prism-mode]  _SPC_ : whitespace  [% 3`prism-whitespace-mode]"
  ("q" my-hydra/visual/body :exit t)
  ("p" prism-mode)
  ("SPC" prism-whitespace-mode))

;; add entrypoint to prism hydra from visual hydra
(defhydra+ my-hydra/visual nil
  ("P" my-hydra/visual/prism-mode/body "prism" :exit t))
#+end_src

** Semantic highlighting using color-identifiers-mode                 :melpa:

[[https://github.com/ankurdave/color-identifiers-mode][Color identifiers mode]] provides semantic highlighting, coloring each
source code identifier based on its name (specifically, a symbol or
variable name has the same color wherever it appears in the text).

The configuration below is the default, but two of the main parameters
users can modify are ~color-identifiers-coloring-method~ which
controls how words are mapped to colors and
~color-identifiers:num-colors~ which controls the cardinality of the
colorspace words are mapped to (more is not better since many of the
colors could end up very similar).

#+name: color-identifiers-mode
#+begin_src emacs-lisp
;; provides semantic coloring where same keywords are also colored the same
(use-package color-identifiers-mode
  :defer t
  :config (setq color-identifiers-coloring-method 'sequential
                color-identifiers:num-colors 10))
#+end_src

*** color-identifiers-mode hydra                                      :hydra:

Hydra for toggling ~color-identifiers-mode~.
Entry-point into this hydra is via the [[Visual hydra][visual hydra]].

#+name: color-identifiers-mode-hydra
#+begin_src emacs-lisp
;; color-identifiers-mode hydra
(defhydra my-hydra/visual/color-identifiers-mode (:color amaranth :hint nil
                                                  :pre (require 'color-identifiers-mode))
  "
Visual → Color Identifiers (_q_: ←)
_SPC_ : color-identifiers [% 3`color-identifiers-mode]"
  ("q" my-hydra/visual/body :exit t)
  ("SPC" color-identifiers-mode))

;; add entrypoint to color-identifiers-mode hydra from visual hydra
(defhydra+ my-hydra/visual nil
  ("c" my-hydra/visual/color-identifiers-mode/body "color-identifiers" :exit t))
#+end_src

** Outline minor mode hydra                                           :hydra:

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html][Outline mode]] is a mode for visualizing and editing the outline structure
of documents.
It provides commands to navigate the outline structure and to hide
text that are not heading lines (i.e. folding code).
The navigation commands are:
- ~C-c C-n~ and ~C-c C-p~ navigate to the next and previous visible
  headings.
- ~C-c C-f~ and ~C-c C-b~ navigate to the next and previous visible
  headings of the same level.
- ~C-c C-u~ navigates to the parent heading of the current one.

Outline mode can be enabled as a major mode or a minor mode.
The minor mode is typically the more useful of the two, so define a
hydra to access its visualization commands in a user friendly manner.

#+name: outline-hydra
#+begin_src emacs-lisp
;; hydra for toggling outline-minor-mode and running its commands
(defhydra my-hydra/visual/outline (:color amaranth :hint nil
                                   :pre (require 'outline))
  "
Visual → Outline [minor-mode-enabled=%`outline-minor-mode] (_q_: ←)
Mode    _m_ : toggle
Hide    _c_ : entry     _l_ : leaves    _d_ : subtree   _o_ : other
        _t_ : body
Show    _e_ : entry     _i_ : children  _k_ : branches  _s_ : subtree
        _a_ : all
"
  ("q" my-hydra/visual/body nil :exit t)
  ("c" outline-hide-entry)
  ("l" outline-hide-leaves)
  ("d" outline-hide-subtree)
  ("t" outline-hide-body)
  ("o" outline-hide-other)
  ("e" outline-show-entry)
  ("i" outline-show-children)
  ("k" outline-show-branches)
  ("s" outline-show-subtree)
  ("a" outline-show-all)
  ("m" outline-minor-mode))

;; add entry-point into outline hydra from visual hydra
(defhydra+ my-hydra/visual nil
  ("o" my-hydra/visual/outline/body "→ Outline" :exit t))
#+end_src

** Whitespace visualization and cleanup hydra                         :hydra:

#+name: whitespace-hydra
#+begin_src emacs-lisp
;; hydra for whitespace visualization and cleanup
(defhydra my-hydra/whitespace (:color teal :columns 3)
  "
Whitespace (_q_: quit)"
  ("q" nil nil)
  ("w" whitespace-mode "show-whitespace" :exit nil)
  ("t" (lambda () (interactive)
         (setq-local show-trailing-whitespace
                     (not show-trailing-whitespace)))
   "show-trailing" :exit nil)
  ("n" whitespace-newline-mode "show-newline" :exit nil)
  ("c" whitespace-cleanup "cleanup")
  ("r" whitespace-report "report"))
(global-set-key (kbd "C-c C-M-w s") #'my-hydra/whitespace/body)
#+end_src

** Show pointer location column number in the mode line

Show the column number of the pointer location in the mode line.

#+name: show-column-number
#+begin_src emacs-lisp
;; show pointer location column number in mode line
(setq column-number-mode t)
#+end_src

** Show matching parentheses immediately

Show matching parentheses while editing without delay.

#+name: show-matching-parentheses
#+begin_src emacs-lisp
;; show matching parentheses with no delay
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

* Other

** Auth sources

The auth-source package provides a API for secure storage and access
of user secrets.
A number of Emacs packages come with support for this, most notably
[[https://www.gnu.org/software/emacs/manual/html_node/gnus/][GNUS]] and [[https://www.gnu.org/software/tramp/][TRAMP]].

#+name: auth-sources
#+begin_src emacs-lisp
;; Auth Sources, https://www.gnu.org/software/emacs/manual/auth.html
(if (file-exists-p "~/.authinfo.gpg")
    (setq auth-sources '((:source "~/.authinfo.gpg" :host t :protocol t)))
  (setq auth-sources '((:source "~/.authinfo" :host t :protocol t))))
#+end_src

** real-auto-save for auto-saving files at regular intervals          :melpa:

The [[https://github.com/ChillarAnand/real-auto-save][real-auto-save]] package supports per-file auto-saving at regular
time intervals, i.e. a buffer-local ~auto-save-visited-mode~.

When the buffer-local minor mode ~real-auto-save-mode~ is active, the
buffer is automatically saved every ~real-auto-save-interval~ seconds.

#+name: real-auto-save
#+begin_src emacs-lisp
;; buffer-local `auto-save-visited-mode'
(use-package real-auto-save
  :defer t
  :config (setq real-auto-save-interval 10)) ;; save interval, in seconds
#+end_src

*Example use case*:
If some directory (say where files in ~org-agenda-files~ are
stored) is a cloud-enabled shared folder and external changes should be
reflected with files auto-saved on changes so that the buffer, local and
remote files are kept in sync, create a ~.dir-locals.el~ file in the folder
with the following contents.

#+begin_example
;; Directory-local settings
((nil . ((eval . (auto-revert-mode 1)) ;; auto-revert files
         (eval . (real-auto-save-mode 1))))) ;; buffer-local auto-save
#+end_example

** Configure mouse settings to be trackpad-friendly

Modify mouse scroll settings to be friendlier for trackpads:
- Regular scrolling is one line at a time.
- Hold Shift while scrolling for five lines at a time.
- Hold Control while scrolling for a screen at a time.
- Natural scrolling (scrolling right moves the screen left and the
  converse is true as well).

Only apply these settings after initialization is complete
to avoid it being clobbered by settings applied by the
Emacs implementation (looking at Emacs Mac Port here).

#+name: mouse-settings
#+begin_src emacs-lisp
;; mouse settings
(when (display-graphic-p)
  (add-hook
   'after-init-hook
   (lambda ()
     ;; turn off Emacs Mac Port mouse wheel implementation, use the default one
     (when (and (boundp 'mac-mouse-wheel-mode)
                mac-mouse-wheel-mode)
       (mac-mouse-wheel-mode -1)
       (mouse-wheel-mode 1))
     ;; use super-left-click as middle-click (trackpad workaround)
     ;; (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>"))
     ;; smooth scrolling, hold SHIFT/CONTROL for 5 line/full window increments
     ;; scrolling while holding CTRL changes the text size
     (setq mouse-wheel-scroll-amount '(1
                                       ((shift) . 5)
                                       ((control) . nil)))
     ;; enable horizontal scrolling
     (setq mouse-wheel-flip-direction t ;; t/nil for trackpad/mouse
           mouse-wheel-tilt-scroll t))
   t))
#+end_src

** CRUX --- A Collection of Ridiculously Useful eXtensions            :melpa:

[[https://github.com/bbatsov/crux][A Collection of Ridiculously Useful eXtensions for Emacs]] (CRUX)
provides a number of useful interactive commands that can
improve quality-of-life while using Emacs.

#+name:crux
#+begin_src emacs-lisp
;; useful extensions
(use-package crux
  :config
  (global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line))
#+end_src

*** Crux hydra                                                        :hydra:

Access most of CRUX functionality through a hydra, to reduce
conflicts with global or mode-specific bindings.

#+name: crux-hydra
#+begin_src emacs-lisp
;; hydra for CRUX commands
(defhydra my-hydra/crux (:color teal :columns 3)
  "
CRUX (_q_: quit)"
  ("q" nil nil)
  ("J" crux-top-join-line "join-line" :exit nil)
  ("C-y" crux-duplicate-current-line-or-region "duplicate")
  ("C-;" crux-duplicate-and-comment-current-line-or-region "duplicate+comment")
  ("C" crux-cleanup-buffer-or-region "cleanup-buf/rgn")
  ("R" crux-rename-file-and-buffer "rename-file+buf")
  ("D" crux-delete-file-and-buffer "delete-file+buf")
  ("K" crux-kill-other-buffers "kill-other-bufs")
  ("S" crux-reopen-as-root "sudo-edit")
  ("V" crux-view-url "view-url")
  ("o" crux-open-with "open-external"))
(global-set-key (kbd "C-c C-M-x") #'my-hydra/crux/body)
#+end_src
** Help hydra                                                         :hydra:

Hydra for summoning Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html][help]].

#+name: help-hydra
#+begin_src emacs-lisp
;; hydra for help entrypoints
(defhydra my-hydra/help (:color teal :columns 4)
  "
Help (_q_: quit)"
  ("q" nil nil)
  ("a" apropos-command "apropos-cmd")
  ("d" apropos-documentation "apropos-doc")
  ("f" describe-function "desc-fun")
  ("v" describe-variable "desc-var")
  ("c" describe-key-briefly "desc-key-brief")
  ("k" describe-key "desc-key")
  ("b" describe-bindings "desc-bind")
  ("m" describe-mode "desc-mode")
  ("p" describe-package "desc-pkg")
  ("y" describe-syntax "desc-syntax")
  ("e" view-echo-area-messages "messages")
  ("l" view-lossage "lossage")
  ("i" info "info")
  ("s" info-lookup-symbol "info-symbol")
  ("w" where-is "where-is"))

;; bind help hydra
(global-set-key (kbd "C-c C-M-h h") 'my-hydra/help/body)
#+end_src

** Hyperspace launcher for Emacs                                      :melpa:

[[https://github.com/ieure/hyperspace-el][Hyperspace]] is a launcher for Emacs, much like Alfred or Quicksilver
for Mac OS X.

On calling ~hyperspace~, a ~HS:~ prompt will appear in the minibuffer
and the user is expected to provide an input.
The input should be composed of a /keyword/ and an /query/.
The first part of the input (typically the first word) is assumed to be
the keyword, and the remainder of the input is used as the query.

Keywords are mapped to defined actions in ~hyperspace-actions~, which
are either Elisp function symbols or strings.
If the mapped action is an Elisp function symbol, the function is
called with the query as the first argument.
If the mapped action is a string, ~browse-url~ is called with ~(format
ACTION QUERY)~ as the parameter (which typically opens the the
parameter as a URL in the default web browser).

As example, ~ac stuff~ could run the action ~apropos-command~ mapped
to ~ac~ with ~"stuff"~ as the parameter, evaluating the Elisp
expression ~(apropos-command "stuff")~.

As another example, ~g stuff~ could run the action
="https://www.google.com/search?q=%s"= with ~"stuff"~ as the
parameter, opening to the URL
="https://www.google.com/search?q=stuff"= with the default web
browser.

#+name: hyperspace
#+begin_src emacs-lisp
;; launcher for Emacs like Alfred or Quicksilver
;; for example, calling `hyperspace' then "ac stuff"
;; does an apropos command search for "stuff"
(use-package hyperspace
  :demand t
  :init
  (setq hyperspace-actions
        `(("ac" . apropos-command)
          ("af" . (lambda (query) (apropos-command query t)))
          ("av" . apropos-variable)
          ("az" . "https://www.amazon.com/s?k=%s")
          ("bb" . bbdb-search-name)
          ;; TODO : change to https once slow HTTPS queries are fixed in Emacs
          ("e"  . (lambda (query)
                    (eww (format "http://duckduckgo.com/lite?q=%s" query))))
          ("el" . (apply-partially #'hyperspace-action->info "(elisp)Top"))
          ("c"  . "https://anaconda.org/search?q=%s")
          ("d"  . "https://duckduckgo.com/?q=%s")
          ("di" . "https://duckduckgo.com/?q=%s&iax=images&ia=images")
          ("g"  . "https://www.google.com/search?q=%s")
          ("gd" . "https://datasetsearch.research.google.com/search?query=%s")
          ("gm" . "https://maps.google.com/maps?q=%s")
          ("gi" . "https://www.google.com/search?tbm=isch&q=%s")
          ("gt" . "https://trends.google.com/trends/explore?q=%s")
          ("m"  . "https://melpa.org/#/?q=%s")
          ("py" . "https://pypi.org/search/?q=%s")
          ("r"  . "https://www.reddit.com/search.compact?q=%s")
          ("w"  . ,(concat "https://en.wikipedia.org/w/index.php?search=%s"
                           "&title=Special:Search&go=Go"))
          ("y"  . "https://yandex.com/search/?text=%s")
          ("yi" . "https://yandex.com/images/search?text=%s")))
  ;; default action if the keyword of the input is not an action
  ;; comment to use the default setting (first entry of `hyperspace-actions')
  (setq hyperspace-default-action "e")
  :bind (:map hyperspace-minor-mode-map
         ("C-M-S-SPC" . hyperspace))
  :config
  ;; unbind default keys
  (unbind-key "H-SPC" hyperspace-minor-mode-map)
  (unbind-key "<H-return>" hyperspace-minor-mode-map)
  (hyperspace-minor-mode))
#+end_src

** Scratch buffer default mode set to fundamental-mode

Set the initial mode of the scratch buffer to ~fundamental-mode~,
as it can used for anything and not just Emacs Lisp interaction.

S-expressions in the buffer can still be evaluated as Emacs Lisp by
using ~C-x C-e~ if desired.

#+name: scratch-buffer-initial-mode
#+begin_src emacs-lisp
;; set *scratch* buffer major-mode to fundamental-mode
(setq initial-major-mode 'fundamental-mode)
#+end_src

** Scroll conservatively at window edge

The default behavior in Emacs when scrolling past the window edge is
to recenter the viewport on the pointer.
Modify this to scroll conservatively, moving the viewport one column
or line at a time instead of recentering.

#+name: scroll-conservatively
#+begin_src emacs-lisp
;; scroll a line at a time at window edge
(setq scroll-conservatively 101)
#+end_src

** Silence audio and visual bells

Supress audio and visual bells.
These are super distracting.

#+name: silence-audio-and-visual-bells
#+begin_src emacs-lisp
;; turn off audio and visual bells
(setq ring-bell-function 'ignore)
#+end_src

** Suppress auto-revert messages

Suppress the minibuffer messages that appear whenever a file is
auto-reverted.

#+name: suppress-auto-revert-messages
#+begin_src emacs-lisp
;; suppress auto-revert minibuffer messages
(setq auto-revert-verbose nil)
#+end_src

** Suppress startup splash screen

Suppress the startup splash screen.
Don't need it.

#+name: suppress-startup-splash
#+begin_src emacs-lisp
;; suppress splash screen that appears on startup by default
(setq inhibit-startup-message t)
#+end_src

** System process management with proced

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/proced.el][Proced]] lists system processes in a buffer and provides
commands to operate to listed processes.
It can be used like [[https://en.wikipedia.org/wiki/Top_(software)][top]] by toggling auto-refresh
using ~M-x proced-toggle-auto-update~.

Note that Mac OS X isn't very well supported by this package,
so configure it only for Linux systems.
For Mac OS X, an alternative is using ~top~ in an ~term-mode~ buffer.

For more usage information, see [[https://www.masteringemacs.org/article/displaying-interacting-processes-proced][here]].

#+name: proced
#+begin_src emacs-lisp
;; manage system processes in Linux
(when (eq system-type 'gnu/linux)
  (setq proced-format 'medium)
  (global-set-key (kbd "C-x p") #'proced))
#+end_src

** Very large file support                                            :melpa:

[[https://github.com/m00natic/vlfi][Very Large Files]] provides a minor mode ~vlf-mode~ that allows loading
of large file in chunks, trading increased processing time for reduced
memory usage.

When ~vlf-mode~ is active, it exposes a number of commands that
are prefixed by ~C-c C-v~:
- ~C-c C-v n~ and ~C-c C-v p~ moves forward and back through the file
  by chunk.
- ~C-c C-v SPC~ shows the chunk starting from the current point.
- ~C-c C-v [~ and ~C-c C-v ]~ goes to the front and end of the file.
- ~C-c C-v l~ and ~C-c C-v j~ jumps to a given line in the file and a given chunk number respectively.
- ~C-c C-v s~, ~C-c C-v r~, ~C-c C-v o~ and ~C-c C-v %~ are the forward search,
  backward search, occur and replace equivalents that act across all the file
  chunks. Note the ~C-c C-v %~ auto-saves the file when each chunk is
  processed.
- ~C-c C-v f~ toggles continuous chunk around the point.
- ~C-c C-v +~ and ~C-c C-v -~ control chunk size.

The package also provides two commands ~vlf-ediff-files~ and
~vlf-ediff-buffers~ that compare files and buffers in chunks.

#+name: vlf
#+begin_src emacs-lisp
;; visit large files without loading it entirely
(use-package vlf
  :config (require 'vlf-setup))
#+end_src

* OS-specific

** Mac OS X


On Mac OS X, configure the following basic settings:
- Mac OS X does not support file notifications, so use file polling
  instead for ~auto-revert-mode~.
- Use the Option key as Meta.
  For accented characters, use ~C-x 8~ (for example ~C-x 8 , c~).
- Keep Super key as is.
  Super key combinations are first intercepted by the system and
  only passed on if they don't correspond to an existing system
  shortcut (say ~s-TAB~ or ~s-`~), which can limit the bindings
  available for use.

#+name: mac
#+begin_src emacs-lisp
;; on Mac OS X, use Option keys as Meta and file polling for auto-revert
(when (eq system-type 'darwin)
  (setq auto-revert-use-notify nil ;; OS X does not support file notifications
        mac-option-modifier 'meta ;; use Option key as Meta
        mac-right-option-modifier 'left ;; right Option uses left's mapping
        mac-command-modifier 'super)) ;; keep Super key as is
#+end_src

*** Case-insensitive sorting in Dired

Configure case-insensitive sorting in Dired to match OS X behavior.
Copied from [[http://pragmaticemacs.com/emacs/case-insensitive-sorting-in-dired-on-os-x/][here]].

#+name: mac-case-insensitive-sorting-in-dired
#+begin_src emacs-lisp
;; case-insensitive sorting in Dired
;; http://pragmaticemacs.com/emacs/case-insensitive-sorting-in-dired-on-os-x/
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil)
  (setq ls-lisp-ignore-case t)
  (setq ls-lisp-use-string-collate nil)
  ;; customise the appearance of the listing
  (setq ls-lisp-verbosity '(links uid))
  (setq ls-lisp-format-time-list '("%b %e %H:%M" "%b %e %Y"))
  (setq ls-lisp-use-localized-time-format t))
#+end_src

*** Open Finder at directory of current buffer                        :hydra:

Add a hydra head to the [[Buffer manipulation hydra]] that opens
Finder at the directory of the current buffer.

#+name: mac-open-finder-at-buffer-directory
#+begin_src emacs-lisp
;; add my-hydra/buffer head to open Finder at current buffer directory in OS X
(when (eq system-type 'darwin)
  (defun my-open-finder (&optional path)
    "Opens a new Finder window to PATH if provided,
or the current buffer file or directory if not (Mac OS X)."
    (interactive)
    (let* ((my-path (cl-some 'identity (list path
                                             (buffer-file-name)
                                             default-directory)))
           (my-full-path (expand-file-name my-path))
           (my-process-args (list "my-open-finder" nil
                                  "open" "-R" my-full-path)))
      (if (eq system-type 'darwin)
          (apply 'start-process my-process-args)
        (message "my-open-finder is Mac OS X-only"))))
  (defhydra+ my-hydra/buffer nil
    ("e" my-open-finder "open-finder" :exit t)))
#+end_src

*** Scale up Org-mode LaTeX fragment previews on Mac OS X

#+name: mac-scale-org-latex-fragment-previews
#+begin_src emacs-lisp
;; scale up LaTeX fragment preview images on OS X
(if (and (display-graphic-p)
         (eq system-type 'darwin)
         (executable-find "dvipng"))
    (setq org-format-latex-options (plist-put org-format-latex-options
                                              :scale 1.5)))
#+end_src

*** Ligatures in Emacs Mac Port                                       :hydra:

The [[https://bitbucket.org/mituharu/emacs-mac/][Emacs Mac Port]] ([[https://github.com/railwaycat/homebrew-emacsmacport/releases][binaries]]) by Mitsuharu Yamamoto has built-in support for
font ligatures with its ~mac-auto-operator-composition-mode~.
Add a head to the visual settings hydra for toggling this built-in support.

#+name: mac-port-hydra-toggle-ligatures
#+begin_src emacs-lisp
;; enable toggling of ligatures in visual hydra when using emacs-mac port
(when (fboundp 'mac-auto-operator-composition-mode)
  (defhydra+ my-hydra/visual nil
    ("L" mac-auto-operator-composition-mode "toggle-ligature" :exit nil)))
#+end_src

If using [[https://emacsformacosx.com/][Emacs for Mac OS X]], use the built-in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el#L199-L238][Prettify Symbols mode]] and modify ~prettify-symbols-alist~ to configure the desired character compositions.

* Back matter

** Footer

#+name: generate-footer
#+begin_src emacs-lisp
(concat "(provide '" feature ")\n"
        ";;; " feature ".el ends here")
#+end_src

* Tangled files

** early-init.el

In Emacs 27+, this is loaded before ~package.el~ and UI rendering.
Static UI customizations should go here to optimize startup time.

#+name: early-init.el
#+begin_src emacs-lisp :noweb no-export :tangle early-init.el
<<generate-header(feature="early-init", summary="Emacs early init file")>>

<<author-info>>
<<generate-timestamp()>>

;;; Commentary:

<<file-commentary-early-init>>

;;; Code:

;; Optimizations

<<startup-optimizations>>

<<io-optimizations>>

;; Package management

<<add-dirs-to-load-path>>

;; Visual user interface components

<<remove-decorations>>

<<load-custom-theme>>

<<set-display-face-fonts>>

<<generate-footer(feature="early-init")>>
#+end_src

** init.el

The main configuration file.

#+name: init.el
#+begin_src emacs-lisp :noweb no-export :tangle init.el
<<generate-header(feature="init", summary="Emacs init file")>>

<<author-info>>
<<generate-timestamp()>>

;;; Commentary:

<<file-commentary-init>>

;;; Code:

;; Backward compatibility

<<early-init-pre-27>>

;; Customize file

<<custom-file>>

;; Package management

<<elpa-repositories>>

<<package-init>>

<<use-package>>

;; Environment variables

<<environment-variables>>

;; Backend and frontend frameworks for building user interfaces

<<icomplete>>

<<hydra>>

<<company>>

<<edit-indirect>>

;; Visual (part 1)

<<all-the-icons>>

<<doom-modeline>>

<<minions>>

<<which-func>>

;; Backups

<<backup-files-directory>>

;; Bookmarks and history

<<bookmarks-hydra>>

<<amx>>

<<recentf>>

<<saveplace>>

<<savehist>>

;; Buffer management

<<bury-not-kill-buffers>>

<<buffer-hydra>>

<<ibuffer>>

<<ibuffer-filter-groups>>

<<ibuffer-vc>>

<<ibuffer-hydra>>

<<all-the-icons-ibuffer>>

;; Command-line interaction

<<eshell>>

<<eshell-visual-commands>>

<<eshell-disable-git-pager>>

<<eshell-named-buffers>>

<<esh-autosuggest>>

<<fish-completion>>

<<comint-prompt-read-only>>

<<kill-term-buffers-with-q-after-end>>

<<term-hydra>>

;; Comparison tools

<<ediff-hydra>>

<<smerge-hydra>>

<<ztree>>

<<ztree-dir-hydra>>

<<ztree-diff-hydra>>

;; Dired

<<dired>>

<<dired-hydra>>

<<dired-hydra-helper-functions>>

<<dired-filter>>

<<dired-filter-hydra>>

<<all-the-icons-dired>>

;; Editing text

<<indent-with-soft-tabs>>

<<completing-yank>>

<<delsel>>

<<sentence-end-single-space>>

;; *commented* currently do not edit GPG files much
;; <<epa-file>>

<<kmacros-hydra>>

<<registers-hydra>>

<<which-key>>

<<expand-region>>

<<multiple-cursors>>

<<multiple-cursors-hydra>>

<<yasnippet>>

<<yasnippet-hydra>>

<<paredit>>

<<undo-tree>>

;; Email

<<notmuch>>

<<notmuch-toggle-search-tags-in-results>>

<<org-msg>>

;; Frame and window management

<<winner-mode>>

<<window-hydra>>

<<window-hydra-helper-functions>>

<<frame-hydra>>

<<frame-hydra-helper-functions>>

;; Non-programming files

<<csv-mode>>

<<csv-mode-hydra>>

<<dockerfile-mode>>

<<ebib>>

<<json-mode>>

<<markdown-mode>>

<<markdown-mode-hydra>>

<<markdown-toc>>

<<add-markdown-toc-to-markdown-mode-hydra>>

<<yaml-mode>>

;; Org-mode

<<org>>

<<org-todo-keywords>>

<<org-visual-line-mode>>

<<org-capture-templates>>

<<org-maximize-capture-buffers>>

<<org-tags>>

<<org-mode-hydra>>

<<org-agenda>>

<<org-agenda-hydra>>

<<org-refile>>

<<org-entrypoints-hydra>>

<<org-latex-pdf-process>>

<<org-preview-latex-process>>

<<org-preview-and-scale-latex-fragments>>

<<org-graphical-customizations>>

<<org-which-func>>

<<org-bullets>>

<<org-cliplink>>

<<org-download>>

<<org-download-hydra>>

<<org-journal>>

<<org-present>>

<<add-org-present-to-org-mode-hydra>>

<<org-projectile>>

<<ox-md>>

;; Outlines

<<imenu-auto-rescan>>

<<imenu-anywhere>>

<<imenu-list>>

;; Programming / Flymake syntax checker

<<flymake>>

<<flymake-hydra>>

<<flymake-quickdef>>

;; Programming / DevSkim and FlyMake

<<devskim-flymake>>

;; Programming / Conda package and environment manager

<<conda>>

<<conda-hydra>>

;; Programming / Eglot Language Server Protocol client

<<eglot>>

<<eglot-hydra>>

;; Programming / Emacs Lisp

<<debugger-hydra>>

<<debugger-mode-hydra>>

<<profiler-hydra>>

<<el-patch>>

<<modify-lisp-indent-function>>

;; Programming / Clojure

;; Programming / Python

<<python-hydra>>

<<python-flymake>>

<<python-which-func-imenu>>

<<python-devskim-flymake>>

<<python-eglot>>

;; Programming / R

<<ess>>

<<ess-pipe-operators>>

<<ess-mode-hydra>>

;; Project interaction

<<projectile>>

<<projectile-hydra>>

<<magit>>

<<magit-ibuffer-integration>>

<<git-identity>>

<<git-timemachine>>

;; Search and navigation

<<search-hydra>>

<<ripgrep-support>>

<<anzu>>

<<dumb-jump>>

<<dumb-jump-hydra>>

;; Session management

<<desktop-hydra>>

;; Web

<<eww>>

<<eww-hydra>>

<<eww-hydra-helper-functions>>

<<restclient>>

<<restclient-hydra>>

<<network-security>>

<<http-requests-privacy>>

;; Visual (part 2)

<<visual-hydra>>

<<prism>>

<<prism-hydra>>

<<color-identifiers-mode>>

<<color-identifiers-mode-hydra>>

<<outline-hydra>>

<<whitespace-hydra>>

<<show-column-number>>

<<show-matching-parentheses>>

;; Other

;; *commented* currently do not store secrets using Emacs mechanisms
;; <<auth-sources>>

<<real-auto-save>>

<<mouse-settings>>

<<crux>>

<<crux-hydra>>

<<help-hydra>>

<<hyperspace>>

<<scratch-buffer-initial-mode>>

<<scroll-conservatively>>

<<silence-audio-and-visual-bells>>

<<suppress-auto-revert-messages>>

<<suppress-startup-splash>>

<<proced>>

<<vlf>>

;; OS-specific / Mac OS X

<<mac>>

<<mac-case-insensitive-sorting-in-dired>>

<<mac-open-finder-at-buffer-directory>>

<<mac-port-hydra-toggle-ligatures>>

<<mac-scale-org-latex-fragment-previews>>

<<generate-footer(feature="init")>>
#+end_src

* TODO Backlog

** Email

*** Multiple mailboxes

*Planning notes*:
- Not sure how to configure sending using multiple accounts, although it could probably go something like this:
  - Configuring multiple gmail mailboxes using Lieer linked to separate notmuch subdirectories (see [[https://github.com/gauteh/lieer/issues/56#issuecomment-546015279][here]]).
  - ~(setq send-mail-function #'sendmail-send-it)~
  - Advise ~sendmail-send-it~ to change its ~message-sendmail-extra-arguments~ based on the ~From~ header in the email message using the ~:before~ combinator (see [[https://www.emacswiki.org/emacs/MultipleSMTPAccounts][here]]).
- notmuch indexing does seem not handle multiple Gmail mailboxes very well (see [[https://github.com/gauteh/lieer/issues/56][Github issue]]).

*** Auto-completion of email address

*Planning notes*:
- [[https://github.com/redguardtoo/gmail2bbdb][gmail2bbdb]] for converting Google contacts to BBDB.
- [[https://elpa.gnu.org/packages/bbdb.html][bbdb]] for managing addresses in Emacs.
- See [[https://github.com/alhassy/emacs.d/blob/master/init.org#auto-completing-mail-addresses][here]] for an example configuration.
- See [[https://emacs.stackexchange.com/questions/22724/bbdb-searching-for-a-name-by-regex-with-tab-auto-completion/23842][here]] for an alternative method of completion using
  ~completing-read~ instead of ~company~.

** Org-mode

*** Org export backend to Tufte book and handout style PDFs

*TODO*: fork ~ox-tufte-latex.el~ and incorporate modifications from
~org-tufte-latex.el~ into it, especially making sure modifications
are buffer-local.

*** org-reveal

*TODO*: Migrate from org-re-reveal back to org-reveal since org-reveal
development is once again active.

*** org-static-blog

[[https://github.com/bastibe/org-static-blog][org-static-blog]] is a static website generator.

It integrates well with Github pages or GitLab pages.

It is possible to set up auto-rendering using CI tooling a new blog
post is pushed, see [[https://gitlab.com/_zngguvnf/org-static-blog-example][here]].

** Non-programming modes

*** PlantUML

** Programming

*** Clojure

*** Racket

** Search and navigation

*** wgrep

Writable grep.

** Writing

*** Dictionary

dictionary.el

**** dictd

**** GCIDE

GNU Collaborative International Dictionary of English

*** Thesaurus

*** Spelling

flyspell

**** Aspell

installing aspell and its dictionaries

*** Distraction-free workspace

[[http://elpa.gnu.org/packages/darkroom.html][darkroom]]


*** TinyTex                                                        :external:

Pre-requisite to any LaTeX to PDF compilation on the system.

Fish shell configuration code to add TinyTex bin directory to the
system path.

#+begin_example
# TinyTex
if test -d $HOME/Library/TinyTeX/bin/x86_64-darwin
    set PATH $HOME/Library/TinyTeX/bin/x86_64-darwin $PATH
end
#+end_example

* Local Variables                                                  :noexport:

Autocaption source blocks with their names when exporting so that
[[https://www.gnu.org/software/emacs/manual/html_node/org/noweb.html][noweb]] entries in the [[Tangled files]] section can be referenced against
their source blocks.

#+begin_src org
Local Variables:
eval: (setq-local org-babel-exp-code-template (concat "\n#+caption:=%name=\n" org-babel-exp-code-template))
End:
#+end_src
