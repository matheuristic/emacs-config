#+title: Emacs machine-local configuration snippets
#+author: matheuristic
#+options: h:4 num:t toc:t
#+property: header-args:emacs-lisp :exports code

* About

Snippets that can be copied into ~$HOME/.emacs.d/lisp/init-local.el~
for machine-local configuration.

The following is a template for local configuration.

#+begin_src emacs-lisp
;;; init-local.el --- Emacs local config file -*- lexical-binding: t; -*-

;;; Commentary:

;; Emacs configuration that is machine-local, typically loaded before
;; the Customize file.

;; This file should be located at lisp/init-local.el within
;; `user-emacs-directory', typically ~/.emacs.d/lisp/init-local.el

;;; Code:

;; ... machine-local configuration goes here ...

(provide 'init-local)
;;; init-local.el ends here
#+end_src

* Display face fonts

Set the fonts used for display faces.

There are a few main display faces many other faces inherit from:
- ~default~: The main display face, everything inherits from this directly or
  indirectly unless otherwise specified.
- ~fixed-pitch~: For specific cases where a fixed-pitch
  (i.e. monospace) font is expected.
- ~variable-pitch~: For specific cases where a variable-pitch
  (i.e. proportional) font is expected.
- ~mode-line~: Mode line face for active buffers.
- ~mode-line-inactive~: Mode line face for inactive buffers.

Also set a fallback font for filling gaps in character coverage in the
display face fonts using ~set-fontset-font~,
which has the function signature
~(set-fontset-font NAME TARGET FONT-SPEC &optional FRAME ADD)~.
The key observations here are that:
- When ~NAME~ is ~t~, this is applied to the default fontset.
- When ~TARGET~ is ~nil~, ~FONT-SPEC~ is used for missing characters
  (if it has that character).
- When ~ADD~ is ~append~, then this font is added to the end of the
  fontset which means it will be searched for a matching character
  glyph after all other fonts in the set.

For a list of good free or open-source fonts, see this [[https://github.com/matheuristic/dotfiles/blob/master/font_notes.org][link]].
For more information about fonts and fontsets in Emacs, see this [[https://idiocy.org/emacs-fonts-and-fontsets.html][link]].
Run ~(font-family-list)~ to get a list of available font families.

If using a large font, it is also a good idea to set
~inhibit-compacting-font-caches~ to ~t~ which avoids garbage
collecting font caches. This mitigates scenarios where the font is
removed from the cache and reloaded again during redisplay which can
slow down the redisplay.

#+begin_src emacs-lisp
;; set typefaces for graphical Emacs
;; main fonts
;; - note that the default face must specify :height using an integer
;;   in units of 1/10 point but other faces can use a float specifying
;;   height relative to its underlying face if desired
(set-face-attribute 'default nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 160 110)
                    :weight 'normal :width 'normal)
(set-face-attribute 'fixed-pitch nil :family "Iosevka Term"
                    :height 1.0
                    :weight 'normal :width 'normal)
(set-face-attribute 'variable-pitch nil :family "Iosevka Aile"
                    :height 1.0
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 130 90)
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line-inactive nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 130 90)
                    :weight 'normal :width 'normal)
;; fallback font
(set-fontset-font t nil "Symbola" nil 'append)
;; increase min underline offset for more readable underlined words
(setq underline-minimum-offset 5)
;; uncomment below if using a large font to not compact it during GC
(setq inhibit-compacting-font-caches t)
#+end_src

For some fonts, an alternative character may be preferable to the
standard character show for some symbol code.
In those instances, the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#Active-Display-Table][standard display table]] can be modified to
display replace characters of a given code with characters of a
different one.
An example is shown below.

#+begin_example
;; the following displays '0' using '\ue007' (private slashed zero in B612 font)
(setq standard-display-table (make-display-table))
(aset standard-display-table ?0 [?])
#+end_example

* Insert characters from a menu

[[https://github.com/mrkkrp/char-menu][char-menu]] allows inserting characters by selecting from an [[https://github.com/mrkkrp/avy-menu][Avy menu]].

#+begin_src emacs-lisp
;; insert characters from a menu
(use-package char-menu
  :bind ("C-c 8" . char-menu)
  :config
  (setq char-menu '("—" "‘’" "“”" "…" "«»" "–"
                    ("Typography"
                     "•" "©" "®" "™" "†" "‡" "°" "·" "§" "¶" "№" "★"
                     "¡" "¿" "※" "◊" "❧" "☞" "¢" "£" "€" "Æ" "Œ" "æ"
                     "œ" "½" "⅓" "¼" "⅛")
                    ("Emoji"
                     "😄" "😁" "😆" "😅" "🤣" "🙂" "🙃" "😉" "😇" "😙"
                     "🤔" "🤨" "😑" "🙄" "😌" "🙁" "😮" "😭" "😢" "😖"
                     "😞" "😤" "😠" "🤬" "😷" "🤒" "🥳" "💩" "❤" "💯"
                     "👋" "👍" "👎" "🙏" "👀" "🤷" "🎉")
                    ("Mathematical Operators"
                     "±" "×" "÷" "√" "∑" "∏" "∫" "∮" "∴" "∵" "≠" "≈"
                     "≉" "≤" "≥" "⊂" "⊃" "⊄" "⊅" "⊆" "⊇" "⊈" "⊉"
                     "⩵" "⩶" "≔" "≕" "≜" "∷" "∹" "∀" "∂" "∃" "∄" "∅"
                     "∆" "∇" "∈" "∉" "⊲" "⊳" "⊴" "⊵" "∝" "∞"
                     "⋀" "⋁" "⋂" "⋃" "∧" "∨" "∩" "∪" "⊼" "⊽" "¬" "⊥"
                     "⊢" "⊨" "⊬" "⊭" "≃" "≁" "∥" "⋮" "⋯")
                    ("Superscripts & Subscripts"
                     "⁰" "¹" "²" "³" "⁴" "⁵" "⁶" "⁷" "⁸" "⁹"
                     "⁺" "⁻" "⁼" "⁽⁾" "ⁱ" "ⁿ"
                     "₀" "₁" "₂" "₃" "₄" "₅" "₆" "₇" "₈" "₉"
                     "₊" "₋" "₌" "₍₎" "ₐ" "ₑ" "ₒ" "ₓ" "ₔ" "ₕ"
                     "ₖ" "ₗ" "ₘ" "ₙ" "ₚ" "ₛ" "ₜ")
                    ("Arrows"
                     "←" "→" "↑" "↓" "⇐" "⇒" "⇑" "⇓" "⇔" "⇕"
                     "⇍" "⇏" "⇎" "↤" "↦" "↥" "↧" "↺" "↻")
                    ("Technical"
                     "⌘" "⌥" "⌫" "␡" "⌦" "⌃" "⎋" "␛" "⏎" "↩" "⇥"
                     "⇧" "⇪" "⏏" "⌽" "␣" "␀" "␖" "␆")
                    ("Greek"
                     "α" "β" "Y" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ"
                     "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω"
                     "Α" "Β" "Γ" "Δ" "Ε" "Ζ" "Η" "Θ" "Ι" "Κ" "Λ" "Μ"
                     "Ν" "Ξ" "Ο" "Π" "Ρ" "Σ" "Τ" "Υ" "Φ" "Χ" "Ψ" "Ω")
                    ("Enclosed Alphanumerics"
                     "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "Ⓐ" "Ⓑ" "Ⓒ"
                     "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ" "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ" "Ⓝ" "Ⓞ"
                     "Ⓟ" "Ⓠ" "Ⓡ" "Ⓢ" "Ⓣ" "Ⓤ" "Ⓥ" "Ⓦ" "Ⓧ" "Ⓨ" "Ⓩ" "ⓐ"
                     "ⓑ" "ⓒ" "ⓓ" "ⓔ" "ⓕ" "ⓖ" "ⓗ" "ⓘ" "ⓙ" "ⓚ" "ⓛ" "ⓜ"
                     "ⓝ" "ⓞ" "ⓟ" "ⓠ" "ⓡ" "ⓢ" "ⓣ" "ⓤ" "ⓥ" "ⓦ" "ⓧ" "ⓨ"
                     "ⓩ" "⓪"))))
#+end_src

* vterm                                                               :melpa:

[[https://github.com/akermu/emacs-libvterm][emacs-libvterm]] (vterm) is full terminal emulator run inside Emacs
using [[https://launchpad.net/libvterm][libvterm]].

Note this requires Emacs be compiled with modules support enabled
(using the ~--with-modules~ option). If so, ~module-fix-suffix~ will
be non-nil.

~cmake~ and ~libtool~ are needed. On macOS, this can be installed
using MacPorts (shown below) or Homebrew.

#+begin_example
$ sudo port install cmake libtool
#+end_example

The emacs-libvterm package requires libvterm and its headers be
installed on the system (~libvterm-dev~ on Debian). On macOS, this can
be installed using MacPorts (shown below) or Homebrew.

#+begin_example
$ sudo port install libvterm
#+end_example

If libvterm and its headers are not installed on the system,
emacs-libvterm will try to clone the libvterm source onto the local
machine and compile it.

*Configuration*:
- Use shell title to populate buffer name.
- Clearing the screen also clears scrollback history.
- Limit the automatically eval'ed vterm commands in shell output to
  further limit attack vectors for arbitrary code execution.
- Kill vterm buffer automatically on exit.
- Define functions for sending lines and regions to a vterm buffer.
- Define a ~switch-to-buffer~ variant restricted to vterm buffers and
  the most recently selected buffer besides the current one (this is
  the buffer return by ~other-buffer~, and allows for toggling between
  the code and vterm), and bind it to ~C-c C-b~ when in ~vterm-mode~.
- Modify shell transient (~C-c t~) to include vterm suffixes.

#+name: vterm
#+begin_src emacs-lisp
;; vterm
(when (and module-file-suffix
           (executable-find "cmake")
           (executable-find "libtool"))
  (use-package vterm
    :init
    (setq vterm-buffer-name-string "vterm %s"
          vterm-clear-scrollback-when-clearing t
          vterm-eval-cmds '(("vterm-clear-scrollback" vterm-clear-scrollback))
          vterm-kill-buffer-on-exit t)
    :config
    ;; interactive funcs for sending lines/regions to a vterm buffer
    (defun my-vterm-send (command)
      "Select a vterm buffer and execute COMMAND."
      (interactive)
      (let* ((my-vt-bufs (seq-filter
                          (lambda (buf)
                            (string-match-p vterm-buffer-name (buffer-name buf)))
                          (buffer-list)))
             (my-vt-buf-name-list (mapcar #'buffer-name my-vt-bufs)))
        (if my-vt-buf-name-list
            (let* ((my-vt-buf-name (completing-read
                                    (concat "Send to vterm buffer ("
                                            (car my-vt-buf-name-list)
                                            ") : ")
                                    my-vt-buf-name-list nil t
                                    nil nil my-vt-buf-name-list)))
              (with-current-buffer my-vt-buf-name
                (goto-char (point-max))
                (message command)
                (vterm-send-string command)
                (vterm-send-return)))
          (message "No vterm buffers"))))
    (defun my-vterm-send-region ()
      "Select a vterm buffer and execute the current region."
      (interactive)
      (cond
       ((use-region-p)
        (my-vterm-send (buffer-substring-no-properties
                        (region-beginning)
                        (region-end))))
       (t (message "No region selected"))))
    (defun my-vterm-send-line ()
      "Select a vterm buffer and execute the current line."
      (interactive)
      (my-vterm-send
       (buffer-substring-no-properties (point-at-bol) (point-at-eol))))

    ;; interactive func and binding for switching to vterm buffers
    (defun vterm-switchb ()
      "Call `switch-to-buffer' but only for vterm buffers."
      (interactive)
      (let ((completion-regexp-list '("\\`vterm .*")))
        (call-interactively #'switch-to-buffer)))
    (define-key vterm-mode-map (kbd "C-c C-b") #'vterm-switchb)

    ;; add vterm suffixes to shell transient
    (with-eval-after-load 'init
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("v" "vterm" vterm))
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("V" "vterm (other)" vterm-other-window))
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("C-v" "vterm recompile" vterm-module-compile))
      (transient-append-suffix 'transient/shell '(0 1)
        ["Send to vterm"
         ("L" "Line" my-vterm-send-line)
         ("R" "Region" my-vterm-send-region)
         ]
        )
      )
    ))
#+end_src

*Updating compiled modules*: ~M-x vterm-module-compile~ recompiles
vterm-module, so run it to update to newer versions of libvterm.

** Shell-side configuration required for specific vterm features

If desired, vterm also has a number of Emacs and shell integration
features (directory tracking, prompt tracking, message parsing, etc)
that require some [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][shell-side configuration]].

Most of these shell-side configurations require a ~vterm_printf~
helper function.

For Bash or Zsh, add the following in the =~/.bashrc= or =~/.zshrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    vterm_printf () {
        if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
            # Tell tmux to pass the escape sequences through
            printf "\ePtmux;\e\e]%s\007\e\\" "$1"
        elif [ "${TERM%%-*}" = "screen" ]; then
            # GNU screen (screen, screen-256color, screen-256color-bce)
            printf "\eP\e]%s\007\e\\" "$1"
        else
            printf "\e]%s\e\\" "$1"
        fi
    }
fi
#+end_example

For fish, put the following in a
=~/.config/fish/functions/vterm_printf= file.

#+begin_example
# Helper function for sending info from shell to vterm using escape sequences.
# https://github.com/akermu/emacs-libvterm#shell-side-configuration
if [ "$INSIDE_EMACS" = "vterm" ]
    function vterm_printf
        if [ -n "$TMUX" ]
            # tell tmux to pass the escape sequences through
            # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
            printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
        else if string match -q -- "screen*" "$TERM"
            # GNU screen (screen, screen-256color, screen-256color-bce)
            printf "\eP\e]%s\007\e\\" "$argv"
        else
            printf "\e]%s\e\\" "$argv"
        end
    end
end
#+end_example

*** Directory and prompt tracking

Enables using ~C-c C-n~ and ~C-c C-p~ to go the next and previous
prompts respectively while in vterm.

Also allows ~vterm-beginning-of-line~ and ~vterm-at-prompt-p~
functions to better detect prompts.

For Bash, add the following to the =~/.bashrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    vterm_prompt_end(){
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
    }
    PS1=$PS1'\[$(vterm_prompt_end)\]'
fi
#+end_example

For Zsh, add the following to the =~/.zshrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    vterm_prompt_end() {
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
    }
    setopt PROMPT_SUBST
    PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'
fi
#+end_example

For fish, create a =~/.config/fish/functions/vterm_prompt_end.fish=
file with the following.

#+begin_example
# Helper function for redefining prompt in config.fish to enable directory
# and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    function vterm_prompt_end
        vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
    end
end
#+end_example

Next, add the following near the end of the
=~/.config/fish/config.fish= file.

#+begin_example
# Redefine the prompt for directory and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    functions -c fish_prompt vterm_old_fish_prompt
    function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
        # Remove the trailing newline from the original prompt. This is done
        # using the string builtin from fish, but to make sure any escape codes
        # are correctly interpreted, use %b for printf.
        printf "%b" (string join "\n" (vterm_old_fish_prompt))
        vterm_prompt_end
    end
end
#+end_example

*** vterm-clear-scrollback-when-clearing support

Required for ~vterm-clear-scrollback-when-clearing~ to work properly
when it is set to non-nil. This automatically clears the scrollback as well
on ~vterm-clear~, which bound to ~C-l~ by default.

For Bash, add the following to the =~/.bashrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    function clear(){
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    }
fi
#+end_example

For Zsh, add the following to the =~/.zshrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
fi
#+end_example

For fish, create a =~/.config/fish/functions/clear.fish= file with the
following contents.

#+begin_example
# Redefine clear function to also clear scrollback history in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#vterm-clear-scrollback
if [ "$INSIDE_EMACS" = "vterm" ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback"
        tput clear
    end
end
#+end_example

* Language Server Protocol

[[https://github.com/joaotavora/eglot][Emacs Polyglot]] (or eglot) is an Emacs Language Server Protocol client.
It is more lightweight than [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]], though also with less features.

- Compose output from multiple eldoc documentation functions instead
  of only using the first one which is the default behavior ([[https://github.com/joaotavora/eglot/issues/648][link]]).
- ~C-c l~ invokes an eglot transient globally.

#+begin_src emacs-lisp
;; lightweight LSP client
(use-package eglot
  :config
  ;; increase wait time after last change before asking for
  ;; completions from 0.5s to 2s to reduce request rate
  (setq eglot-send-changes-idle-time 2))

;; compose outputs from eldoc doc functions in Eglot managed buffers
(with-eval-after-load 'eldoc
  (with-eval-after-load 'eglot
    (add-hook 'eglot--managed-mode-hook
              (lambda ()
                (when (boundp 'eldoc-documentation-strategy)
                  (setq-local eldoc-documentation-strategy #'eldoc-documentation-compose))))))

;; add transient for Eglot
(with-eval-after-load 'eglot
  (transient-define-prefix transient/eglot ()
    "`eglot' session commands"
    ["Eglot Language Server Protocol client"
     ["Session"
      ("ss" "Start" eglot)
      ("sr" "Reconnect" eglot-reconnect)
      ("sS" "Shutdown" eglot-shutdown)
      ("sQ" "Shutdown all" eglot-shutdown-all)
      ("sc" "Update cfg" eglot-signal-didChangeConfiguration)
      ]
     ["Goto"
      ("ga" "Apropos" xref-find-apropos)
      ("gf" "Defn" xref-find-definitions)
      ("gd" "Decl" eglot-find-declaration)
      ("gi" "Impl" eglot-find-implementation)
      ("gr" "Refs" xref-find-references)
      ("gt" "Typedef" eglot-find-typeDefinition)
      ]
     ["Code Actions"
      ("cc" "Ask server" eglot-code-actions)
      ("re" "Extract" eglot-code-action-extract)
      ("ri" "Inline" eglot-code-action-inline)
      ("ro" "Org. Imprts" eglot-code-action-organize-imports)
      ("rf" "Quickfix" eglot-code-action-quickfix)
      ("rw" "Rewrite" eglot-code-action-rewrite)
      ]
     ["Other"
      ("rh" "Help-at-pt" eldoc)
      ("rr" "Rename" eglot-rename)
      ("rf" "Format" eglot-format)
      ("re" "Events buf" eglot-events-buffer)
      ("rs" "Stderr buf" eglot-stderr-buffer)
      ]
     ]
    )
  (global-set-key (kbd "C-c l") #'transient/eglot))
#+end_src

* Python

- Enable Flymake mode when editing Python files.
- Add Imenu entry to the menubar in ~python-mode~ buffers.
- Use ~jedi-language-server~ ([[https://github.com/pappasam/jedi-language-server][link]]) in Eglot for Python buffers. Since
  ~jedi-language-server~ smartly handles virtual environments, it is
  fine to install it outside of a development environment (e.g., for
  conda it can be installed in some ~jedi-ls~ environment with the
  ~jedi-language-server~ binary symlinked to a directory in ~$PATH~).
- When in a Python buffer, ~C-c m~ invokes a mode-specific transient
  (configured in ~init.el~).

#+begin_src emacs-lisp
;; enable `flymake-mode' in `python-mode' buffers
(add-hook 'python-mode-hook #'flymake-mode t)

;; add Imenu index to menubar
(with-eval-after-load 'imenu
  (add-hook 'python-mode-hook 'imenu-add-menubar-index))

;; use jedi-language-server for Python buffers when using eglot
(with-eval-after-load 'eglot
  (setf (alist-get 'python-mode eglot-server-programs) '("jedi-language-server")))
#+end_src

* R

R support is provided by [[https://ess.r-project.org/][Emacs Speaks Statistics]], more commonly known
by its abbreviation ESS ([[https://github.com/emacs-ess/ESS][Github]]).

- Install the [[https://cran.r-project.org/web/packages/lintr/index.html][lintr]] and [[https://cran.r-project.org/web/packages/styler/index.html][styler]] CRAN packages
  #+begin_src R
  install.packages("lintr")
  install.packages("styler")
  #+end_src
- Linting via Flycheck or Flymake uses the [[https://github.com/r-lib/lintr][lintr]] R package, and
  sometimes manual creation the =~/.R/lintr_cache~= directory is
  needed (see [[https://emacs.stackexchange.com/questions/53018/flycheck-r-lintr-doesnt-find-anything][StackOverflow issue]]).
- ~M--~ inserts ~<-~ in ~ess-mode~ and ~inferior-ess-mode~.
- ~C-S-m~ inserts ~%>%~ followed by a new line in ~ess-mode~ and
  ~inferior-ess-mode~.
- [[https://github.com/ShuguangSun/ess-r-insert-obj][ess-r-insert-obj]] provides utilities for inserting variable and
  column names or their values in ESS-R.
- [[https://github.com/ShuguangSun/ess-r-insert-obj][ess-r-insert-obj]] provides utilities for inserting variable and
  column names or their values in ESS-R.
- [[https://github.com/polymode/poly-R/][poly-R]] provides better support for R Markdown and bookdown files,
  leveraging [[https://github.com/polymode/polymode][polymode]] to have different major modes be active for
  different buffer regions.
- Code reformatting is done using the ~reformatter-define~ macro from
  the ~reformatter~ package, which defines two interactive commands
  ~r-styler-format-buffer~ and ~r-styler-format-region~ (only works on
  top-level objects) along with the local minor mode
  ~r-styler-format-on-save-mode~ that uses [[https://github.com/r-lib/styler][styler]] to format the code
  in the buffer.
- When in an R buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for R language using Emacs Speaks Statistics
(use-package ess
  :mode ("\\.R\\'" . R-mode)
  :commands (R-mode ess-switch-to-ESS)
  :init (setq ess-eval-visibly 'nowait
              ess-default-style 'RStudio
              ;; use Flymake only when buffer has an inferior process
              ess-use-flymake 'process))

;; forward pipe and assignment R operator shortcuts, adapted from
;; https://emacs.stackexchange.com/questions/8041/how-to-implement-the-piping-operator-in-ess-mode
(defun my-insert-R-forward-pipe-operator ()
  "Insert R magrittr forward pipe operator '%>%'."
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(defun my-insert-R-assignment-operator ()
  "Insert R assigment operator '<-'."
  (interactive)
  (just-one-space 1)
  (insert "<- "))

;; bindings for the above R operator shortcuts
(with-eval-after-load 'ess-r-mode
  (define-key ess-r-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key ess-r-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator)
  (define-key inferior-ess-r-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key inferior-ess-r-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))

;; view data in ESS-R
(use-package ess-view-data
  :after ess-r-mode
  :bind (:map ess-r-mode-map
         ("C-c v" . ess-view-data-print))
  :init
  ;; set update print backend to knitr::kable() due to csv-mode
  ;; header-line errors when using the default print backend
  (setq ess-view-data-current-update-print-backend 'kable))

;; insert column or variable names or values in ESS-R, useful when
;; working with tidyverse
(use-package ess-r-insert-obj
  :after ess-r-mode
  :bind (:map ess-r-mode-map
         ("C-c i f" . ess-r-insert-obj-dt-name)
         ("C-c i c" . ess-r-insert-obj-col-name)
         ("C-c i C" . ess-r-insert-obj-col-name-all)
         ("C-c i v" . ess-r-insert-obj-value)
         ("C-c i V" . ess-r-insert-obj-value-all)))

;; better support for R Markdown and bookdown files
(use-package poly-R)

;; format R buffers using styler
(with-eval-after-load 'reformatter
  (with-eval-after-load 'ess-r-mode
    ;; define `ess-r-styler-format-buffer', `ess-r-styler-format-region'
    ;; and `ess-r-styler-format-on-save-mode'
    (reformatter-define ess-r-styler-format
      :program "Rscript"
      :args `("--vanilla"
              "-e"
              ,(mapconcat
                'identity
                '("options(styler.colored_print.vertical=FALSE)"
                  "con <- file(\"stdin\")"
                  "out <- styler::style_text(readLines(con))"
                  "close(con)"
                  "out")
                "; ")
              "-")
      :group 'ess-R
      :lighter 'RStylFmt)
    ;; dwim function that calls `ess-r-styler-format-region' if a region
    ;; is selected, or `ess-r-styler-format-buffer' otherwise
    (defun ess-r-styler-format-buffer-or-region ()
      "Format the current R buffer or a region if selected using styler.
Formatting a selected region only works on top-level objects."
      (interactive)
      (cond
       ((use-region-p) (ess-r-styler-format-region (region-beginning)
                                                   (region-end)))
       (t (ess-r-styler-format-buffer))))))

;; major-mode specific transient for ess-r-mode
(with-eval-after-load 'ess-r-mode
  (require 'ess-view-data)
  (require 'ess-r-insert-obj)
  (transient-define-prefix transient/ess-r-mode ()
    "`ess-r-mode' commands."
    ["Emacs Speaks Statistics"
     ["Session"
      ("N" "New" R)
      ("R" "Request" ess-request-a-process)
      ("s" "Switch" ess-switch-to-ESS)
      ("q" "Quit" ess-quit)
      ]
     ["Eval"
      ("l" "Line" ess-eval-line)
      ("f" "Function" ess-eval-function)
      ("r" "Region" ess-eval-region)
      ("b" "Buffer" ess-eval-buffer)
      ]
     ["Workspace"
      ("D" "Change dir" ess-change-directory)
      ("d" "R dired" ess-rdired)
      ("v" "View data" ess-view-data-print)
      ]
     ["Insert"
      ("if" "Dataframe name" ess-r-insert-obj-dt-name)
      ("ic" "Column name" ess-r-insert-obj-col-name)
      ("iC" "Column name (all)" ess-r-insert-obj-col-name-all)
      ("iv" "Column value" ess-r-insert-obj-value)
      ("iV" "Column value (all)" ess-r-insert-obj-value-all)
      ]
     ["Help"
      ("h" "Object" ess-display-help-on-object)
      ("A" "Apropos" ess-display-help-apropos)
      ("H" "Browser" ess-display-help-in-browser)
      ]
     ]
    [
     ["Format"
      ("y" "Region or buffer" ess-r-styler-format-buffer-or-region)
      ("Y" (lambda ()
             (interactive)
             (transient--make-description
              "Buffer on save"
              ess-r-styler-format-on-save-mode))
       ess-r-styler-format-on-save-mode :transient t)
      ]
     ]
    )
  (define-key ess-r-mode-map (kbd "C-c m") #'transient/ess-r-mode))
#+end_src

* Racket

[[https://github.com/greghendershott/racket-mode][racket-mode]] provides a major mode for editing [[https://racket-lang.org/][Racket]] buffers.

- When in a Racket buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for Racket buffers
(use-package racket-mode
  :defer t
  :config
  (defun racket-mode--maybe-enable-racket-xp-mode ()
    "Enables `racket-xp-mode' if the \"racket\" executable is in system path.
This is useful for only enabling `racket-xp-mode' when the active
environment has Racket installed."
    (when (executable-find "racket")
      (racket-xp-mode 1)))
  (add-hook 'racket-mode-hook #'racket-mode--maybe-enable-racket-xp-mode))

;; major-mode specific transient for racket-mode
(with-eval-after-load 'racket-mode
  (defun transient/racket-mode--visit-definition ()
    "Visits definition of identifier at point in `racket-mode' buffers.
Uses `racket-xp-visit-definition' if `racket-xp-mode' is enabled,
and `racket-repl-visit-definition' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-visit-definition)
      (racket-repl-visit-definition)))

  (defun transient/racket-mode--describe ()
    "Describe identifier at point in `racket-mode' buffers.
Uses `racket-xp-describe' if `racket-xp-mode' is enabled, and
`racket-repl-describe' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-describe)
      (racket-repl-describe)))

  (defun transient/racket-mode--documentation ()
    "Show documentation for identifier at point in `racket-mode' buffers.
Documentation is opened in an external browser.
Uses `racket-xp-documentation' if `racket-xp-mode' is enabled,
and `racket-repl-documentation' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-documentation)
      (racket-repl-documentation)))

  (transient-define-prefix transient/racket-mode ()
    "`racket-mode' commands."
    ["Racket"
     ["Run"
      ("rr" "Buffer in REPL" racket-run)
      ("rm" "Module in REPL" racket-run-module-at-point)
      ("rR" "File in shell" racket-racket)
      ]
     ["Profiling/Logging"
      ("rp" "Profiler" racket-profile)
      ("rl" "Logger" racket-logger)
      ]
     ["Refactoring"
      ("Rb" "Base requires" racket-base-requires)
      ("Rt" "Tidy requires" racket-tidy-requires)
      ("RT" "Trim requires" racket-trim-requires)
      ]
     ["Editing"
      ("a" "Align" racket-align)
      ("u" "Unalign" racket-unalign)
      ]
     ]
    [
     ["Testing"
      ("tt" "Run tests in REPL" racket-test)
      ("tr" "Raco test" racket-raco-test)
      ]
     ["Help"
      ("." "Visit definition" transient/racket-mode--visit-definition)
      ("C-." "Visit module" racket-visit-module)
      ("," "Unvisit" racket-unvisit)
      ("h" "Describe" transient/racket-mode--describe)
      ("H" "Documentation" transient/racket-mode--documentation)
      ]
     ["Other"
      ("f" "Find collection" racket-find-collection)
      ("p" (lambda ()
             (transient--make-description
              "Paredit mode"
              paredit-mode))
       paredit-mode :transient t)
      ("x" (lambda ()
             (transient--make-description
              "Explain/Explore mode"
              racket-xp-mode))
       racket-xp-mode :transient t)
      ("s" "Compile racket-mode" racket-mode-start-faster)
      ("S" "Revert compile" racket-mode-start-slower)
      ]
     ]
    )

  (define-key racket-mode-map (kbd "C-c m") #'transient/racket-mode))
#+end_src

* Go

- Support for Go buffers
- Add Imenu entry to the menubar in ~go-mode~ buffers
- Install ~gopls~ which is usable with Eglot by running
  ~GO111MODULE=on go get golang.org/x/tools/gopls@latest~
- When in a Go buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for Go buffers
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :config
  ;; add Imenu index to menubar
  (with-eval-after-load 'imenu
    (add-hook 'go-mode-hook 'imenu-add-menubar-index))
  ;; major-mode specific transient for Go buffers
  (transient-define-prefix transient/go-mode ()
    "`go-mode' commands."
    ["Go"
     ["Goto"
      ("fa" "Arguments" go-goto-arguments)
      ("fd" "Docstring" go-goto-docstring)
      ("ff" "Function" go-goto-function)
      ("fi" "Imports" go-goto-imports)
      ("fm" "Method recv" go-goto-method-receiver)
      ("fn" "Func name" go-goto-function-name)
      ("fr" "Return vals" go-goto-return-values)
      ]
     ["Imports"
      ("a" "Add" go-import-add)
      ("r" "Remove unused" go-remove-unused-imports)
      ""
      "Playground"
      ("pd" "Download URL" go-download-play)
      ("pb" "Send buffer" go-play-buffer)
      ("pr" "Send region" go-play-region)
      ]
     ["Other"
      ("C" "Test coverage" go-coverage)
      ("D" "Godoc" godoc)
      ("F" "Gofmt" gofmt)
      ("P" "Set project" go-set-project)
      ]
     ]
    )
  (define-key go-mode-map (kbd "C-c m") #'transient/go-mode))
#+end_src

* Common Lisp

- Support for Common Lisp files using [[https://github.com/joaotavora/sly][SLY]] (fork of [[https://slime.common-lisp.dev/][SLIME]])
- The first available implementation among [[https://github.com/roswell/roswell][Roswell]] (an implementation
  manager), [[http://www.sbcl.org/][SBCL]] and [[https://ccl.clozure.com/][Clozure CL]] is used
- When in a Common Lisp buffer, ~C-c m~ invokes a mode-specific
  transient
- TODO
  - [[https://github.com/mmgeorge/sly-asdf][sly-asdf]] (support for editing [[https://asdf.common-lisp.dev/][ASDF]] systems)
  - [[https://github.com/joaotavora/sly-quicklisp][sly-quicklisp]] ([[https://www.quicklisp.org/][Quicklisp]] support)
  - [[https://github.com/joaotavora/sly-macrostep][sly-macrostep]] (expand macros within the source file, may not be needed)

#+begin_src emacs-lisp
;; support for Common Lisp
(use-package sly
  :hook ((lisp-mode sly-mrepl-mode) . enable-paredit-mode)
  :config
  (setq inferior-lisp-program (cond ((executable-find "ros") "ros -Q run")
                                    ((executable-find "sbcl") "sbcl")
                                    ((executable-find "ccl64") "ccl64")
                                    (t "lisp")))
  ;; major-mode specific transient for Common Lisp buffers
  (transient-define-prefix transient/sly-mode ()
    "`sly-mode' commands."
    ["Sly"
     ["Actions"
      ("z" "Connect" sly)
      ("e" "Eval" sly-interactive-eval)
      ("p" "Eval at point" sly-pprint-eval-last-expression)
      ("r" "Eval region" sly-eval-region)
      ("b" "Interrupt" sly-interrupt)
      ("t" "Toggle trace" sly-toggle-trace-fdefinition)
      ("I" "Inspect" sly-inspect)
      ("M-d" "Disassemble" sly-disassemble-symbol)
      ("C-u" "Undefine fn" sly-undefine-function)
      ]
     ["Who"
      ("wa" "Specializes" sly-who-specializes)
      ("wb" "Binds" sly-who-binds)
      ("wc" "Calls" sly-who-calls)
      ("wm" "Macro expands" sly-who-macroexpands)
      ("wr" "References" sly-who-references)
      ("ws" "Sets" sly-who-sets)
      ("ww" "Is called by" sly-calls-who)
      ]
     ["Show"
      ("xc" "Connections" sly-list-connections)
      ("xt" "Threads" sly-list-threads)
      ("x<" "Callers" sly-list-callers)
      ("x>" "Callees" sly-list-callees)
      ("xm" "Macroexpand-1" sly-expand-1)
      ("xM" "Macroexpand-*" sly-macroexpand-all)
      ]
     ["Selector"
      ("xd" "Debugger" sly-db-pop-to-debugger-maybe)
      ("xe" "Events" sly-pop-to-events-buffer)
      ("xi" "REPL" sly-inferior-lisp-buffer)
      ("xl" "Last buf" sly-switch-to-most-recent)
      ("xn" "Next conn" sly-next-connection)
      ("xp" "Prev conn" sly-prev-connection)
      ]
     ]
    [
     ["Doc"
      ("da" "Apropos" sly-apropos)
      ("dd" "Lookup" sly-documentation-lookup)
      ("df" "Function" sly-describe-function)
      ("ds" "Symbol" sly-describe-symbol)
      ("d~" "Hyperspec" hyperspec-lookup)
      ]
     ]
    )
  (with-eval-after-load 'sly-stickers
    (transient-append-suffix 'transient/sly-mode '(-1 -1)
      ["Stickers"
       ("ss" "DWIM" sly-stickers-dwim)
       ("sr" "Replay" sly-stickers-replay)
       ("sS" "Fetch" sly-stickers-fetch)
       ("sF" "Forget" sly-stickers-forget)
       ("sd" "Clear defun" sly-stickers-clear-defun-stickers)
       ("sk" "Clear buf" sly-stickers-clear-buffer-stickers)
       ("sR" "Clear region" sly-stickers-clear-region-stickers)
       ]
      ))
  (with-eval-after-load 'sly-trace-dialog
    (transient-append-suffix 'transient/sly-mode '(0 3 -1)
      '("xT" "Trace dialog" sly-trace-dialog)
      ))
  (define-key sly-mode-map (kbd "C-c m") #'transient/sly-mode))
#+end_src

* Julia

- Support for Julia buffers
- Julia REPL integration using [[https://github.com/tpapp/julia-repl][julia-repl]] or [[https://github.com/gcv/julia-snail][julia-snail]]
- When in a Julia buffer, ~C-c m~ invokes a mode-specific transient

Version using ~julia-repl~ to provide Julia REPL support in Emacs.

#+begin_src emacs-lisp
;; support for editing Julia buffers
(use-package julia-mode)

;; support for running the Julia REPL inside Emacs
(use-package julia-repl
  :after julia-mode
  :hook (julia-mode . julia-repl-mode)
  :config
  ;; interactive function for showing completions in attached REPL
  (defun my-julia-repl-completions ()
    "Show completions in attached `julia-repl' REPL."
    (interactive)
    (if (thing-at-point 'word)
        (julia-repl--send-string (concat "using REPL;"
                                         "println(\"\");"
                                         "println(\"Completions\");"
                                         "println(\"-----------\");"
                                         "for c in REPL.REPLCompletions.completions(\""
                                         (thing-at-point 'line t)
                                         "\","
                                         (number-to-string (current-column))
                                         ")[1];"
                                         "println("
                                         "c isa REPL.REPLCompletions.KeywordCompletion ? c.keyword : c.mod"
                                         ");"
                                         "end"
                                         ))
      (message "Nothing to complete at point")))
  (define-key julia-repl-mode-map (kbd "C-c i") #'my-julia-repl-completions)
  ;; julia-repl-mode transient
  (transient-define-prefix transient/julia-repl-mode ()
    "`julia-repl-mode' commands."
    ["Julia REPL"
     [
      ("z" "Connect" julia-repl)
      ("a" "Activate" julia-repl-activate-parent)
      ("b" "Send buffer" julia-repl-send-buffer)
      ("c" "Send region/line" julia-repl-send-region-or-line)]
     [
      ("p" "Change dir" julia-repl-cd)
      ("s" "Set REPL suffix" julia-repl-prompt-set-inferior-buffer-name-suffix)
      ("v" "Set Julia exe" julia-repl-prompt-set-executable-key)
      ("t" "Includet buffer" julia-repl-includet-buffer)
      ]
     [("d" "@doc" julia-repl-doc)
      ("e" "@edit" julia-repl-edit)
      ("l" "List methods" julia-repl-list-methods)
      ("m" "Macroexpand" julia-repl-macroexpand)
      ]
     [("i" "complete" my-julia-repl-completions)
      ]
     ]
    )
  (define-key julia-repl-mode-map (kbd "C-c m") #'transient/julia-repl-mode))
#+end_src

Version using ~julia-snail~ to provide Julia REPL support in Emacs.
Note that ~julia-snail~ uses ~vterm~ so install that as well.

#+begin_src emacs-lisp
;; provides a Julia IDE
(use-package julia-snail
  ;; julia-mode is automatically installed by this package
  :after vterm
  :hook (julia-mode . julia-snail-mode)
  :config
  ;; enable Julia multimedia integration if images are supported
  (when (display-images-p)
    (setq julia-snail-multimedia-enable t))
  ;; major-mode specific transient for Julia buffers
  (transient-define-prefix transient/julia-snail-mode ()
    "`julia-snail-mode' commands."
    ["Julia Snail"
     ["Actions"
      ("z" "Connect" julia-snail)
      ("a" "Activate pkg" julia-snail-package-activate)
      ("d" "Documentation lookup" julia-snail-doc-lookup)
      ("m" "Toggle multimedia" julia-snail-multimedia-toggle-display-in-emacs)
      ("R" "Update module cache" julia-snail-update-module-cache)
      ]
     ["Send"
      ("k" "Buffer" julia-snail-send-buffer-file)
      ("c" "Top-level form" julia-snail-send-top-level-form)
      ("r" "Region" julia-snail-send-region)
      ("l" "Line" julia-snail-send-line)
      ("e" "DWIM" julia-snail-send-dwim)
      ]
     ]
    )
  (define-key julia-snail-mode-map (kbd "C-c m") #'transient/julia-snail-mode))
#+end_src

Version using ESS (not quite as well-integrated).

#+begin_src emacs-lisp
;; support for editing Julia buffers
(use-package julia-mode)

;; support for interacting with Julia buffers using ESS
(use-package ess
  :init (setq ess-eval-visibly 'nowait
              ;; ess-default-style 'RStudio
              ;; use Flymake only when buffer has an inferior process
              ess-use-flymake 'process)
  :config
  (setq inferior-julia-program (executable-find "julia"))
  (setq inferior-julia-args "--color=yes")
  (require 'ess-julia)
  ;; workaround for https://github.com/emacs-ess/ESS/issues/1151
  ;; ess-julia.el line 292 which is
  ;;   (ess-local-customize-alist     . ess-julia-customize-alist)
  ;; should be
  ;;   (ess-local-customize-alist     . 'ess-julia-customize-alist)
  (setf (alist-get 'ess-local-customize-alist ess-julia-customize-alist) '(quote ess-julia-customize-alist))
  (add-hook 'julia-mode-hook #'ess-julia-mode))
#+end_src
