#+title: Emacs configuration
#+author: matheuristic
#+options: h:4 num:t toc:t
#+property: header-args:emacs-lisp :exports code

* Notes

** Using this Emacs config

Clone this repository and initialize and update the submodules (see
"Cloning a Project with Submodules" under [[https://git-scm.com/book/en/v2/Git-Tools-Submodules][Submodules]] in [[https://git-scm.com/book/en/v2/Git-Tools-Submodules][Pro Git]]).

#+begin_example
$ git clone https://github.com/matheuristic/emacs-config.git
$ cd emacs-config
$ git submodule init
$ git submodule update
#+end_example

Make sure [[https://www.gnu.org/software/stow/][GNU Stow]] is installed. Run the following to create the
required directory structure in the user home directory and symlink
the individual files.

#+begin_example
$ stow -t $HOME --no-folding emacs
#+end_example

This configuration uses several external tools, which need to be
compiled, installed or configured. Search for headings with an
~external~ tag in this Org file, and follow the instructions there.

Note that Emacs versions ~27~ and newer also support [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG Base
Directory Specification]], so it is possible to use =~/.config/emacs= as
an alternative emacs directory. If desired, use the follow GNU Stow
command instead of the one above.

#+begin_example
$ mkdir -p $HOME/.config/emacs
$ stow -d ./emacs -t $HOME/.config/emacs --no-folding .emacs.d
#+end_example

** Generating the Emacs Lisp config files

The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] (Elisp) config files for Emacs can be generated with
~M-x org-babel-tangle~ or ~C-c C-v C-t~ while in this file's buffer.
Two config files will be created in the =emacs/.emacs.d= directory:
- ~early-init.el~: Early initialization file (Emacs 27+).
- ~init.el~: Main configuration file.

** Measuring startup times

Startup times can be measured in Linux using
#+begin_example
$ emacs -q --eval='(message "%s" (emacs-init-time))'
#+end_example
or in macOS using
#+begin_example
$ open -n /Applications/Emacs.app \
      --args -q --eval='(message "%s" (emacs-init-time))'
#+end_example

** Optimizing startup times

1. Install [[https://github.com/jschaf/esup][ESUP]] and use it to profile load times (~M-x esup~).
2. Defer loading of packages when possible, for example use-package's
   ~:defer N~ with ~N~ set to ~1~ (second) for higher priority
   packages and ~2~ for lower priority ones.
3. Avoid helper functions that can cause eager loads.

** Trying packages before installing them

[[https://github.com/larstvei/Try][Try]] allows trying of Emacs packages without installing them.

It can try packages that are singular Elisp files or packages on an
ELPA-compatible repository.

** Recompiling Elisp bytecode after upgrading Emacs to a new major version

When upgrading versions, rebuild Elisp bytecode in installed packages
via ~M-: (byte-recompile-directory package-user-dir nil 'force)~ as
the newer versions may include new features that speed up performance.

** Debugging Emacs Lisp code

Emacs comes with two Elisp debuggers.
- The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugger.html][debug.el]] Lisp debugger is a plain debugger that is triggered by
  when ~(debug)~ is evaluated, when entering functions that the user
  has specified via ~debug-on-entry~, or when changing variables that
  the user has specified using ~debug-on-variable-change~.
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Edebug]] is a source-level debugger which is triggered by when
  evaluating a function at point using ~C-u C-M-x~ (or evaluating
  ~(eval-defun t)~ when the point is on the function to be debugged).

*References*:
- Debugging Elisp · Endless Parentheses ([[https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html][part 1]], [[https://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html][part 2]])
- [[http://blog.binchen.org/posts/my-work-flow-to-debug-emacs-plugin.html][My work flow to debug emacs plugin | Chen's blog]]

** What to do when Emacs hangs and C-g does not work

Copied from this StackOverflow [[https://emacs.stackexchange.com/questions/21643/what-do-i-do-when-emacs-is-frozen][question]].

When Emacs stalls, usually ~C-g~ will quit the current activity and
make Emacs responsive again.

If that does not work, one solution is to try sending Emacs a
~SIGUSR2~ signal which tells Emacs to turn on ~debug-on-quit~.
See the Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html][documentation]] on ~debug-on-event~.

After Emacs recovers, it can be turned back off using
~M-x toggle-debug-on-quit~.

#+begin_example
$ pkill -SIGUSR2 -i emacs
#+end_example

If using ~emacsclient~, an additional command can be sent right
after the signal is sent to turn off ~debug-on-quit~.

#+begin_example
$ pkill -SIGUSR2 -i emacs ; emacsclient -e '(setq debug-on-quit nil)'
#+end_example

For more information, see the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Misc-Events.html#Misc-Events][official]] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#Error-Debugging][documentation]] (specifically on
the ~debug-on-event~ user option).

** Making TRAMP sessions more robust to SSH session hang events

When SSH sessions hang while a TRAMP connection is open, it can cause
Emacs to freeze (even if a ~SIGUSR2~ signal is sent to the process).

The [[https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html][TRAMP FAQ]] indicates to configure SSH to kill hangs due to network
connections by editing =~/.ssh/config= to include the following, which
works sometimes.

#+begin_example
Host *
     ServerAliveInterval 5
#+end_example

** Useful Emacs default bindings

*** Moving to beginning of line text (M-m)

There is a function ~back-to-indentation~ which moves the point to the
beginning of the line /text/, globally bound to ~M-m~ by default.

This is a useful complement to the standard ~C-a~ binding that moves
the point to the beginning of the line.

*** Jumping to function definitions (M-.)

Jumping to the definition of a function under point can be done by
calling ~xref-find-definitions~ interactively, which is bound to ~M-.~
by default.

*** Backtracking through a chain of jumps (M-,)

Backtracking through a chain of jumps can be done by calling
~xref-pop-marker-stack~ which is bound to ~M-,~ by default (this only
works for jumps that push the jump origin onto the marker stack, which
~xref-find-definitions~ does).

To modify some function ~name-of-some-function~ so that it pushes the
current location onto marker stack when run, ~advice-add~ can be
utilized as follows.

#+begin_example
(advice-add #'name-of-some-function :before #'xref-push-marker-stack))
#+end_example

** Random useful Emacs links

Literate configs, package lists, and so on and so forth.

- Nice [[https://leanpub.com/lit-config][intro]] to literate configuration files.
- [[https://github.com/caisah/emacs.dz][Awesome emacs config files]].
- [[https://so.nwalsh.com/2020/02/29/dot-emacs][My .emacs | SO… A WEBLOG BY NORM]] and [[https://so.nwalsh.com/2020/02/29-dotfiles][Dotfiles | SO… A WEBLOG BY NORM]].
- [[https://uwabami.github.io/cc-env/Emacs.html][Emacs の設定 | Youhei SASAKI’s official site]].
- [[https://github.com/grettke/lolsmacs][GitHub - grettke/lolsmacs: The Law Of Least Surprise Lattice For Emacs.]]
- [[https://github.com/m-cat/init.el][GitHub - m-cat/init.el: My emacs config file]]
- [[https://www.bytedude.com/useful-emacs-shortcuts/][Useful Emacs Keybindings | Bytedude]]
- [[https://github.com/emacs-tw/awesome-emacs][GitHub - emacs-tw/awesome-emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Change-Log-Commands.html][Change Log Commands - GNU Emacs Manual]]
- [[https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform][Why You Should Buy Into the Emacs Platform]]
- [[https://emacs.stackexchange.com/questions/12212/how-to-type-the-password-of-a-gpg-file-only-when-opening-it/12213#12213][encryption - How to type the password of a .gpg file only when opening it]]
- [[https://colinxy.github.io/software-installation/2016/09/24/emacs25-easypg-issue.html][Emacs 25 EasyPG Issue]]
- [[https://emacsnotes.wordpress.com/][Emacs Notes – GNU Emacs, for Ordinary Folks]]

** Useful Emacs Lisp references

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference Manual]]
- [[http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/][Pattern Matching in Emacs Lisp]]
- [[https://github.com/alphapapa/emacs-package-dev-handbook][GitHub - alphapapa/emacs-package-dev-handbook: An Emacs package development handbook]]

** Useful Org-mode references

- [[https://karl-voit.at/2019/10/26/all-things-org/][All Things Org Mode: PIM, Scientific Writing, Presentation, Programming]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Note Workflow]]

** Emacs Lisp reverse dependency search

To find all loaded libraries that depend on a given library, evaluate
the following Elisp code.

#+begin_example
(require 'loadhist)
(file-dependents (feature-file 'some-feature))
#+end_example

As an example, the following lists all loaded libraries that use the
deprecated ~cl~ library.

#+begin_example
(file-dependents (feature-file 'cl))
#+end_example

* Tags

- ~early~: Configuration code (not boilerplate comments) that should
  be loaded in ~early-init.el~ to optimize startup time.
- ~elpa~: Uses a package from GNU ELPA.
- ~external~: Configuration code in the section uses external tools
  that are not typically packaged with the default userland on Linux
  and BSD systems (including macOS), and which need to be installed at
  the system-level outside of the Emacs ~package.el~ mechanisms. Also
  includes Elisp scripts that need to be downloaded manually.
- ~transient~: Enables, creates or modifies [[https://github.com/magit/transient][Transient]] definitions.
- ~melpa~: Uses a package from MELPA.
- ~semiearly~: Configuration that should be loaded early in ~init.el~
  because other configuration code depend on them.
- ~workaround~: Section contains a workaround for Emacs or package
  bug, which can be removed if and when the issues are fixed upstream.

* Front matter

** Header and lexical binding

File header comment indicating the filename, along with declaring any file-specific variables.
One file-specific variable that should generally be set is enabling ~lexical-binding~ ([[https://nullprogram.com/blog/2016/12/22/][link]]), which has the following benefits:
- Closures.
- Better performance.
- Less bugs.

#+name: generate-header
#+begin_src emacs-lisp
(concat ";;; " feature ".el --- " summary " -*- lexical-binding: t; -*-")
#+end_src

** File generation timestamp

Tangled initialization files are timestamped to track when they were last generated.

#+name: generate-timestamp
#+begin_src emacs-lisp
(concat ";; Generated: " (current-time-string))
#+end_src

** Author info

Author information and where to get the newest version of this configuration.

#+name: author-info
#+begin_src emacs-lisp
;; Author: matheuristic
;; URL: https://github.com/matheuristic/emacs-config
#+end_src

** File commentary

File descriptions.

*** early-init

#+name: file-commentary-early-init
#+begin_src emacs-lisp
;; Emacas early initialization configuration file, symlink or copy to
;; ~/.emacs.d/early-init.el or $XDG_CONFIG_HOME/.emacs.d/early-init.el

;; In Emacs 27+, the sequence of initialization is
;; 1. early-init.el
;; 2. package.el
;; 3. init.el

;; early-init.el is run before UI elements are rendered,
;; so it is best to configure UI elements here rather than init.el
#+end_src

*** init

#+name: file-commentary-init
#+begin_src emacs-lisp
;; Emacs initialization configuration file, symlink or copy to
;; ~/.emacs.d/init.el or $XDG_CONFIG_HOME/.emacs.d/init.el

;; In Emacs 27+, the sequence of initialization is
;; 1. early-init.el
;; 2. package.el
;; 3. init.el
#+end_src

* Backward compatibility

In Emacs versions before 27, we should load the ~early-init.el~ file explicitly in ~init.el~.

#+name: early-init-pre-27
#+begin_src emacs-lisp
;; backwards-compatibility code for Emacs versions <27
(when (version< emacs-version "27")
  ;; load early-initialization file ~/.emacs.d/early-init.el
  ;; Emacs 27+ automatically loads this file before rendering UI elements
  (let ((local-f (expand-file-name "early-init.el" user-emacs-directory)))
    (when (file-exists-p local-f) (load-file local-f))))
#+end_src

* Optimizations

** Startup optimizations                                              :early:

Optimizations for improving startup time:
- Increase garbage collection threshold from the default (~800~ kb) to
  ~128~ MB and revert it after initialization.
- Set ~file-name-handler-alist~ to ~nil~ as it is always scanned
  whenever files are loaded and revert it after initialization.
  This specifies special I/O handlers for files based on file name.
  Startup files are always local ~*.el~ files, so no special handlers
  are needed for them.
- Don't load installed packages automatically.
  Load them manually in the config.

#+name: startup-optimizations
#+begin_src emacs-lisp
;; optimizations for reducing startup time (reverted later)
;; * file-name-handler-alist -> nil as it is scanned when files are loaded
;; * increase garbage collection threshold
;; * increase max bytes read from a sub-process in a single op (Emacs 27+)
(setq file-name-handler-alist-orig file-name-handler-alist
      gc-cons-threshold-orig gc-cons-threshold
      file-name-handler-alist nil ;; no special file handling during init
      gc-cons-threshold 134217728) ;; 128MB in bytes, default is 800k

;; revert optimizations after initialization
(add-hook 'after-init-hook
          (lambda ()
            (setq file-name-handler-alist file-name-handler-alist-orig)
            (setq gc-cons-threshold gc-cons-threshold-orig))
          t)

;; disable automatic activation of installed packages
(setq package-enable-at-startup nil)
#+end_src

** I/O optimizations                                                  :early:

Increase the maximum bytes read from a sub-process in a single file
operation from the default (~4096~ bytes) to ~1~ MB ([[https://github.com/emacs-mirror/emacs/blob/master/etc/NEWS.27#L3212-L3217][Emacs 27+]]).

#+name: io-optimizations
#+begin_src emacs-lisp
;; optimizations for improving I/O performance
;; * increase max bytes read from a sub-process in a single op (Emacs 27+)
(when (boundp 'read-process-output-max)
  (setq read-process-output-max 1048576)) ;; 1MB in bytes, default 4096 bytes
#+end_src

* Customize file

Emacs has a text GUI interface for customizing the editor, and
settings configured with this interface are saved in ~custom-file~.
To avoid the ~M-x customize~ settings clobbering the tangled
initialization files (which it does by default), set ~custom-file~ to
to something that is not the Emacs init file.

#+name: custom-file
#+begin_src emacs-lisp
;; store Customize settings in a separate file, custom.el
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(add-hook 'after-init-hook
          (load custom-file 'noerror))
#+end_src

* Package management

** Prefer newer Elisp files                                           :early:

When multiple versions of an Elisp file exist (compiled and
uncompiled), load the newest.

#+name: load-prefer-newer
#+begin_src emacs-lisp
;; when multiple versions of a package are installed, load the newest
(setq load-prefer-newer t)
#+end_src

** Local packages                                                     :early:

Add the ~lisp/~ and ~site-lisp/~ directories in the user Emacs
directory to the load path to facilitate loading of user maintained
and local copies of third-party packages.

This can be done in ~early-init.el~ so that locally maintained
decoration and theming code can be loaded there.

#+name: add-dirs-to-load-path
#+begin_src emacs-lisp
;; add user packages in lisp/ to load path
(defvar lisp-dir (expand-file-name "lisp" user-emacs-directory))
(unless (file-exists-p lisp-dir) (make-directory lisp-dir))
(add-to-list 'load-path lisp-dir)
(dolist (project (directory-files lisp-dir t "\\w+"))
  (when (file-directory-p project) (add-to-list 'load-path project)))

;; add third-party packages in site-lisp/ and its subdirs to load path
(defvar site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory))
(unless (file-exists-p site-lisp-dir) (make-directory site-lisp-dir))
(add-to-list 'load-path site-lisp-dir)
(dolist (project (directory-files site-lisp-dir t "\\w+"))
  (when (file-directory-p project) (add-to-list 'load-path project)))
#+end_src

** ELPA-compatible package repositories

Set ELPA-compatible repositories to fetch and install packages from,
and their priorities.
When the packages with the same name exist on multiple repositories,
the version on the repository with the highest priority is preferred.

The following package repositories are the most well-known:
- [[https://elpa.gnu.org/][GNU Emacs Lisp Package Archive]] (ELPA).
  This is the default package repository for Emacs.
- [[https://melpa.org/][Milkypostman’s Emacs Lisp Package Archive]] (MELPA).
  This is an unofficial package repository containing a large
  selection of packages.
  Packages in this repository are vetted at time of initial inclusion,
  which are automatically rebuilt on source updates.
  Does not contain some packages from [[https://www.emacswiki.org/][EmacsWiki]] due to [[https://github.com/melpa/melpa/pull/5008][security risks]]
  (some are in MELPA because they were mirrored on Github)
- [[https://stable.melpa.org/][Milkypostman’s Emacs Lisp Package Archive Stable]] (MELPA Stable).
  This is a version of MELPA that only builds tagged releases.
  Has less packages compared to MELPA.
- [[https://orgmode.org/elpa.html][Org Emacs Lisp Package Archive]] (Org).
  This is the official [[https://orgmode.org/][Org]] package repository that contains the newest
  version of ~org~ (also in ELPA), along with ~org-plus-contrib~ that
  contains all contributed files (not in ELPA).

Only ELPA and MELPA are used here so the latest package versions are
installed, and because there isn't generally a need for all the
contributed files for Org.

#+name: elpa-repositories
#+begin_src emacs-lisp
;; set ELPA-compatible package repositories and their priorities
(setq package-archives '(("GNU"   . "https://elpa.gnu.org/packages/")
                         ("MELPA" . "https://melpa.org/packages/"))
      package-archive-priorities '(("GNU"   . 1)
                                   ("MELPA" . 2)))
#+end_src

** Package initialization

Initialize package loading support.
Disable auto-package loading and load packages explicitly for faster initialization times.

#+name: package-init
#+begin_src emacs-lisp
;; initialize package.el
(require 'package)
(package-initialize)
#+end_src

** use-package                                                        :melpa:

Download the [[https://github.com/jwiegley/use-package][use-package]] if not already on the system.
Load it, which will provide configuration macros for installing,
loading and configuring packages.
Also load its subpackage [[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]], which provides macros for key
bindings.

#+name: use-package
#+begin_src emacs-lisp
;; bootstrap use-package, provides configuration macros
;; for info, see https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; preload use-package and bind-key packages
;; configure imenu support for the `require' and `use-package' keywords
(eval-when-compile
  (setq use-package-enable-imenu-support t)
  (require 'use-package)
  (require 'bind-key)
  (setq use-package-always-ensure t)) ;; default to ":ensure t"
#+end_src

* Environment variables                                     :semiearly:melpa:

Copy the environment variables over from the login shell.

#+name: environment-variables
#+begin_src emacs-lisp
;; copy environment variables from shell
(use-package exec-path-from-shell
  :init (exec-path-from-shell-initialize))
#+end_src

* Backend and frontend frameworks for building user interfaces

** Flexible minibuffer completion style

Emacs 27+ added a [[https://github.com/emacs-mirror/emacs/commit/fabfb54d1f60cf90e72b1efaabfbefbe877e076a][flexible completion]] similar to [[https://github.com/lewang/flx][flx]] for ~ido~.

#+name: flex-minibuffer-completion-style
#+begin_src emacs-lisp
;; enable flex completion on Emacs 27+
(when (not (version< emacs-version "27"))
  (with-eval-after-load 'minibuffer
    (add-to-list 'completion-styles 'flex t)))
#+end_src

** Helm                                                               :melpa:

[[https://github.com/emacs-helm/helm][Helm]] is a framework for incremental completions and narrowing
selections, in other words an alternative for Icomplete.

It is much heavier but more featureful.

In most instances, use only this or Icomplete but not both.

*Configuration*:
- Rebind standard Emacs commands that use completion like ~find-files~
  to helm equivalents.
- ~<tab>~ key triggers completion rather than action, which is closer
  to standard Emacs minibuffer behavior and that of most shells.

#+name: helm
#+begin_src emacs-lisp
(use-package helm
  :init
  (setq helm-allow-mouse t
        helm-command-prefix-key "C-c C-M-h"
        helm-prevent-escaping-from-minibuffer nil
        ;; show helm completion buffer using default display function
        ;; instead of always opening a new frame for it
        helm-show-completion-display-function #'helm-show-completion-default-display-function
        ;; show helm buffers by splitting current window instead of
        ;; taking over another window in multi-window layout
        helm-split-window-inside-p t)
  (when (version< emacs-version "27")
    (add-to-list 'completion-styles 'helm-flex t))
  :config
  (require 'helm-config)
  (helm-mode 1)
  (helm-autoresize-mode 1)
  ;; bind over the standard Emacs commands
  (define-key global-map [remap find-file] 'helm-find-files)
  (define-key global-map [remap occur] 'helm-occur)
  ;; (define-key global-map [remap list-buffers] 'helm-buffers-list)
  ;; (define-key global-map [remap switch-to-buffer] 'helm-mini)
  (define-key global-map [remap switch-to-buffer] 'helm-buffers-list)
  (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
  (define-key global-map [remap execute-extended-command] 'helm-M-x)
  (define-key global-map [remap apropos-command] 'helm-apropos)
  ;; make <tab> only complete names during helm completion, instead of
  ;; default behavior that creates new buffer on the second press
  ;; after which a third press kills the newly created buffer
  (setq helm-ff-kill-or-find-buffer-fname-fn #'ignore)
  (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
  (define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") #'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-z") #'helm-select-action))
#+end_src

*** Use icons in Helm                                                 :melpa:

[[https://github.com/yyoncho/helm-icons][helm-icons]] shows file icons using those from Treemacs when using
file-related Helm commands.

#+name: helm-icons
#+begin_src emacs-lisp
(use-package helm-icons
  :after helm
  :config (helm-icons-enable))
#+end_src

** Text completion with Company                                       :melpa:

[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs that supports
pluggable back-ends and front-ends for retrieving and displaying
completion candidates.
Many other Emacs packages support this.

This can get in the way for non-programming modes, so it is
enabled by default only in programming modes.

#+name: company
#+begin_src emacs-lisp
;; text completion framework
(use-package company
  :defer t
  :init (with-eval-after-load 'prog-mode
          (add-hook 'prog-mode-hook 'company-mode))
  :config
  (setq company-dabbrev-downcase nil
        company-idle-delay 0.5
        company-minimum-prefix-length 2
        company-selection-wrap-around t
        company-show-numbers t ;; use M-<num> to directly choose completion
        company-tooltip-align-annotations t))
#+end_src

** Edit-indirect                                                      :melpa:

Backend package that allows editing regions in a separate buffer, much like
how ~C-c '~ works in Org source blocks.
This is used by other packages, like ~markdown-mode~.

#+name: edit-indirect
#+begin_src emacs-lisp
;; edit regions in separate buffers, used by other packages like markdown-mode
(use-package edit-indirect)
#+end_src

** System notifications with alert                                    :melpa:

[[https://github.com/jwiegley/alert][Alert]] is a [[http://growl.info/][Growl]]-like notification backend for Emacs.

#+name: alert
#+begin_src emacs-lisp
;; notifications backend
(use-package alert
  :config (setq alert-default-style
                (cond
                 ;; use AppleScript for macOS notifications
                 ((eq system-type 'darwin) 'osx-notifier)
                 ;; use libnotify for Linux notifications if avilable
                 ((and (eq system-type 'gnu/linux)
                       (executable-find "notify-send"))
                  'libnotify)
                 ;; otherwise print message to minibuffer
                 (t 'message))))
#+end_src

* Custom variables and utility functions

Various utility functions used in multiple config locations, usually
non-interactive and added to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html][hooks]] or as [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][advice]] to other functions,
and the custom variables that get used by them and/or other
specific-use functions.

** Custom variables

*** System command for opening paths and URLS externally

~my-system-open-command~ should be set to the system command for
opening generic file paths and URLS, for example ~xdg-open~ in Linux
and ~open~ in macOS.

#+name: my-system-open-command
#+begin_src emacs-lisp
(defcustom my-system-open-command "xdg-open"
  "System command to open file/URL according to preferred app by filetype.
Usually \"xdg-open\" on Linux and \"open\" on Mac."
  :type 'string
  :group 'convenience)
#+end_src

** Utility functions

*** After jump context actions

Define a function that performs a laundry list of useful
context-specific actions useful after jumping to a new location.

Some examples of these context actions:
- Run ~org-show-context~ after jumping to an Org buffer location.

#+name: my-after-jump-context-actions
#+begin_src emacs-lisp
(defun my-after-jump-context-actions (&rest _)
  "Useful context actions to perform after jumping to a new location.
This is meant for use with `advice-add' with the :after
combinator.

One useful context action example is to run `org-show-context'
after jumping to an Org buffer location to ensure the region
around the new point location is visible."
  (cond ((eq major-mode 'org-mode) (org-show-context))))
#+end_src

*** Pulse the current line

Helper function for pulsing the current line. Adapted from [[https://protesilaos.com/dotemacs/#h:6bbc41d6-da7c-4301-84c6-c5887c29283f][here]].

#+name: my-pulse-line
#+begin_src emacs-lisp
;; helper function for pulsing the current line, adapted from
;; https://protesilaos.com/dotemacs/#h:6bbc41d6-da7c-4301-84c6-c5887c29283f
(defun my-pulse-line (&rest _)
    "Pulse the current line .
If the point is at the newline at the end of the buffer, pulse
the line before that. Additionally, the current line is not pulsed
if the point is in the minibuffer."
    (unless (minibufferp)
      (let ((start (if (and (eobp)
                            (= (point) (line-beginning-position)))
                       (line-beginning-position 0)
                     (line-beginning-position)))
            (end (line-beginning-position 2))
            (pulse-delay .1))
        (pulse-momentary-highlight-region start end nil))))
#+end_src

*** Save and bury buffer

Save current buffer and bury it.

#+name: my-save-and-bury-buffer
#+begin_src emacs-lisp
(defun my-save-and-bury-buffer (&rest _)
  "Save and bury the current buffer."
  (save-buffer)
  (bury-buffer))
#+end_src

* Backups

Backup files to the =~/.backup/= directory, keeping only the newest three versions.

#+name: backup-files-directory
#+begin_src emacs-lisp
;; backup files to ~/.backup/
(let ((backup-dir (expand-file-name "~/.backup/")))
  (when (not (file-directory-p backup-dir))
    (make-directory backup-dir t))
  (setq backup-directory-alist `(("." . ,backup-dir))
        version-control t ;; use version numbers for backups
        kept-new-versions 3 ;; number of newest versions to keep
        kept-old-versions 0 ;; number of oldest versions to keep
        delete-old-versions t ;; don't ask before deleting old backups
        backup-by-copying t)) ;; backup by copying instead of renaming
#+end_src

* Bookmarks and history

** Recent files

The built in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/recentf.el][recentf]] provides functionality to track and list recently
opened files.

#+name: recentf
#+begin_src emacs-lisp
;; recently opened files
(setq recentf-max-menu-items 10
      recentf-max-saved-items 100
      recentf-auto-cleanup 'mode) ;; clean up recent list when turning on mode
(recentf-mode 1)
;; exclude source code files in installed packages from ELPA-compatible repos
(add-to-list 'recentf-exclude
             (concat "^" (expand-file-name "elpa/" user-emacs-directory)))
;; exclude files opened with SSH so TRAMP is not spammed with stat calls
;; exclude files opened as the superuser with su or sudo
(add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?:")
;; exclude files from /var/folder as these are temp files
(add-to-list 'recentf-exclude "^/var/folders")
;; exclude files in `org-agenda-files' and `notdeft-directories'
;; these files are quickly accessible from their respective tooling
(add-hook 'after-init-hook
          (lambda ()
            (dolist (file-list (list org-agenda-files
                                     notdeft-directories))
              (dolist (exclude-file file-list)
                (add-to-list 'recentf-exclude (concat "^" exclude-file))))))

;; binding for recentf, use Helm version if available
(global-set-key (kbd "C-c C-M-r") #'recentf-open-files)
#+end_src

*** Helm recentf

Prefer ~helm-recentf~ to ~recentf-open-files~ for the main binding.

#+name: helm-recentf
#+begin_src emacs-lisp
;; prefer helm-recentf to recentf-open-files
(add-hook 'after-init-hook
          (lambda ()
            (when (featurep 'helm)
              (define-key global-map [remap recentf-open-files]
                'helm-recentf))))
#+end_src

** Save location in file

Enable [[https://www.emacswiki.org/emacs/SavePlace][saveplace]] to automatically save location in file,
so that the next time the file is visited the point will
automatically go to the last place it was at during the
previous visit.

#+name: saveplace
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** Save minibuffer and other history

Enable [[https://github.com/emacs-mirror/emacs/blob/master/lisp/savehist.el][savehist]] to automatically save minibuffer command history,
which can be leverage by different completion packages.
Other history (like search history, registers, the kill ring, and the
macro ring) can also be saved.
The default history file location is ~history~ in
the ~user-emacs-directory~ directory, and can be changed by setting
the ~savehist-file~ variable. The number of items saved is determined
by the ~history-length~ variable.

#+name: savehist
#+begin_src emacs-lisp
;; save minibuffer and other history across sessions
;; don't persist kill-ring if in the habit of copy-pasting passwords
(setq history-delete-duplicates t
      history-length 100
      savehist-additional-variables '(Info-history-list
                                      ;; kill-ring
                                      kmacro-ring
                                      regexp-search-ring
                                      register-alist
                                      last-kbd-macro
                                      search-ring
                                      shell-command-history))

;; enable save history mode
(savehist-mode 1)
#+end_src

* Buffers, windows, frames, workspaces

** Buffer management

*** Protect scratch and message buffers

Protect the ~*scratch*~ and ~*Message*~ buffers, locking them to make
them unkillable.

#+name: protect-buffers
#+begin_src emacs-lisp
;; protect these buffers, locking them to make them unkillable
(dolist (buf '("*scratch*" "*Messages*"))
  (with-current-buffer buf
    (emacs-lock-mode 'kill)))
#+end_src

*** Advanced buffer management with Ibuffer

Use [[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] to manage buffers.

#+name: ibuffer
#+begin_src emacs-lisp
;; advanced buffer management with Ibuffer
(add-hook 'ibuffer-mode-hook
          (lambda ()
            ;; refresh buffer after interactive commands
            ;; default to first saved group
            (progn (ibuffer-auto-mode 1)
                   (when ibuffer-saved-filter-groups
                     (ibuffer-switch-to-saved-filter-groups
                      (car (car ibuffer-saved-filter-groups)))))))
(setq ibuffer-expert t ;; skip extraneous confirm messages
      ibuffer-show-empty-filter-groups nil)
(global-set-key (kbd "C-x C-b") #'ibuffer)
#+end_src

**** Ibuffer filter groups

Set default rules for grouping files in Ibuffer.

#+name: ibuffer-filter-groups
#+begin_src emacs-lisp
;; configure Ibuffer filter groups
(with-eval-after-load 'ibuffer
  (setq ibuffer-saved-filter-groups
        ;; files are grouped by the first matching filter group in the list
        '(("default"
           ("Emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")))
           ("Web" (or (mode . eww-mode)
                      (mode . eww-bookmark-mode)))
           ("Org" (or (derived-mode . org-mode)
                      (mode . org-agenda-mode)))
           ("Text" (derived-mode . text-mode))
           ("Shell" (or (mode . eshell-mode)
                        (mode . shell-mode)
                        (mode . term-mode)
                        (name . "^vterm .*")))
           ("Programming" (derived-mode . prog-mode))
           ("Fundamental" (mode . fundamental-mode))
           ("Dired" (mode . dired-mode))
           ("Magit" (or (name . "\*magit.*\\*")
                        (mode . magit-mode)))
           ("Help" (or (derived-mode . apropos-mode)
                       (derived-mode . help-mode)
                       (derived-mode . Info-mode)))))))
#+end_src

**** Group by version-controlled project in Ibuffer                   :melpa:

Add support for grouping files by version-controlled project ([[https://github.com/purcell/ibuffer-vc][link]]).

#+name: ibuffer-vc
#+begin_src emacs-lisp
;; build VC project ibuffer filter groups
(use-package ibuffer-vc
  :after ibuffer
  :bind (:map ibuffer-mode-map
         ("/ V" . ibuffer-vc-set-filter-groups-by-vc-root)))
#+end_src

**** Ibuffer icons                                                    :melpa:

Add file icons next to the file names.
Uses file icon API exposed by the ~all-the-icons~ package.

#+name: all-the-icons-ibuffer
#+begin_src emacs-lisp
;; use font icons in Ibuffer
(when (display-graphic-p)
  (use-package all-the-icons-ibuffer
    :after (all-the-icons ibuffer)
    :config (all-the-icons-ibuffer-mode 1)))
#+end_src

*** Fast buffer switching with nswbuff                                :melpa:

[[https://github.com/joostkremers/nswbuff][nswbuff]] allows for quick switching between open buffers.

It can be configured to integrate with Projectile to only switch
between between those buffers associated with the current project.

#+name: nswbuff
#+begin_src emacs-lisp
;; quick buffer switching (configured to be within a project)
(use-package nswbuff
  :after projectile
  :bind (("<C-tab>" . nswbuff-switch-to-next-buffer)
         ("<C-S-tab>" . nswbuff-switch-to-previous-buffer))
  :init
  (setq nswbuff-buffer-list-function #'nswbuff-projectile-buffer-list
        nswbuff-clear-delay 2
        nswbuff-display-intermediate-buffers t
        ;; exclude all internal buffers from the nswbuff switch list
        nswbuff-exclude-buffer-regexps '("^ "
                                         "^\\*.*\\*"
                                         "org-src-fontification")
        nswbuff-exclude-mode-regexp (mapconcat
                                     'identity
                                     '("dired-mode"
                                       "gnus-mode")
                                     "\\|")
        nswbuff-start-with-current-centered nil)
  :config
  ;; unbind C-tab in org-mode to not conflict with nswbuff global binding
  (with-eval-after-load 'org
    (unbind-key "<C-tab>" org-mode-map)))
#+end_src

** Window management

*** Traverse window configuration history using Winner mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][Winner mode]] allows the traversal of window configuration history using
~C-c <left>~ (undo) and ~C-c <right>~ (redo).

#+name: winner-mode
#+begin_src emacs-lisp
;; traverse window config changes, C-c left/right to undo/redo
;; uncomment to not bind C-c left/right keys by default
;; (setq winner-dont-bind-my-keys t)
;; enable winner-mode at end of initialization
(add-hook 'after-init-hook #'winner-mode)
#+end_src

*** popwin for automatic management of special buffers                :melpa:

[[https://github.com/emacsorphanage/popwin][popwin]] configures Emacs to show special buffers like ~*Help*~,
~*Completions*~ and so on in a window that automatically gets closed
on ~C-g~ or selection of another window.

It can also be used to popup temporary buffers, and that functionality
can be accessed through ~popwin:keymap~ which is configured to
the ~C-z~ prefix (use ~C-x C-z~ to call ~suspend-frame~ instead).

#+name: popwin
#+begin_src emacs-lisp
;; popup window manager, also auto-closes special buffers like
;; *compilation* and *Completions*
(use-package popwin
  :config
  (popwin-mode 1)
  (global-set-key (kbd "C-z") popwin:keymap))
#+end_src

*** ace-window

[[https://github.com/abo-abo/ace-window][ace-window]] provides window navigation and manipulation functions.

#+name: ace-window
#+begin_src emacs-lisp
;; window navigation and management
(use-package ace-window
  :config
  (setq aw-background t
        aw-char-position 'left
        aw-ignore-current nil
        aw-scope 'frame)
  (global-set-key (kbd "M-o") #'ace-window))
#+end_src

*** Rotate window buffers

Helper function to rotate the buffers in the current frame's windows.
This rotation preserves the window configuration but shifts the
buffers displayed in each window.

#+name: my-rotate-window-buffers
#+begin_src emacs-lisp
(defun my-rotate-window-buffers (rotations)
  "Rotate buffers in the windows of the current frame ROTATIONS times.
ROTATIONS can be negative, which rotates in the opposite direction."
  (interactive "P")
  (let* (;; windows that do not contain transient buffers
         (windows (seq-filter (lambda (w)
                                (not
                                 (string= (buffer-name
                                           (window-buffer w))
                                          transient--buffer-name)))
                              (window-list)))
         (num-windows (length windows)))
    (if (not (> num-windows 1))
        (message "Only one window in the frame. Nothing to rotate.")
      (let* (;; original window order properties
             (window-props (mapcar (lambda (w)
                                     `(:buffer ,(window-buffer w)
                                       :start ,(window-start w)
                                       :point ,(window-point w)))
                                   windows))
             ;; new window order after rotation
             (window-moves (mapcar
                            (lambda (k)
                              (elt windows (mod (+ k rotations)
                                                num-windows)))
                            (number-sequence 0 (1- num-windows))))
             ;; create alist for easier looping later
             (wins-props (cl-mapcar #'cons window-moves window-props)))
        ;; iteratively assign orig window props in new window order
        (dolist (w-p wins-props)
          (let ((win (car w-p))
                (prop (cdr w-p)))
            (set-window-buffer-start-and-point
             win
             (plist-get prop :buffer)
             (plist-get prop :start)
             (plist-get prop :point))))))))

(defun my-rotate-buffers-forward ()
  "Rotate buffers in current frame's windows forward."
  (interactive)
  (my-rotate-window-buffers 1))
(defun my-rotate-buffers-backward ()
  "Rotate buffers in current frame's windows backward."
  (interactive)
  (my-rotate-window-buffers -1))

;; bind "C-x 4 [" and "C-x 4 ]" to rotation of window buffers
(global-set-key (kbd "C-x 4 [") #'my-rotate-buffers-backward)
(global-set-key (kbd "C-x 4 ]") #'my-rotate-buffers-forward)
#+end_src

** Frame management

*** transpose-frame for rotating frames                               :melpa:

[[https://github.com/emacsorphanage/transpose-frame][transpose-frame]] allows for the rotation of the frame to get a new
window layout that is rotated from the original.

See the package Elisp code for more details.

#+name: transpose-frame
#+begin_src emacs-lisp
(use-package transpose-frame
  :bind (("C-x 5 [" . rotate-frame-anticlockwise)
         ("C-x 5 ]" . rotate-frame-clockwise)))
#+end_src

** Workspace management

*** Desktop.el for saving and restoring sessions

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html][desktop.el]] provides capabilities for saving and restoring sessions
manually and automatically.

*Configuration*:
- Enable ~desktop-save-mode~ which automatically saves on exit and
  loads on entry, but set ~desktop-auto-save-timeout~ to disable
  default behavior of auto-saving on a timer.

#+name: desktop
#+begin_src emacs-lisp
;; settings for desktop.el
;; desktops are saved to ~/.emacs.d/.emacs.desktop
;; and locks are saved to ~/.emacs.d/.emacs.desktop.lock
;; - enable desktop-save-mode to save on exit and load on entry;
;;   this is added to `after-init-hook' to avoid a prompt on startup
;;   warning about the desktop file being in use that occurs when
;;   `desktop-save-mode' is enabled before initialization is done,
;;   even though the Emacs process PID is the owner of the lock file;
;;   might be specific to emacs-mac port
;; - set `desktop-autosave-timeout' to nil to disable timer auto-saves
;; - restore frames to their original displays
;; - don't re-use frames
(setq desktop-auto-save-timeout nil
      desktop-restore-in-current-display nil
      desktop-restore-reuses-frames t)
(add-hook 'after-init-hook (lambda () (desktop-save-mode 1)))
#+end_src

* Command-line interaction

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] is an Elisp shell-like command interpreter that can be used in place of ~term-mode~ and ~bash~.
[[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][More information]] on Eshell usage.

*Customizations*:
- Increase the size of the history input ring from ~128~ to ~1024~.
- Don't review quick commands (those that have no output and returns a
  ~0~ exit code indicating success).
- Have space go to the end of the buffer when it is visible.
- Have point jump to the beginning of the last command after each
  command.
- Load [[https://github.com/emacs-mirror/emacs/blob/master/lisp/eshell/em-smart.el][em-smart]] which adds some quality of life improvements.

*Usage note*:
- When searching history using the beginning of a command,
  ~eshell-previous-matching-input-from-input~ (~UP~), ~M-p~ or ~C-c
  M-r~ is much friendlier than ~eshell-previous-matching-input~
  (~M-r~).
  Type the first few characters of the command, and press
  the ~UP~ or ~M-p~ key repeatedly to cycle only through the matching
  commands in the history.
  Copied from StackOverflow answer [[https://stackoverflow.com/questions/13009908/eshell-search-history][here]].

#+name: eshell
#+begin_src emacs-lisp
(setq eshell-history-size 1024
      eshell-review-quick-commands nil
      eshell-smart-space-goes-to-end t
      eshell-where-to-jump 'begin)
(require 'em-smart)
#+end_src

*** Run visual commands in a separate term buffers

Some "visual" commands present and update a full-screen interface
instead of streaming output to stdout.
Run these commands inside a separate term buffer instead.

#+name: eshell-visual-commands
#+begin_src emacs-lisp
;; enable Eshell to spawn visual commands inside
(require 'em-term)
;; run visual commands and subcommands in term sessions
(dolist (cmd '("htop" "lftp" "ssh" "vi" "vim" "watch"))
  (add-to-list 'eshell-visual-commands cmd))
(dolist (subcmd '(("tail" "-f" "-F")
                  ("sudo" "vi" "vim")
                  ("vagrant" "ssh")))
  (add-to-list 'eshell-visual-subcommands subcmd))
#+end_src

*** Disabling Git pagers so Git can be used in Eshell

#+name: eshell-disable-git-pager
#+begin_src emacs-lisp
;; ensure Git does not launch a pager for easier usage with eshell
(setenv "GIT_PAGER" "")
#+end_src

*** Named Eshell buffers for easier management of multiple Eshell buffers

Provide a binding to a wrapper function that spawns or switches to a
named Eshell buffer.
This allows for easier access to and management of multiple Eshell
buffers.

#+name: eshell-named-buffers
#+begin_src emacs-lisp
;; adapted from https://arte.ebrahimi.org/blog/named-eshell-buffers
(defun my-eshell-with-name ()
  "Prompts for the name of a eshell buffer to open or switch to.
If the NAME given at the prompt is not an existing eshell buffer,
a new one named *eshell*<NAME> will be opened. If no name is
provided, the default interactive `eshell' command is run."
  (interactive)
  (let* ((my-es-bufs (seq-filter
                      (lambda (buf)
                        (string-match-p "*eshell*" (buffer-name buf)))
                      (buffer-list)))
         (my-es-buf-name-list (mapcar #'buffer-name my-es-bufs))
         (my-es-buf-name (completing-read
                          "Eshell Buffer : " my-es-buf-name-list)))
    (if (member my-es-buf-name (mapcar #'buffer-name (buffer-list)))
        (switch-to-buffer my-es-buf-name)
      (if (string= "" my-es-buf-name)
          (eshell)
        (progn
          (eshell 42)
          (rename-buffer (concat "*eshell*<" my-es-buf-name ">")))))))
#+end_src

*** Eshell fish-like history autosuggestions                          :melpa:

[[https://github.com/dieggsy/esh-autosuggest][esh-autosuggest]] provides [[https://fishshell.com/][fish]]-like history autosuggestions in Eshell.

When an autosuggestion is displayed, press ~<right>~ or ~C-f~ to fully
autocomplete, or ~M-<right>~ or ~M-f~ to autocomplete just the next word.

#+name: esh-autosuggest
#+begin_src emacs-lisp
;; history autosuggestions
;; <right> or C-f completes fully, <M-right> or M-f completes partially
(use-package esh-autosuggest
  :after eshell
  :hook (eshell-mode . esh-autosuggest-mode))
#+end_src

*** Helm completion in Eshell

Extend [[https://github.com/emacs-mirror/emacs/blob/master/lisp/pcomplete.el][pcomplete]] ([[https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][more info]]) to complete commands and files in Eshell
using Helm, adapted from the [[https://github.com/emacs-helm/helm/wiki/Eshell][Helm wiki]].

#+name: helm-eshell-completion
#+begin_src emacs-lisp
(when (featurep 'helm)
  (add-hook 'eshell-mode-hook
            (lambda ()
              (eshell-cmpl-initialize)
              (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
              (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history))))
#+end_src

*** Helm Fish Completion of CLI options in Eshell            :external:melpa:

[[https://github.com/emacs-helm/helm-fish-completion][Helm Fish Completion]] provides a Helm-based extension of [[https://github.com/emacs-mirror/emacs/blob/master/lisp/pcomplete.el][pcomplete]] to
complete CLI options using [[https://fishshell.com/][fish]] in Eshell and other shells.

If using this, ~fish-completion-mode~ should be disabled.

#+name: helm-fish-completion
#+begin_src emacs-lisp
(when (and (executable-find "fish") (featurep 'helm))
  (use-package helm-fish-completion
    :config
    (setq helm-esh-pcomplete-build-source-fn
          #'helm-fish-completion-make-eshell-source)
    (with-eval-after-load 'shell
      (define-key shell-mode-map (kbd "<tab>") #'helm-fish-completion))
    (add-hook 'eshell-mode-hook
              (lambda ()
                (define-key eshell-mode-map (kbd "<tab>")
                  #'helm-fish-completion)))))
#+end_src

*** eshell-z for jumping to frecent directories                       :melpa:

[[https://github.com/xuchunyang/eshell-z][eshell-z]] is a port of [[https://github.com/rupa/z][z]] to Eshell, providing a shell facility for
jumping to frecent directories.

#+name: eshell-z
#+begin_src emacs-lisp
(use-package eshell-z
  :after eshell)
#+end_src

** Command interpreters for other shells

*** Make command interpreter prompts read-only

Make the command interpreter (comint) prompts read-only.

#+name: comint-prompt-read-only
#+begin_src emacs-lisp
;; make shell prompts read-only
(setq comint-prompt-read-only t)
#+end_src

*** Kill term buffers using "q" after session end

Kill term buffers after session end on a "q" keypress.

#+name: kill-term-buffers-with-q-after-end
#+begin_src emacs-lisp
;; kill term buffers with 'q' after session end
(defun term-handle-exit--close-buffer-on-cmd (&rest args)
  "Kill term buffer with 'q' after session exit."
  (when (null (get-buffer-process (current-buffer)))
    (use-local-map (let ((keymap (make-sparse-keymap)))
                     (define-key keymap (kbd "q")
                       (lambda ()
                         (interactive)
                         (kill-buffer (current-buffer))))
                     keymap))))
(advice-add 'term-handle-exit :after #'term-handle-exit--close-buffer-on-cmd)
#+end_src

** vterm                                                              :melpa:

[[https://github.com/akermu/emacs-libvterm][emacs-libvterm]] (vterm) is full terminal emulator run inside Emacs
using [[https://launchpad.net/libvterm][libvterm]].

Note this requires Emacs be compiled with modules support enabled
(using the ~--with-modules~ option). If so, ~module-fix-suffix~ will
be non-nil.

The default behavior of emacs-libvterm is to compile libvterm from
source on the first run.

The following instructions show steps needed on macOS to set up the
compile dependencies using MacPorts.

#+begin_example
$ sudo port install cmake libtool
#+end_example

*Configuration*:
- Use shell title to populate buffer name.
- Clearing the screen also clears scrollback history.
- Limit the automatically eval'ed vterm commands in shell output to
  further limit attack vectors for arbitrary code execution.
- Kill vterm buffer automatically on exit.

#+name: vterm
#+begin_src emacs-lisp
(use-package vterm
  :if (and module-file-suffix
           (executable-find "cmake")
           (executable-find "libtool"))
  :init
  (setq vterm-buffer-name-string "vterm %s"
        vterm-clear-scrollback-when-clearing t
        vterm-eval-cmds '(("vterm-clear-scrollback" vterm-clear-scrollback))
        vterm-kill-buffer-on-exit t
        vterm-shell (or (executable-find "fish") shell-file-name)))
#+end_src

*Updating compiled modules*: ~M-x vterm-module-compile~ recompiles
vterm-module, so run it to update to newer versions of libvterm.

*** Shell-side configuration required for specific vterm features

If desired, vterm also has a number of Emacs and shell integration
features (directory tracking, prompt tracking, message parsing, etc)
that require some [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][shell-side configuration]].

Most of these shell-side configurations require a ~vterm_printf~
helper function. For fish, put the following in a
=~/.config/fish/functions/vterm_printf= file.

#+begin_example
# Helper function for sending info from shell to vterm using escape sequences.
# https://github.com/akermu/emacs-libvterm#shell-side-configuration
if [ "$INSIDE_EMACS" = "vterm" ]
    function vterm_printf
        if [ -n "$TMUX" ]
            # tell tmux to pass the escape sequences through
            # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
            printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
        else if string match -q -- "screen*" "$TERM"
            # GNU screen (screen, screen-256color, screen-256color-bce)
            printf "\eP\e]%s\007\e\\" "$argv"
        else
            printf "\e]%s\e\\" "$argv"
        end
    end
end
#+end_example

**** Directory and prompt tracking

Enables using ~C-c C-n~ and ~C-c C-p~ to go the next and previous
prompts respectively while in vterm.

Also allows ~vterm-beginning-of-line~ and ~vterm-at-prompt-p~
functions to better detect prompts.

For fish, create a =~/.config/fish/functions/vterm_prompt_end.fish=
file with the following.

#+begin_example
# Helper function for redefining prompt in config.fish to enable directory
# and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    function vterm_prompt_end
        vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
    end
end
#+end_example

Next, add the following near the end of the
=~/.config/fish/config.fish= file.

#+begin_example
# Redefine the prompt for directory and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    functions -c fish_prompt vterm_old_fish_prompt
    function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
        # Remove the trailing newline from the original prompt. This is done
        # using the string builtin from fish, but to make sure any escape codes
        # are correctly interpreted, use %b for printf.
        printf "%b" (string join "\n" (vterm_old_fish_prompt))
        vterm_prompt_end
    end
end
#+end_example

**** vterm-clear-scrollback-when-clearing support

Required for ~vterm-clear-scrollback-when-clearing~ to work properly
when it is set to non-nil. This automatically clears the scrollback as well
on ~vterm-clear~, which bound to ~C-l~ by default.

Create a =~/.config/fish/functions/clear.fish= file with the following
contents.

#+begin_example
# Redefine clear function to also clear scrollback history in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#vterm-clear-scrollback
if [ "$INSIDE_EMACS" = "vterm" ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback"
        tput clear
    end
end
#+end_example

*** vterm-specific switch-to-buffer

Define a ~switch-to-buffer~ variant restricted to vterm buffers and
the most recently selected buffer besides the current one (this is the
buffer return by ~other-buffer~, and allows for toggling between the
code and vterm), and bind it to ~C-c C-b~ when in ~vterm-mode~.

#+name: vterm-switchb
#+begin_src emacs-lisp
(defun vterm-switchb ()
  "Call `switch-to-buffer' but only for vterm buffers."
  (interactive)
  (let ((completion-regexp-list '("\\`vterm .*")))
    (call-interactively #'switch-to-buffer)))

(with-eval-after-load 'vterm
  (define-key vterm-mode-map (kbd "C-c C-b") #'vterm-switchb))
#+end_src

** tmux interaction convenenience functions

Define some convenience functions for interaction with the currently active tmux session.
- ~tmux-send~ prompts for a command to send and sends it.
- ~tmux-resend~ resends the previously sent command from the current buffer.

#+name: tmux-send
#+begin_src emacs-lisp
;; convenience functions for sent commands to an active tmux session
;; adapted from https://explog.in/notes/tmux.html

;; track previously sent tmux commands on per-buffer basis
(setq tmux-send--last-command nil)
(make-variable-buffer-local 'tmux-send--last-command)

(defun tmux-send (command)
  "Sends the specified COMMAND to the currently active tmux pane."
  (interactive "sCommand: ")
  (setq tmux-send--last-command command)
  (call-process "tmux" nil nil nil "send-keys" command "Enter"))

(defun tmux-resend ()
  "Resends previously sent command to currently active tmux pane."
  (interactive)
  (if tmux-send--last-command
      (call-process "tmux" nil nil nil "send-keys" tmux-send--last-command "Enter")
    (message "No previously sent command from the current buffer!")))
#+end_src

* Comparison tools

** Ediff

[[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] is a built-in tool that visualizes the standard Unix [[https://en.wikipedia.org/wiki/Diff][diff]] and
[[https://en.wikipedia.org/wiki/Patch_(Unix)][patch]] programs.

*Configuration*:
- Always set control window in the same frame as the diff'ed files.

#+name: ediff
#+begin_src emacs-lisp
;; always set up Ediff control window in the same frame as the diff,
;; open with horizontal window split instead of the default vertical
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

*** Ediff copy A and B diff regions to C in a 3-way diff job

Add an Ediff command for copying diff regions for a hunk from both
buffers A and B to C when in a 3-way diff job, for example when
resolving Git merge conflicts.

Adapted from [[https://stackoverflow.com/questions/9656311/conflict-resolution-with-emacs-ediff-how-can-i-take-the-changes-of-both-version/29757750#29757750][here]].

#+name: ediff-copy-a-and-b-to-c
#+begin_src emacs-lisp
;; copy diff hunk from buffers A and B to C in 3-way Ediff
;; adapted from https://stackoverflow.com/a/29757750
(defun ediff-copy-A-and-B-to-C (arg)
  "Copies ARGth diff region from both buffers A and B to C.
ARG is a prefix argument.  If nil, copy the current difference region."
  (interactive "P")
  (ediff-barf-if-not-control-buffer)
  (if (eq arg '-) (setq arg -1)) ;; translate neg arg to -1
  (if (numberp arg) (ediff-jump-to-difference arg))
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference
                                               'A
                                               ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference
                                               'B
                                               ediff-control-buffer)))
  ;; recenter with rehighlighting, but no messages
  (ediff-recenter))
(add-hook 'ediff-keymap-setup-hook
          (lambda ()
            (when ediff-3way-job
              (define-key ediff-mode-map "d" 'ediff-copy-A-and-B-to-C))))
(with-eval-after-load 'ediff-help
  (setq ediff-long-help-message-compare3
        (concat ediff-long-help-message-compare3
                "                                                 |"
                "  d -copy A + B regions to C
"
)))
#+end_src

** View and compare directory trees using Ztree                       :melpa:

The [[https://github.com/fourier/ztree][Ztree]] package provides a directory tree viewer and directory tree
comparison functionality similar to [[https://www.scootersoftware.com/][Beyond Compare]] or [[https://www.araxis.com/merge/index.en][Araxis Merge]].

#+name: ztree
#+begin_src emacs-lisp
;; view and compare directory trees, like Beyond Compare
(use-package ztree
  :bind (("C-x D" . ztree-dir)
         ("C-c C-M--" . ztree-diff))
  :config
  (setq ztree-dir-move-focus t ;; RET in ztree-dir also moves focus
        ztree-draw-unicode-lines t ;; unicode lines
        ztree-show-number-of-children t)) ;; show number of files in subdir tree

;; convenience navigation bindings for `ztreedir-mode' and `ztreediff-mode'
(with-eval-after-load 'ztree-view
  (define-key ztree-mode-map (kbd "n") #'ztree-next-line)
  (define-key ztree-mode-map (kbd "p") #'ztree-previous-line))
#+end_src

* DevOps

** docker.el for managing Docker from Emacs                           :melpa:

[[https://github.com/Silex/docker.el][docker.el]] provides integration with Docker, allowing the management of
Docker containers, images and volumes.

#+name: docker
#+begin_src emacs-lisp
(when (executable-find "docker")
  (use-package docker
    :bind ("C-c C-M-d" . docker)))
#+end_src

* Dired

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] is a built-in directory editor for Emacs.

Additionally load some built-in extra Dired features, including a
global binding ~C-x C-j~ to directly jump to a Dired buffer for the
directory containing the current buffer.

#+name: dired
#+begin_src emacs-lisp
(require 'dired-x) ;; extra features
(require 'dired-aux) ;; even more extra features
(setq dired-dwim-target t ;; use neighboring dired buffer as default target dir
      dired-listing-switches "-alhvFG" ;; more readable file listings
      dired-omit-files (concat dired-omit-files "\\|^\\..+$") ;; omit dot files in dired-omit-mode
      dired-recursive-copies 'always ;; always copy recursively
      dired-recursive-deletes 'always) ;; always delete recursively
(add-hook 'dired-mode-hook #'auto-revert-mode) ;; auto-refresh on file change
(add-hook 'dired-mode-hook #'dired-hide-details-mode) ;; hide details initially
#+end_src

** Open file at point in Dired using system file open dispatcher

Add binding for opening a file at point in Dired using the system file
open dispatcher (typically ~xdg-open~ on Linux and ~open~ on Mac).

#+name: dired-open-file-at-pt
#+begin_src emacs-lisp
;; bind "z" in dired-mode to open file at point using system command
;; to open files by type
(with-eval-after-load 'dired
  (defun dired--open-file-at-pt ()
    "Opens file at point in Dired using system open command.
This opens the file using the preferred application by filetype."
    (interactive)
    (let ((filename (dired-get-file-for-visit)))
      (start-process "default-app"
                     nil
                     my-system-open-command
                     filename)))
  (define-key dired-mode-map (kbd "z") #'dired--open-file-at-pt))
#+end_src

** Have recentf also track dired buffers

Have recentf track dired buffers as well. From [[https://www.emacswiki.org/emacs/RecentFiles#toc21][here]].

Alternative is [[https://github.com/Vifon/dired-recent.el][dired-recent]].

#+name: recentf-track-dired-buffers
#+begin_src emacs-lisp
;; have recentf track dired buffers as well
;; from https://www.emacswiki.org/emacs/RecentFiles#toc21

(defun recentd-track-opened-file ()
  "Insert the name of the directory just opened into the recent list."
  (and (derived-mode-p 'dired-mode) default-directory
       (recentf-add-file default-directory))
  ;; Must return nil because it is run from `write-file-functions'.
  nil)

(defun recentd-track-closed-file ()
  "Update the recent list when a dired buffer is killed.
That is, remove a non kept dired from the recent list."
  (and (derived-mode-p 'dired-mode) default-directory
       (recentf-remove-if-non-kept default-directory)))

(add-hook 'dired-after-readin-hook 'recentd-track-opened-file)
(add-hook 'kill-buffer-hook 'recentd-track-closed-file)
#+end_src

** dired-filter extension to add Ibuffer-like filters to Dired        :melpa:

~dired-filter~ from the [[https://github.com/Fuco1/dired-hacks][dired-hacks]] collection adds filtering capability like that of [[Advanced buffer management with Ibuffer][Ibuffer]] to Dired.

#+name: dired-filter
#+begin_src emacs-lisp
(use-package dired-filter
  :bind (:map dired-mode-map
         ("/" . dired-filter-map))
  :hook (dired-mode . dired-filter-mode)
  :init (setq-default dired-filter-stack nil))
#+end_src

** Dired icons using all-the-icons-dired                   :workaround:melpa:

Add font icons from ~all-the-icons~ to Dired using [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]].
Requires the ~all-the-icons~ package be loaded.

#+name: all-the-icons-dired
#+begin_src emacs-lisp
;; use font icons in Dired
(use-package all-the-icons-dired
  :after (all-the-icons dired)
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  (set-face-attribute 'all-the-icons-dired-dir-face nil
                      :weight 'normal)
  ;; extra workaround to avoid misalignment in filenames due to with
  ;; varying icon widths
  ;; https://github.com/jtbm37/all-the-icons-dired/issues/10
  (advice-add 'all-the-icons-dired--setup :after
              (lambda () (setq-local tab-width 2))))
#+end_src

* Editing text

** Indent with soft tabs

Use spaces (soft tabs) to indent by default instead of actual tab
characters (hard tabs).

Use ~C-q TAB~ to input hard tabs if necessary.

#+name: indent-with-soft-tabs
#+begin_src emacs-lisp
;; indent with soft tabs; use C-q <TAB> for real tabs
(setq-default indent-tabs-mode nil)
#+end_src

** Completion-enabled yanking from kill-ring

Add a convenience function for yanking (pasting) from the kill-ring
with completion.
Completion support is provided through ~completing-read~, which is
shadowed by completion frameworks like Icomplete, Ido, Ivy, etc.

#+name: completing-yank
#+begin_src emacs-lisp
(defun my-yank-from-kill-ring ()
  "Yank from the kill ring into buffer at point or region.
Uses `completing-read' for selection, which is set by Ido, Ivy, etc."
  (interactive)
  (let ((to-insert (completing-read
                    "Yank : " (cl-delete-duplicates kill-ring :test #'equal))))
    ;; delete selected buffer region if any
    (if (and to-insert (region-active-p))
        (delete-region (region-beginning) (region-end)))
    ;; insert the selected entry from the kill ring
    (insert to-insert)))

;; yank with completion key binding
(global-set-key (kbd "C-c C-M-y") #'my-yank-from-kill-ring)
#+end_src

** Delete selected region on delete or character input

Use the built-in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/delsel.el][delsel]] package to support deleting the selected
region on delete or some character input, which is the behavior in
line with typical user interface conventions.

#+name: delsel
#+begin_src emacs-lisp
;; typing text replaces the active (i.e. selected) region, if any is selected
(delete-selection-mode)
#+end_src

** Single spacing after sentences.

Single spacing after sentences.
For abbreviations, use non-breaking spaces that can be input with
~\\{}nbsp~ in Org documents, or with ~C-x 8 SPC~ for the UTF-8
non-breaking space character.

#+name: sentence-end-single-space
#+begin_src emacs-lisp
;; use single spaces after sentences
(setq sentence-end-double-space nil)
#+end_src

** Transparent editing of GPG files

[[https://www.gnu.org/software/emacs/manual/html_mono/epa.html][EasyPG Assistant]] is a [[https://gnupg.org/][GnuPG]] interface for Emacs.

#+name: epa-file
#+begin_src emacs-lisp
;; enable transparent editing of GPG files
(require 'epa-file)
(epa-file-enable)
#+end_src

** Display available bindings in a popup                              :melpa:

[[https://github.com/justbur/emacs-which-key][which-key]] shows the available bindings in the minibuffer.
Modify the configuration from the default to only manually using ~C-h~
in the middle of a key sequence.

#+name: which-key
#+begin_src emacs-lisp
;; display available bindings in popup
(use-package which-key
  :bind ("C-c C-M-?" . which-key-show-top-level)
  :init
  (setq which-key-allow-multiple-replacements t
        which-key-compute-remaps t
        ;; configure for manual activation using C-h in the middle of a key seq
        ;; see https://github.com/justbur/emacs-which-key#manual-activation
        which-key-idle-delay 10000
        which-key-idle-secondary-delay 0.05
        which-key-show-early-on-C-h t)
  (which-key-mode 1))
#+end_src

** Expanding selected regions by semantic units                       :melpa:

Use the [[https://github.com/magnars/expand-region.el][expand-region]] package to support expanding selected regions by semantic units.
Examples include character to word, word to sentence, etc.

#+name: expand-region
#+begin_src emacs-lisp
;; expand selected region by semantic units
(use-package expand-region
  :commands er/expand-region
  :bind ("C-=" . er/expand-region))
#+end_src

** Iedit mode for editing occurances of the same word simultaneously  :melpa:

[[https://github.com/victorhge/iedit][Iedit mode]] enables editing multiple occurances of the same word in the
buffer simultaneously.

*Usage notes*:
- ~C-;~ to edit occurances of the word under point within the buffer,
  or ~C-u 0 C-;~ to edit occurances only within the current function.
- Fine control of the search area for occurances is done by using
  ~M-I~ when in ~iedit-mode~ to restrict to current line and ~M-{~ and
  ~M-}~ to expand search region one-line at a time upwards and
  downwards (add a prefix argument to reverse instead).
- ~C-'~ while editing to toggle narrowing to occurance lines.
- ~C-;~ when editing is done to apply changes.

#+name: iedit
#+begin_src emacs-lisp
(use-package iedit
  :init (setq iedit-toggle-key-default (kbd "C-;"))
  :config
  ;; advise iedit functions that jump to new point locations to
  ;; perform context actions after they are run
  (dolist (jump-fun '(iedit-next-occurrence
                      iedit-prev-occurrence
                      iedit-goto-first-occurrence
                      iedit-goto-last-occurrence
                      iedit-expand-to-occurrence))
    (advice-add jump-fun :after #'my-after-jump-context-actions)))
#+end_src

** Symbol overlays and operations                                     :melpa:

[[https://github.com/wolray/symbol-overlay][symbol-overlay]] provides the ability to highlight symbols with overlays
and a keymap for different operations on the highlighted symbols.

#+name: symbol-overlay
#+begin_src emacs-lisp
(use-package symbol-overlay
  :demand t
  :init
  ;; don't use `symbol-overlay-map' as it conflicts with `iedit-mode',
  ;; a transient is be defined later to access symbol-overlay commands
  (setq symbol-overlay-inhibit-map t)
  :config
  ;; advise symbol-overlay jump functions to perform context actions
  ;; after they are run
  (dolist (jump-fun '(symbol-overlay-jump-next
                      symbol-overlay-jump-prev
                      symbol-overlay-switch-forward
                      symbol-overlay-switch-backward))
    (advice-add jump-fun :after #'my-after-jump-context-actions)))
#+end_src

** Multiple cursors                                                   :melpa:

[[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el]] is package that enables the creation of multiple cursors in Emacs that all do the same thing simultaneously.

#+name: multiple-cursors
#+begin_src emacs-lisp
;; multiple cursors
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this))
  :init (setq mc/always-run-for-all nil
              mc/always-repeat-command nil
              mc/insert-numbers-default 1)
  :config
  ;; decrease width of the multiple-cursors bar
  ;; setting a height of 1 ends up rendering a thick bar
  ;; probably because it is too small a value
  (set-face-attribute 'mc/cursor-bar-face nil :height 10))
#+end_src

** Snippet expansion using YASnippet                                  :melpa:

[[https://github.com/joaotavora/yasnippet/tree/5b1217ab085fab4abeb1118dccb260691b446703][YASnippet]] is a snippet expansion package for Emacs, which supports
expanding abbreviations into templates. Snippets can defined and
stored in the =snippets= folder within ~user-emacs-directory~.

Two additional supporting packages can also be loaded:
- The YASnippet official snippet collections package containing
  definitions for multiple file types and languages. (Not enabled.)
- The [[https://github.com/abo-abo/auto-yasnippet][Auto-YASnippet]] package, which enables temporary snippet
  definitions that can optionally be persisted. Persisted snippets are
  saved to ~aya-persist-snippet-dir~ (defaults to ~snippets~ in
  ~user-emacs-directory~) in a subfolder corresponding to the major
  mode. (Enabled.)

#+name: yasnippet
#+begin_src emacs-lisp
;; expandable snippet template system
(use-package yasnippet
  :defer 1 ;; load asynchronously after startup
  :config
  ;; (use-package yasnippet-snippets) ;; official snippets
  (use-package auto-yasnippet) ;; enable creation of temporary snippets
  ;; remove default bindings to avoid conflicts with other packages
  ;; removing prefix bindings also removes bindings that use them
  (unbind-key "\C-c&" yas-minor-mode-map)
  (unbind-key "\C-c" yas-minor-mode-map)
  (yas-global-mode 1))
#+end_src

** Structured editing using Paredit                                   :melpa:

[[https://www.emacswiki.org/emacs/ParEdit][Paredit]] provides a minor mode for structured editing S-expression data.
Enable it for editing Emacs Lisp buffers and the minibuffer.
Also configure it so its commands integrate appropriately with
~delete-selection-mode~.

#+name: paredit
#+begin_src emacs-lisp
;; structured editing of S-expressions with Paredit
(use-package paredit
  :commands paredit-mode
  :hook ((emacs-lisp-mode . paredit-mode)
         ;; when in minibuffer via `eval-expression`
         (eval-expression-minibuffer-setup . paredit-mode)
         ;; *scratch* default mode
         (lisp-interaction-mode . paredit-mode))
  :config
  (with-eval-after-load 'minions
    (add-to-list 'minions-direct 'paredit-mode))
  ;; make delete-selection-mode work within paredit-mode
  (with-eval-after-load 'delsel
    (put 'paredit-forward-delete 'delete-selection 'supersede)
    (put 'paredit-backward-delete 'delete-selection 'supersede)
    (put 'paredit-open-round 'delete-selection t)
    (put 'paredit-open-square 'delete-selection t)
    (put 'paredit-doublequote 'delete-selection t)
    (put 'paredit-newline 'delete-selection t)))
#+end_src

** Traverse undo history as a tree                                     :elpa:

The [[http://www.dr-qubit.org/undo-tree.html][undo-tree]] package allows the traversal of the undo history as a
tree, which makes utilizing Emacs rather flexible undo/redo
capabilities much easier.
Default bindings are ~C-/~ to undo, ~C-S-/~ to redo, and ~C-x u~ to
open a new window whose buffer where the undo history is presented as
a tree and can be navigated using the regular movement keys.

#+name: undo-tree
#+begin_src emacs-lisp
;; traverse undo history as a tree, default binding is "C-x u"
(use-package undo-tree
  :init (setq undo-tree-visualizer-relative-timestamps nil)
  :config (global-undo-tree-mode))
#+end_src

** Zap up to character

~M-z~ is bound by default to ~zap-to-char~ that deletes from the point
to (including) the next occurrence of a given character, which is like
~d f <char>~ in Vim.

There is also a more useful variant ~zap-up-to-char~ which deletes up
to /but not including/ the next occurrence of a given character, which
is like ~d t <char>~ in Vim.

*Configuration*:
- Rebind ~M-z~ to ~zap-up-to-char~. Use ~C-u ARG M-z~ to delete up to
  the ~ARG~-th next occurrence of a character.

#+name: zap-up-to-char
#+begin_src emacs-lisp
;; bind over `zap-to-char' (defaults to "M-x") with `zap-up-to-char'
(global-set-key [remap zap-to-char] #'zap-up-to-char)
#+end_src

** cycle-spacing

Bind ~cycle-spacing~ in place of ~just-one-space~ as it is more
versatile, utilizing a single command to cycle between one space
around point, no spaces around point and original spacing by calling
it consecutively.

#+name: cycle-spacing
#+begin_src emacs-lisp
(global-set-key [remap just-one-space] #'cycle-spacing)
#+end_src

** Join current and next line like "J" in Vim

Join current and next line, like ~J~ in Vim.

#+name: my-join-next-line
#+begin_src emacs-lisp
;; Join next line to end of current line, like "J" in Vim
(defun my-join-next-line ()
  "Join the next line to the end of the current line."
  (interactive)
  (let ((col (current-column)))
    (join-line -1)
    (move-to-column col)))

(global-set-key (kbd "C-S-j") #'my-join-next-line)
#+end_src

** Open new line below/above like "o"/"O" in Vim

Create a new line below/above the current one and move point
there, like ~o~/~O~ in Vim.

#+name: my-open-line-below-and-above
#+begin_src emacs-lisp
(defun my-open-line-below (n)
  "Open a new line below and go to it.
With arg N, insert N newlines."
  (interactive "*p")
  (end-of-line)
  (newline n)
  (indent-according-to-mode))

(defun my-open-line-above (n)
  "Open a new line above and go to it.
With arg N, insert N newlines."
  (interactive "*p")
  (beginning-of-line)
  (newline n)
  (forward-line (- n))
  (indent-according-to-mode))

;; bind over `open-line' ("C-o") with `my-open-line-below'
(global-set-key [remap open-line] #'my-open-line-below)
;; binding for `my-open-line-above
(global-set-key (kbd "C-S-o") #'my-open-line-above)
#+end_src

** Show keyboard macros and latest commands as Elisp                  :melpa:

[[https://github.com/Silex/elmacro][Elmacro]] provides commands that show Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][keyboard macros]] or the
latest interactive commands as Elisp, and can be a useful tool for
creating Elisp function or as a nicer version of ~view-lossage~.
See [[https://emacsnotes.wordpress.com/2018/11/15/elmacro-write-emacs-lisp-snippet-even-when-you-arent-a-programmer/][here]] for more a nice introduction to the package.

#+name: elmacro
#+begin_src emacs-lisp
;; show keyboard macros and latest commands as Elisp, adapted from
;; https://emacsnotes.wordpress.com/2018/11/15/elmacro-write-emacs-lisp-snippet-even-when-you-arent-a-programmer/
(use-package elmacro
  :config
  (elmacro-mode 1)
  ;; add Elmacro entry under Tools in the menu bar
  (easy-menu-define my-elmacro-menu nil
    "Menu for Elmacro."
    '("Elmacro"
      ["Elmacro Mode"
       (customize-save-variable 'elmacro-mode (not elmacro-mode))
       :style toggle
       :selected elmacro-mode
       :help "(elmacro-mode &optional ARG)\n\nToggle emacs activity recording (elmacro mode).\nWith a prefix argument ARG, enable elmacro mode if ARG is\npositive, and disable it otherwise. If called from Lisp, enable\nthe mode if ARG is omitted or nil."]
      "--"
      ["Show Last Commands"
       elmacro-show-last-commands
       :active elmacro-mode
       :help "(elmacro-show-last-commands &optional COUNT)\n\nTake the latest COUNT commands and show them as emacs lisp.\n\nThis is basically a better version of `kmacro-edit-lossage'.\n\nThe default number of commands shown is modifiable in variable\n`elmacro-show-last-commands-default'.\n\nYou can also modify this number by using a numeric prefix argument or\nby using the universal argument, in which case it'll ask for how many\nin the minibuffer."]
      ["Show Last Macro"
       elmacro-show-last-macro
       :active elmacro-mode
       :help "(elmacro-show-last-macro NAME)\n\nShow the last macro as emacs lisp with NAME."]
      "--"
      ["Clear Command History"
       elmacro-clear-command-history
       :active elmacro-mode
       :help "(elmacro-clear-command-history)\n\nClear the list of recorded commands."]))
  (dolist (menu-item '(["--" nil] my-elmacro-menu ["--" nil]))
    (easy-menu-add-item
     (current-global-map)
     '("menu-bar" "Tools")
     menu-item)))
#+end_src

* Emacs as an edit server

** Server mode

Use ~server-mode~ (toggle) or ~server-start~ to start a server from
the current Emacs session.

Clients for the server can be created using ~emacsclient~ command.

*Note*: Quitting the main Emacs session that initiated the server mode
also quits the server and closes the attached clients. If the goal is
to have a headless Emacs server always running, start it with one of
the following.

#+begin_example
# run headless as a daemon in the background
$ /Applications/Emacs.app/Contents/MacOS/bin/emacsclient --daemon
# run headless as a daemon in the foreground
$ /Applications/Emacs.app/Contents/MacOS/bin/emacsclient --fg-daemon
#+end_example

One option is also to have a headless Emacs server spawn on login,
see [[https://www.emacswiki.org/emacs/EmacsAsDaemon][link]].

** SIGUSR1 as a safety valve to restart server when its process is isolated

Send a ~SIGUSR1~ signal to the Emacs process to start or restart the
server process.

See [[https://www.emacswiki.org/emacs/EmacsAsDaemon#toc15][link]] for more info.

#+name: sigusr1-restart-emacs-server
#+begin_src emacs-lisp
;; server mode restart safety valve
(defun restart-emacs-server ()
  "Restarts an Emacs server."
  (interactive)
  (server-force-delete)
  (server-mode 1)
  (message "Restarted Emacs server."))

;; bind SIGUSR1 signal to call `server-restart'
(define-key special-event-map [sigusr1] #'restart-emacs-server)
#+end_src

To test the signal handler, have Emacs send a signal to itself:

#+begin_example
(signal-process (emacs-pid) 'sigusr1)
#+end_example

To call the signal handler from the command line, run:

#+begin_example
$ pkill -SIGUSR1 -i emacs
#+end_example

* Email

This section describes the following email setup to sync and read mail:
- [[https://github.com/gauteh/lieer][Lieer]] is used for syncing with a Gmail source (which requires XOAUTH2).
  - ~gmi pull~ pulls changes from source like new email or tag changes.
  - ~gmi push~ pushes changes to the source like tag changes.
  - ~gmi send~ sends an email via the Gmail API.
- Index emails using [[https://notmuchmail.org/][notmuch]].
- Read and tag email via notmuch using Emacs.
- Send email via lieer using Emacs.

#+begin_example
  ------- push tags with lieer      (gmi push) <------------
  |                                                        |
  v                                                        |
Gmail --> pull mail/tags with lieer (gmi pull) --> notmuch (index) <--> Emacs
  ^                                                                       |
  |                                                                       |
  ------- send mail with lieer      (gmi send) <---------------------------
#+end_example

** Setting up lieer and notmuch                                    :external:

~pip install -e .~ or ~setup.py install -e~ installs lieer in editable
mode (setuptools "develop mode").

#+begin_example
$ sudo port install notmuch
$ notmuch
#+end_example

Create the mail directory at =/Users/myusername/Mail=.

Edit =~/.notmuch-config= and modify the ~[new]~ section as follows:

#+begin_example
[new]
tags=
ignore=/.*[.](json|lock|bak)$/
#+end_example

Next create a virtual environment for ~lieer~ and activate it.

#+begin_example
$ conda create -n lieer python=3.7
$ conda activate lieer
#+end_example

Create a build directory (say =~/build=, change as needed).

#+begin_example
$ mkdir -p ~/build
#+end_example

Install the Python bindings for ~notmuch~.
If possible, ~git checkout~ the commit or tag corresponding to the
version of ~notmuch~ installed for maximum compatibility before
installing the binding via ~pip~.

#+begin_example
$ cd ~/build
$ git clone git://git.notmuchmail.org/git/notmuch
$ cd notmuch/bindings/python
$ pip install .
#+end_example

Install ~lieer~.

#+begin_example
$ cd ~/build
$ git clone https://github.com/gauteh/lieer.git
$ cd lieer
$ pip install .
#+end_example

*Note*: After doing the above, lieer can run using a command ~gmi~.
Because ~notmuch~ was installed with MacPorts and lieer within its own
environment, ~gmi~ needs to be called from within the virtual
environment container and with ~DYLD_FALLBACK_LIBRARY_PATH~ set to
MacPort's library directory at =/opt/local/lib= so it can find the
~notmuch~ libraries, for example:

#+begin_example
DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi
#+end_example

To avoid having to specify this every time ~gmi~ needs to be called,
a wrapper script can be used (change the paths as appropriate).

#+begin_example
#!/bin/sh

# Wrapper script for running gmi

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi "$@"
#+end_example

Run the following to create such a file in a directory on the system
path (say =~/.local/bin=), after which calling ~gmi~ directly should
work as expected.

#+begin_example
$ cat > ~/.local/bin/gmi <<EOF
#!/bin/sh

# Wrapper script for running gmi

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/miniconda3/envs/lieer/bin/gmi "$@"
EOF
$ chmod +x ~/.local/bin/gmi
#+end_example

Deactivate the virtual environment and build the ~notmuch~ database.

#+begin_example
$ conda deactivate lieer
$ cd ~/Mail
$ notmuch new
#+end_example

Initialize the ~notmuch~ database.

#+begin_example
$ cd ~
$ mkdir Mail
$ notmuch new
#+end_example

Create a local mail directory for the account (replace
=username@emailserver.com= with the actual email address).

#+begin_example
$ cd Mail
$ mkdir username@emailserver.com
$ cd username@emailserver.com
#+end_example

Two options for setting up and authenticating the email account in lieer:

1. Run ~gmi init username@emailserver.com~ which uses the developer's
   client ID.
2. Create a Google dev OAuth client ID, download its secrets file, and
   run ~gmi init -c your-client-secrets.json username@emailserver.com~
   to use the client secrets file.

Option 2 is typically better due to the higher likelihood of running
up against potential usage limits on the shared client ID key, so that
is covered here.

- Go to [[https://console.developers.google.com/flows/enableapi?apiid=gmail][this link]] to create a new Gmail project and API credentials for it.
- Agree to the terms and conditions.
- Continue and navigate to the project. Click the *Credentials* entry
  on the sidebar.
- /Which API are you using?/ \to Gmail API
- /Where will you be calling from?/ \to Other UI (e.g. Windows, CLI tool)
- /What data will you be accessing?/ \to User data
- Click *What credentials do I need?*.
- Click *SET UP CONSENT SCREEN* which opens an /OAuth consent screen/
  tab.
- Select *Internal* if a GSuite user, otherwise *External*.
- In the next screen, fill in the application name (like ~my-email-app~)
  and click *Save*.
- Close the tab and return to the previous one on the /Credentials/ page.
- Refresh the page or click again on *Credentials* and the page
  layout should now be a different one.
# - Click *+ CREATE CREDENTIALS* followed by *API KEY*.
# - Note down the API key.
# - Make sure to edit the API key settings to restrict it to only Gmail APIs.
- Click *+ CREATE CREDENTIALS* followed by *OAuth client ID*.
  Set application type to *Desktop app* and name the application
  (like ~my-email-app~).
- After setting it up, click the download button to download that
  OAuth client ID secret as a JSON file.

When done, move the client secret file (replace ~CLIENT_ID~ with the
actual client id) to the local mailbox directory and use it to
authenticate.
If there's a need to change client IDs in the future, it is possible to
use something like ~gmi auth -f -c client_secrets.json~ (untested).

#+begin_example
$ mv ~/Downloads/client_secret_CLIENTID.json
$ gmi init -c client_secret_CLIENTID.json username@emailserver.com
#+end_example

Now retrieve email using ~gmi~.

#+begin_example
$ gmi pull
#+end_example

*Aside*

By default the custom tags in ~new.tags~ in the notmuch configuration
that are populated for all new emails are also pushed to the remote.

As an example, suppose notmuch is configured to add the ~new~ tag to
any new email pulled per the following section in =~/.notmuch-config=
(note that for Gmail, it already has the ~unread~ tag so this is not
really that needed).

#+begin_example
[new]
tags=new
ignore=/.*[.](json|lock|bak)$/
#+end_example

Lieer can be configured to not push the custom tag ~new~ when syncing
for each specific email source (so that the source does not get
populated with extraneous tags) by running the following in the email
source directory.

#+begin_example
$ gmi set --ignore-tags-local new
#+end_example

*Back from aside*

Next, configure a hook that runs ~gmi pull~ when ~notmuch new~ is called.

First, make a ~hooks~ directory in the notmuch database.

#+begin_example
$ mkdir -p ~/Mail/.notmuch/hooks
#+end_example

Next create the file =~/Mail/.notmuch/hooks/pre-new= with the following contents
(change the local mailbox directory name and ~gmi~ path as relevant).

#+begin_example
#/bin/sh
cd ~/Mail/username@emailserver.com
~/.local/bin/gmi sync
#+end_example

Modify its permissions so it is executable.

#+begin_example
$ chmod +x ~/Mail/.notmuch/hook/pre-new
#+end_example

After setting this up, running ~notmuch new~ will sync new mail to the database.

(Adapted from [[http://www.johnborwick.com/2019/02/09/notmuch-gmailieer.html][this blog post]] and the lieer [[https://github.com/gauteh/lieer/blob/master/docs/index.md][documentation]].)

** Lieer and notmuch usage notes

*** Changing local or remote ignored tags in lieer Gmail synchronization

When changing local or remote ignored tags (for example using commands
~gmi set --ignore-tags-remote~ or ~gmi set --ignore-tags-local~), it
is best to do a full push or push (doing a dry run first to make sure
the changes are the ones that are desired).

The reason is that if the ignored tags were changed after the initial
sync, this will not update already synced messages.

Before changing anything, make sure the local and remote respositories
are fully synchronized.

After ~gmi set --ignore-tags-remote~ or editing the JSON config to the
same effect:

#+begin_example
$ gmi pull -f --dry-run
$ gmi pull -f
#+end_example

And after ~gmi set --ignore-tags-local~ or editing the JSON config to
the same effect:

#+begin_example
$ gmi push -f --dry-run
$ gmi push -f
#+end_example

Also, most importantly make sure to *only change one at a time* (don't
change both local and remote ignored tags at the same time).

A full push or pull is also a heavy handed fix when tags end up not
synchronizing in general.

*** Regular background mail syncs using launchd in macOS           :external:

On most Linux and Unix machines, it is easiest to have ~notmuch new~
run in the backend according to a schedule using ~cron~ to sync mail
automatically.

On macOS, it is recommended to use [[https://support.apple.com/guide/terminal/script-management-with-launchd-apdc6c1077b-5d5d-4d35-9c19-60f2397b2369/mac][launchd]] ([[https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html][more info]]) instead.
Create the file =~/Library/LaunchAgents/local.notmuch.new.plist= with
the following contents that specifies the ~notmuch new~ launchd job.
This provided configuration makes the next assumptions.
- The ~notmuch~ binary was installed to =/opt/local/bin/notmuch= which
  is the default location using MacPorts. Modify this as needed.
- ~notmuch new~ is to be run every 600 seconds. If changing this run
  interval, modify both ~StartInterval~ and ~ThrottleInterval~ to the
  desired time interval in seconds; note that due to a [[https://gist.github.com/dabrahams/4092951][some]] [[https://alvinalexander.com/mac-os-x/mac-os-x-startinterval-broken-launchctl-throttleinterval/][bugs]], it is
  best to /make sure both values are set/.

#+begin_example
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <!-- Name of job -->
  <key>Label</key>
  <string>local.notmuch.new</string>
  <!-- Command to run -->
  <key>ProgramArguments</key>
  <array>
    <string>/opt/local/bin/notmuch</string>
    <string>new</string>
  </array>
  <!-- Run interval in seconds -->
  <key>StartInterval</key>
  <integer>600</integer>
  <!-- Throttle, https://alvinalexander.com/mac-os-x/mac-os-x-startinterval-broken-launchctl-throttleinterval/ -->
  <key>ThrottleInterval</key>
  <integer>600</integer>
</dict>
</plist>
#+end_example

To load the mail sync job, run the following.

#+begin_example
$ launchctl load ~/Library/LaunchAgents/local.notmuch.new.plist
#+end_example

To see if the mail sync job is currently loaded, run the following.

#+begin_example
$ launchctl list | grep local.notmuch.new
#+end_example

To unload the mail sync job, do the following.

#+begin_example
$ launchctl unload ~/Library/LaunchAgents/local.notmuch.new.plist
#+end_example

** Reading email using notmuch.el                 :workaround:external:melpa:

Notmuch has an Emacs [[https://notmuchmail.org/notmuch-emacs/][client]].

*Configuration*:
- Prompt for which account to use when sending email.
- When archiving, remove the ~inbox~ tag.
- Show 10 most recent searches in the hello screen.
- Use ~,~ as the thousands separator character.
- Sort search results by date descending (default is date ascending).
- Don't show notmuch logo.
- Set up replies so text being replied to is properly quoted by Gmail
  (it automatically assumes duplicated text should be quoted).

*Notes*:
- It is best to copy over the contents of the =emacs= folder from the
  Notmuch codebase into the =site-lisp/notmuch= folder in
  ~user-emacs-directory~ (or some directory in ~load-path~) than using
  the MELPA version, so that the Elisp code matches the system binary.

#+name: notmuch
#+begin_src emacs-lisp
;; configure Notmuch email client
(when (executable-find "notmuch")
  (use-package notmuch
    :ensure nil ;; in site-lisp directory
    :bind (("C-c C-M-n" . notmuch)
           :map notmuch-show-mode-map
           ("d" . notmuch-show--toggle-trash-tag)
           :map notmuch-search-mode-map
           ("d" . notmuch-search--toggle-trash-tag)
           :map notmuch-tree-mode-map
           ("d" . notmuch-tree--toggle-trash-tag))
    :init
    (setq notmuch-always-prompt-for-sender t
          notmuch-archive-tags '("-inbox")
          notmuch-hello-recent-searches-max 10
          notmuch-hello-thousands-separator "," ;; US convention
          notmuch-search-oldest-first nil ;; sort date descending
          notmuch-search-result-format `(("date" . "%12s ")
                                         ("count" . "%-7s ")
                                         ("authors" . "%-20s ")
                                         ("tags" . "%s ")
                                         ("subject" . "%s"))
          notmuch-show-logo nil
          ;; workaround for Notmuch using SVG icons when unsupported
          ;; https://emacs.stackexchange.com/questions/14875/notmuch-mode-very-slow-in-emacs-mac-port-railwaycat
          notmuch-tag-formats '(("unread"
                                 (propertize tag 'face 'notmuch-tag-unread))
                                ("flagged"
                                 (propertize tag 'face 'notmuch-tag-flagged)))
          notmuch-tree-result-format `(("date" . "%12s  ")
                                       ("authors" . "%-20s")
                                       ((("tree" . "%s")
                                         ("subject" . "%s"))
                                        . " %-54s ")
                                       ("tags" . "%s")))
    :config
    ;; toggle deletion of message from the Show view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-show--toggle-trash-tag ()
      "Toggle trash tag for message in the Show view."
      (interactive)
      (if (member "trash" (notmuch-show-get-tags))
          (notmuch-show-tag (list "-trash"))
        (notmuch-show-tag (list "+trash" "-inbox"))))
    ;; toggle deletion of thread from the Search view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-search--toggle-trash-tag (&optional beg end)
      "Toggle trash tag for thread(s) in the Search view.
If applying to a selected region, it adds or removes the trash
tag based on the entry at the beginning of the region."
      (interactive (notmuch-interactive-region))
      (if (member "trash" (notmuch-search-get-tags beg))
          (notmuch-search-tag (list "-trash") beg end)
        (notmuch-search-tag (list "+trash" "-inbox") beg end)))
    ;; toggle deletion of thread from the Tree view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-tree--toggle-trash-tag ()
      "Toggle trash tag for message in the Tree view."
      (interactive)
      (if (member "trash" (notmuch-tree-get-tags))
          (notmuch-tree-tag (list "-trash"))
        (notmuch-tree-tag (list "+trash" "-inbox"))))))
#+end_src

** Shortening names in Search view for threads with multiple authors

Advise ~:around~ ~notmuch-search-insert-authors~ to show the first and
last author of a thread, and abbreviate and truncate each of their
names in the ~authors~ param to better fit the author column width.

Regexp name transforms adapted from [[https://scripter.co/narrowing-the-author-column-in-magit/][here]].

#+name: notmuch-shorten-multiple-author-names
#+begin_src emacs-lisp
;; advise `notmuch-search-insert-authors' so that when a thread has
;; multiple authors, only the first and last message authors are
;; displayed and their names are abbreviated to fit the column width
(with-eval-after-load 'notmuch
  (defvar notmuch--abbreviate-person-name-width
    (let* ((format-string (string-trim
                           (cdr
                            (assoc "authors"
                                   notmuch-search-result-format))))
           (authors-width (string-width (format format-string ""))))
      (- (/ authors-width 2) 1))
    "Width of each author in Notmuch Search view when more than one.
Should be N/2-1, N is the width of the Search view author column.")

  (defun notmuch--abbreviate-person-name (name &optional maxlen)
    "Abbreviates a person NAME.
The result will have `notmuch--abbreviate-person-name-width'
characters or less. This is done by using the initial of the
person's first name and shortening the person's last name as
necessary; also handles emails."
    (let* ((maxlen (or maxlen notmuch--abbreviate-person-name-width))
           (split-idx (string-match-p "\[,@\]" name))
           (split-char (if split-idx
                           (substring name split-idx (+ split-idx 1))
                         "")))
      (cond ((string-equal split-char "@") ;; user.name@server.com -> u name
             (let ((name-part (substring name 0 split-idx)))
               (notmuch--abbreviate-person-name name-part)))
            (t
             ;; is-comma-split t? lastname, firstname -> f lastname
             ;; is-comma-split f? firstname lastname -> f lastname
             ;;                   OR firstname -> firstname
             (let* ((is-comma-split (string-equal split-char ","))
                    (regexp (if is-comma-split
                                "\\(.*?\\), *\\(.\\).*"
                              "\\(.\\).*?[. ]+\\(.*\\)"))
                    (replacement (if is-comma-split
                                     "\\2 \\1"
                                   "\\1 \\2"))
                    (abbrev-name (replace-regexp-in-string regexp
                                                           replacement
                                                           name))
                    (further-truncate (> (length abbrev-name)
                                         maxlen)))
               (if further-truncate
                   (concat
                    (substring abbrev-name
                               0
                               (- maxlen 2))
                    "..")
                 abbrev-name))))))

  (defun notmuch-search-insert-authors--around-abbreviate (orig-fun &rest args)
    "Advice for `notmuch-search-insert-authors' to abbreviate names.
Extracts the authors field from ARGS, abbreviates its elements
using `notmuch--abbreviate-person-name' and calls ORIG-FUN
replacing the original authors with their abbreviated names.
Assumes ', ' is used to separate authors and names are not of the
form 'Lastname, Firstname'."
    (seq-let [format-string authors] args
      (save-match-data
        (let ((author-list (mapcar (lambda (s) (replace-regexp-in-string
                                                "'" "" s)) ;; no single quotes
                                   (split-string authors ", "))))
          (if (> (length author-list) 1)
              (let* ((oldest-newest-authors (cons (car author-list)
                                                  (last author-list)))
                     (abbrev-authors
                      (mapconcat 'identity
                                 (mapcar 'notmuch--abbreviate-person-name
                                         oldest-newest-authors)
                                 ", ")))
                (apply orig-fun (list format-string abbrev-authors)))
            (apply orig-fun args))))))

  ;; abbreviate names when there are multiple authors
  (advice-add 'notmuch-search-insert-authors :around
              'notmuch-search-insert-authors--around-abbreviate))
#+end_src

** Toggling visibility of search tags in the notmuch search results list

Add ability to toggle search tags in the notmuch search results.

When turned on, the search results will not show tags that
are part of the search query, the rationale being the user knows
what they searched for and because the search query.

However, tag modifications are always shown. Examples:
- When the search query is ~tag:inbox~ and the ~inbox~ tag removed
  from a message, +~inbox~+ is displayed for that message.
- When the search query is ~not tag:inbox~ and the ~inbox~ tag is
  added to a message, _~inbox~_ is displayed for that message.

This has some similarities to what Gmail does with labels in search
results, hiding labels that are part of the search query.

*Configuration*:
- Turned on by default.
- ~C-t~ in a search results buffer toggles search tag visibility.

#+name: notmuch-toggle-search-tags-in-results
#+begin_src emacs-lisp
;; notmuch extension to toggle search tag visibility in results by
;; advising the search listings field insertion function to remove
;; tags in the search query from the displayed tags except for those
;; modified after the search
(with-eval-after-load 'notmuch

  (defun notmuch--extract-search-tags (query)
    "Extracts out a list of tags from a given notmuch search QUERY.
More concretely, it identifies tokens that begin with the prefix
'is:' or 'tag:' and returns them as a list without the prefix.
Returns nil if there are no tags in the query."
    (seq-filter
     'identity
     (mapcar (lambda (x)
               (if (string-match "^\\(tag\\|is\\):\\([^ ]*\\)" x)
                   (match-string 2 x)
                 nil))
             (split-string query))))

  (defun string-equal-except (except-list s1 s2)
    "Tests if strings S1 are S2 the same, but return nil if
either is in EXCEPT-LIST."
    (if (or (member s1 except-list)
            (member s2 except-list))
        nil
      (string-equal s1 s2)))

  (defun notmuch--filter-common-search-tags (tags orig-tags query)
    "Returns '(TAGS ORIG-TAGS) with search tags in QUERY filtered out.
Only query search tags appearing in both TAGS and ORIG-TAGS are
removed."
    (let ((add-tags (cl-set-difference tags orig-tags :test 'string-equal))
          (rem-tags (cl-set-difference orig-tags tags :test 'string-equal))
          (search-tags (notmuch--extract-search-tags query)))
      (list (cl-set-difference tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      add-tags))
            (cl-set-difference orig-tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      rem-tags)))))

  (defun notmuch-search-insert-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-search-insert-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-search-insert-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string result] args
      (if (string-equal field "tags")
          (let ((base-tags (plist-get result :tags))
                (base-orig-tags (plist-get result :orig-tags))
                (query (if (boundp 'notmuch-search-query-string)
                           notmuch-search-query-string
                         nil)))
            (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                       base-tags base-orig-tags query)
              (insert (format format-string
                              (notmuch-tag-format-tags tags orig-tags)))))
        (apply orig-fun args))))

  (defun notmuch-tree-format-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-tree-format-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-tree-format-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string msg] args
      (cond ((listp field) (apply orig-fun args))
            ((string-equal field "tags")
             (let ((base-tags (plist-get msg :tags))
                   (base-orig-tags (plist-get msg :orig-tags))
                   (face (if (plist-get msg :match)
                             'notmuch-tree-match-tag-face
                           'notmuch-tree-no-match-tag-face))
                   (query (if (boundp 'notmuch-tree-basic-query)
                              notmuch-tree-basic-query
                            nil)))
               (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                          base-tags base-orig-tags query)
                 (format format-string
                         (notmuch-tag-format-tags tags orig-tags face)))))
            (t (apply orig-fun args)))))

  ;; using a global variable helps in correcting scenarios where
  ;; individual tag visibility states get misaligned
  (defvar notmuch--search-tags-visible t
    "Indicates if search tags are visible in Notmuch Tree and Search views.")

  (defun notmuch--toggle-search-tag-visibility ()
    "Toggle visibility of search tags in the Search and Tree views.
Assumes "
    (interactive)
    (let ((current-hide-search-tags
           (advice-member-p #'notmuch-search-insert-field--filter-search-tags
                            'notmuch-search-insert-field))
          (current-hide-tree-tags
           (advice-member-p #'notmuch-tree-format-field--filter-search-tags
                            'notmuch-tree-format-field)))
      ;; toggle Search view advice as needed
      (cond
       ((and current-hide-search-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-search-insert-field
                       #'notmuch-search-insert-field--filter-search-tags))
       ((and (not current-hide-search-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-search-insert-field :around
                    #'notmuch-search-insert-field--filter-search-tags)))
      ;; toggle Tree view advice as needed
      (cond
       ((and current-hide-tree-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-tree-format-field
                       #'notmuch-tree-format-field--filter-search-tags))
       ((and (not current-hide-tree-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-tree-format-field :around
                    #'notmuch-tree-format-field--filter-search-tags)))
      (setq notmuch--search-tags-visible (not notmuch--search-tags-visible))
      (notmuch-refresh-all-buffers)
      (message (if notmuch--search-tags-visible
                   "Search tags visible."
                 "Search tags hidden."))))

  ;; enable filtering of search tags in the Search and Tree views by default
  (notmuch--toggle-search-tag-visibility)

  ;; bindings to toggle visibility of search tags in the results
  (dolist (keymap '(notmuch-hello-mode-map
                    notmuch-search-mode-map
                    notmuch-tree-mode-map))
    (define-key keymap (kbd "C-t")
      #'notmuch--toggle-search-tag-visibility)))
#+end_src

** Sending mail with notmuch.el using Lieer as the sendmail program :external:

Lieer can be used to send outgoing mail through the Gmail account
([[https://github.com/gauteh/lieer/wiki/GNU-Emacs-and-Lieer][instructions]]).

This can be configured by creating a =notmuch-config.el= file in the
~user-emacs-directory~ with the following contents, but changing the
paths to the mailbox =~/Mail/username@emailserver.com= and the ~gmi~
executable path =~/.local/bin/gmi= as appropriate.

In most instances the filepath for the notmuch init file is the
=~/.emacs.d/notmuch-config.el=.

#+begin_example
;;; notmuch-config.el --- Notmuch config file -*- lexical-binding: t -*-

;;; Commentary:

;; Notmuch configuration file, helpful for avoiding clutter in the
;; regular config files due to machine-specific notmuch settings.
;; This file is loaded when notmuch starts up in Emacs.

;;; Code:

;; configure sendmail to use lieer to send email
(setq sendmail-program (expand-file-name "~/.local/bin/gmi"))
(setq message-sendmail-extra-arguments
      `("send" "--quiet" "-t"
        "-C" ,(expand-file-name "~/Mail/username@emailserver.com")))

;; don't save outgoing mail locally, as sent mails are saved in Gmail
;; automatically
(setq notmuch-fcc-dirs nil)

;; kill message composition buffers after sending
(setq message-kill-buffer-on-exit t)

(provide 'notmuch-config)

;;; notmuch-config.el ends here
#+end_example

** OrgMsg for composing HTML emails                                   :melpa:

[[https://github.com/jeremy-compostella/org-msg][OrgMsg]] provides HTML email composition capability.
Calling ~org-msg-mode~ toggles whether to use HTML composition for emails
by (by default, it is off).

#+name: org-msg
#+begin_src emacs-lisp
;; provides HTML email composition using Org-mode
;; for autogreeting, set `org-msg-greeting-fmt' to "\nHi *%s*,\n\n"
(use-package org-msg
  :config
  (setq org-msg-options (concat "html-postamble:nil H:5 num:nil ^:{} "
                                "toc:nil author:nil email:nil \\n:t")
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt nil
        org-msg-greeting-name-limit 3
        org-msg-text-plain-alternative t)
  (with-eval-after-load 'notmuch
    ;; enable HTML email message composition
    (org-msg-mode 1)
    ;; bindings to toggle HTML email message composition
    (dolist (keymap '(notmuch-hello-mode-map
                      notmuch-search-mode-map
                      notmuch-show-mode-map
                      notmuch-tree-mode-map))
      (define-key keymap (kbd "M") #'org-msg-mode))))
#+end_src

** Link to notmuch messages in Org-mode documents                  :external:

[[https://code.orgmode.org/bzg/org-mode/src/master/contrib/lisp/ol-notmuch.el][ol-notmuch]] is an Org-mode contributed package that adds Org-mode
support for notmuch links.

~ol-notmuch~ is installed either by installing the ~org-contrib~
package from the Org package repository, or by downloading the
=ol-notmuch.el= file to a directory on the ~load-path~ like a folder
in the =site-lisp/= subdirectory of ~emacs-user-directory~.

Loading the packages enables support for following notmuch links in
Org-mode buffers and storing links to searches and messages using
~org-store-link~.

*Note*: This requires Org mode 9.2.3 or newer.

#+name: ol-notmuch
#+begin_src emacs-lisp
(condition-case nil
    (require 'ol-notmuch)
  (error (message "ol-notmuch requires Org 9.2.3+")))
#+end_src

* Non-programming files

** Configuring the DocView mode                                    :external:

Emacs has a built-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView mode]] that utilizes available system tools
to view DVI, PS, PDF, OpenDocument, and Microsoft Office documents.

The following libraries provide document viewing capability:
- [[https://www.ghostscript.com/][Ghostscript]] for viewing DVI, PS, PDF and EPS files.
- [[https://poppler.freedesktop.org/][Poppler]] for viewing PDF files as text.
- [[https://0x2a.at/site/projects/djvu2pdf/][djvu2pdf]] for viewing DJVU files.
- [[https://github.com/unoconv/unoconv][unoconv]] for viewing Office files (requires LibreOffice be
  installed). Note that unoconv is not in MacPorts.

#+begin_example
$ sudo port install ghostscript
$ sudo port install poppler
$ sudo port install djvu2pdf
#+end_example

For more information, see [[https://emacsnotes.wordpress.com/2018/08/09/222/][this blog post]] on configurating and using DocView mode in Emacs.

Configure enhanced menus for DocView mode (from the blog post above).

#+name: doc-view-enhanced-menus
#+begin_src emacs-lisp
(with-eval-after-load 'doc-view
  (easy-menu-define my-doc-view-menu doc-view-mode-map "Menu for Doc-View Mode."
    '("DocView"
      ["Switch to a different mode" doc-view-toggle-display :help "Switch to a different mode"]
      ["Open Text" doc-view-open-text :help "Display the current doc's contents as text"]
      "--"
      ("Navigate Doc"
       ["Goto Page ..." doc-view-goto-page :help "View the page given by PAGE"]
       "--"
       ["Scroll Down" doc-view-scroll-down-or-previous-page :help "Scroll page down ARG lines if possible, else goto previous page"]
       ["Scroll Up" doc-view-scroll-up-or-next-page :help "Scroll page up ARG lines if possible, else goto next page"]
       "--"
       ["Next Line" doc-view-next-line-or-next-page :help "Scroll upward by ARG lines if possible, else goto next page"]
       ["Previous Line" doc-view-previous-line-or-previous-page :help "Scroll downward by ARG lines if possible, else goto previous page"]
       ("Customize"
        ["Continuous Off"
         (setq doc-view-continuous nil)
         :help "Stay put in the current page, when moving past first/last line" :style radio :selected
         (eq doc-view-continuous nil)]
        ["Continuous On"
         (setq doc-view-continuous t)
         :help "Goto to the previous/next page, when moving past first/last line" :style radio :selected
         (eq doc-view-continuous t)]
        "---"
        ["Save as Default"
         (customize-save-variable 'doc-view-continuous doc-view-continuous)
         t])
       "--"
       ["Next Page" doc-view-next-page :help "Browse ARG pages forward"]
       ["Previous Page" doc-view-previous-page :help "Browse ARG pages backward"]
       "--"
       ["First Page" doc-view-first-page :help "View the first page"]
       ["Last Page" doc-view-last-page :help "View the last page"])
      "--"
      ("Adjust Display"
       ["Enlarge" doc-view-enlarge :help "Enlarge the document by FACTOR"]
       ["Shrink" doc-view-shrink :help "Shrink the document"]
       "--"
       ["Fit Width To Window" doc-view-fit-width-to-window :help "Fit the image width to the window width"]
       ["Fit Height To Window" doc-view-fit-height-to-window :help "Fit the image height to the window height"]
       "--"
       ["Fit Page To Window" doc-view-fit-page-to-window :help "Fit the image to the window"]
       "--"
       ["Set Slice From Bounding Box" doc-view-set-slice-from-bounding-box :help "Set the slice from the document's BoundingBox information"]
       ["Set Slice Using Mouse" doc-view-set-slice-using-mouse :help "Set the slice of the images that should be displayed"]
       ["Set Slice" doc-view-set-slice :help "Set the slice of the images that should be displayed"]
       ["Reset Slice" doc-view-reset-slice :help "Reset the current slice"])
      ("Search"
       ["New Search ..."
        (doc-view-search t)
        :help "Jump to the next match or initiate a new search if NEW-QUERY is given"]
       "--"
       ["Search" doc-view-search :help "Jump to the next match or initiate a new search if NEW-QUERY is given"]
       ["Backward" doc-view-search-backward :help "Call `doc-view-search' for backward search"]
       "--"
       ["Show Tooltip" doc-view-show-tooltip :help nil])
      ("Maintain"
       ["Reconvert Doc" doc-view-reconvert-doc :help "Reconvert the current document"]
       "--"
       ["Clear Cache" doc-view-clear-cache :help "Delete the whole cache (`doc-view-cache-directory')"]
       ["Dired Cache" doc-view-dired-cache :help "Open `dired' in `doc-view-cache-directory'"]
       "--"
       ["Revert Buffer" doc-view-revert-buffer :help "Like `revert-buffer', but preserves the buffer's current modes"]
       "--"
       ["Kill Proc" doc-view-kill-proc :help "Kill the current converter process(es)"]
       ["Kill Proc And Buffer" doc-view-kill-proc-and-buffer :help "Kill the current buffer"])
      "--"
      ["Customize"
       (customize-group 'doc-view)]))
  (easy-menu-define my-doc-view-minor-mode-menu doc-view-minor-mode-map "Menu for Doc-View Minor Mode."
    '("DocView*"
      ["Display in DocView Mode" doc-view-toggle-display :help "View"]
      ["Exit DocView Mode" doc-view-minor-mode])))
#+end_src

** csv-mode for comma-delimited and tab-delimited files (CSV, TSV)     :elpa:

[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] provides a major mode for editing comma and tab delimited
(CSV and TSV) files.

To extend it to separator characters other the default comma and tab,
add or modify the ~csv-separators~ list.

#+name: csv-mode
#+begin_src emacs-lisp
(use-package csv-mode
  :commands csv-mode
  :bind (:map csv-mode-map
         ("C-c C-S-a" . csv-align-visible-fields))
  :config
  (setq csv-align-style 'auto) ;; `csv-align-fields' left/right-aligns text/numbers
  (defun csv-align-visible-fields ()
    "Align visible lines in `csv-mode'. Useful for large CSV files where
`csv-align-fields' can take a very long time to run."
    (interactive)
    (csv-align-fields nil (window-start) (window-end))))
#+end_src

** dockerfile-mode for Dockerfiles                                    :melpa:

[[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] provides a major mode for editing Docker files.

#+name: dockerfile-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :commands dockerfile-mode
  :config (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** nov.el for EPUB reading

[[https://depp.brause.cc/nov.el/][nov.el]] is a major mode for reading EPUB files.

#+name: nov
#+begin_src emacs-lisp
;; major mode for reading EPUBs
(use-package nov
  :init (add-to-list 'auto-mode-alist
                     '("\\.epub\\'" . nov-mode)))
#+end_src

** json-mode for JSON files                                           :melpa:

[[https://github.com/joshwnj/json-mode][json-mode]] provides a major mode for editing [[https://www.json.org/json-en.html][JSON]] files.

#+name: json-mode
#+begin_src emacs-lisp
;; provides a major mode for editing JSON files
(use-package json-mode
  :defer t)
#+end_src

** markdown-mode for Markdown files                                   :melpa:

[[https://jblevins.org/projects/markdown-mode/][markdown-mode]] provdes a major mode for editing Markdown files.

*Configuration*:
- Enable ~markdown-mode~ automatically for the common suffixes, except
  for =README.md= where ~gfm-mode~ is enabled instead for editing
  Github-flavored Markdown.
- Load the [[https://www.mathjax.org/][MathJax]] Javascript library in HTML output to render [[http://tug.org/][TeX]],
  [[https://www.w3.org/Math/][MathML]] and [[http://asciimath.org/][AsciiMath]] expressions, target HTML+CSS (the loaded
  configuration can be modified if targeting SVG or MathML instead).

#+name: markdown-mode
#+begin_src emacs-lisp
;; major mode for editing Markdown files
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  ;; place header markup only at the start of a line
  ;; syntax highlighting in fenced code blocks
  ;; use underscores for italics instead of asterisks
  (setq markdown-asymmetric-header t
        markdown-fontify-code-blocks-natively t
        markdown-italic-underscore t)
  ;; if available, use pandoc for converting markdown files
  (when (executable-find "pandoc")
    (setq markdown-command "pandoc --from markdown --to html"
          markdown-command-needs-filename t))
  ;; render mathematical expressions in HTML previews
  (setq markdown-xhtml-header-content
        (concat "<script type=\"text/x-mathjax-config\">"
                "MathJax.Hub.Config({"
                "  tex2jax: {"
                "    inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],"
                "    processEscapes: true"
                "  }"
                "});"
                "</script>"
                "<script type=\"text/javascript\" async"
                "        src=\"https://cdnjs.cloudflare.com/ajax/libs/"
                "mathjax/2.7.7/MathJax.js?config=TeX-MML-AM_CHTML\">"
                "</script>")))
#+end_src

*** markdown-toc for creating tables of content in Markdown buffers   :melpa:

#+name: markdown-toc
#+begin_src emacs-lisp
(use-package markdown-toc
  :after markdown-mode)
#+end_src

** YAML                                                               :melpa:

[[https://github.com/yoshiki/yaml-mode][yaml-mode]] provides a major mode for editing [[https://yaml.org/][YAML]] files.

#+name: yaml-mode
#+begin_src emacs-lisp
;; provides a major mode for editing YAML files
(use-package yaml-mode
  :commands yaml-mode
  :mode ("\\.ya?ml\\'" . yaml-mode))
#+end_src

** neuron-mode                                               :external:melpa:

[[https://github.com/felko/neuron-mode][neuron-mode]] is a mode for editing [[https://neuron.zettel.page/][neuron]] zettelkasten notes.

Assumes that neuron Zettelkasten files are stored in the
=~/zettelkasten= directory.

Requires that neuron be installed, which currently requires [[https://nixos.org/][nixpkg]].

#+name: neuron-mode
#+begin_src emacs-lisp
;; neuron-mode, settings adapted from
;; https://gist.github.com/felko/cdb3fc19b3a60db27eb3c5bd319fc479
(use-package neuron-mode
  :init
  (defface neuron-stub-face
    '((((class color) (min-colors 88) (background dark)) :foreground "#C16069" :underline "#C16069")
      (((class color) (min-colors 88) (background light)) :foreground "#C16069" :underline "#C16069")
      (((class color) :foreground "Red" :underline "Red"))
      (t :inherit neuron-title-overlay-face))
    "Face for stub links."
    :group 'neuron-faces)
  (setq neuron-default-zettelkasten-directory (expand-file-name "~/zettelkasten")
        neuron-default-tags '("stub")
        neuron-id-format 'hash
        neuron-tag-specific-title-faces '(("stub" neuron-stub-face)))
  :config
  ;; push location on to marker stack before following neuron link
  ;; so backtracking is possible via `xref-pop-marker-stack' or "M-,"
  (advice-add #'neuron-follow-thing-at-point :before #'xref-push-marker-stack))
#+end_src

*** Installing neuron

Some ways to install neuron:
- Download a static Linux bundle that can run as is (Linux-only).
- Install using [[https://nixos.org/][Nix]] (Linux, Mac, Windows via WSL).

**** Linux bundle

Nightly builds of static Linux bundles are available from [[https://github.com/srid/neuron/releases/tag/nightly][here]],
generated using [[https://github.com/matthewbauer/nix-bundle][nix-bundle]]. These can simply be run directly.

Download ~neuron-linux-bundle~ to some location on disk, say to the
=/path/to/= directory.

#+begin_example
$ chmod +x neuron-linux-bundle
$ ./neuron-linux-bundle --help
#+end_example

Symlink the bundle file to ~neuron~ a directory in ~$PATH~ (change
=./local/bin= and =/path/to/neuron-linux-bundle= as necessary).

#+begin_example
$ cd .local/bin
$ ln -s /path/to/neuron-linux-bundle neuron
#+end_example

Test that neuron is installed correctly.

#+begin_example
$ neuron --help
#+end_example

**** Nix installation

Install Nix. The following instructions show how to install Nix
in single-user mode; see the [[https://nixos.org/nix/manual/][official documentation]] for a multi-user
install.

#+begin_example
$ sudo mkdir /nix
$ sudo chown $USER /nix
$ curl -O https://nixos.org/nix/install
$ bash install --no-daemon
#+end_example

Note that the Nix =install= script can be safely removed after this.

Install neuron following [[https://neuron.zettel.page/2011501.html][instructions]] on the official website.

Install [[https://cachix.org/][Cachix]] if haven't already done so.

#+begin_example
$ nix-env -iA cachix -f https://cachix.org/api/v1/install
#+end_example

Use the cache to fetch binaries instead of compiling most packages.

#+begin_example
$ cachix use srid
#+end_example

Install Neuron.

#+begin_example
$ nix-env -if https://github.com/srid/neuron/archive/master.tar.gz
#+end_example

*** Upgrading neuron

Neuron upgrades can be done using the same command for installing it.

#+begin_example
$ nix-env -if https://github.com/srid/neuron/archive/master.tar.gz
#+end_example

* Org-mode

[[https://orgmode.org/][Org-mode]] is a major mode for document editing, formatting and
organizing, designed to help with taking notes, planning and authoring
in Emacs.
Org files typically have filenames with the ~.org~ suffix.

*Note*: The version of Org packaged with a given Emacs version is
typically adequate, but it is often better to install the newest
version of ~org~ from ELPA or the Org repository through
~list-packages~.

Examples of good configurations include [[http://doc.norang.ca/org-mode.html][this]].

*Customizations*:
- Use =~/org/= as the main Org directory.
- Set =inbox.org= in ~org-directory~ as the default filing location to
  be utilized later.

#+name: org
#+begin_src emacs-lisp
;; set Org directory and inbox file
(setq org-directory (file-name-as-directory (expand-file-name "~/org"))
      my-org-agenda-inbox (concat org-directory "inbox.org"))

;; basic Org-mode settings
(setq org-adapt-indentation nil ;; don't auto-indent when promoting/demoting
      org-attach-dir-relative t ;; use relative directories when setting DIR property using `org-attach-set-directory'
      ;; org-blank-before-new-entry '((heading . nil) ;; don't auto-add new lines
      ;;                              (plain-list-item . nil)) ;; same as above
      org-catch-invisible-edits 'show-and-error
      org-confirm-babel-evaluate nil ;; don't confirm before evaluating code blocks in Org documents
      org-cycle-separator-lines 2 ;; collapse single item separator lines when cycling
      org-edit-src-content-indentation 2
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t
      org-fontify-whole-heading-line t
      org-hide-emphasis-markers nil
      org-hide-leading-stars nil
      org-highlight-latex-and-related '(latex script entities) ;; highlight LaTeX fragments with the `org-highlight-latex-and-related' face
      org-image-actual-width (list (/ (display-pixel-width) 3)) ;; auto-resize displayed images to one-third of display width
      org-link-file-path-type 'adaptive ;; use relative paths for links to files in Org file dir or subdirs, absolute otherwise
      org-log-done 'time ;; log time that task was marked DONE
      org-log-into-drawer t
      org-outline-path-complete-in-steps nil
      org-pretty-entities t
      org-pretty-entities-include-sub-superscripts nil ;; don't render sub/superscripts in-buffer
      org-return-follows-link t
      org-src-fontify-natively nil ;; don't syntax color org source blocks
      org-src-preserve-indentation t ;; preserve src code block indentation on export and when switching btw org buffer and edit buffer
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window ;; reuse Org file window for editing source blocks when using "C-c '"
      org-startup-folded t
      org-startup-indented nil
      org-treat-S-cursor-todo-selection-as-state-change nil
      org-use-fast-todo-selection t
      org-use-speed-commands t)

;; make sure UUIDs generated for Org usage are alway upcased, which
;; solves issues with synced directories, for example Linux generates
;; lower case UUIDs while Mac generates upper case UUIDs.
(with-eval-after-load 'org-id
  (defun org-id-uuid--around-upcase (orig-fun &rest args)
    "Advice for `org-id-uuid' to upcase the uuids it outputs.
ORIG-FUN is the original function.
ARGS are the arguments provided to ORIG-FUN."
    (let ((uuid (apply orig-fun args)))
      (upcase uuid)))
  (advice-add 'org-id-uuid :around
              'org-id-uuid--around-upcase))
#+end_src

** Bind over org-open-line with version calling my-org-open-line-below

Bind over ~org-open-line~ with a variant that calls
~my-open-line-below~ instead.

#+name: my-org-open-line-below
#+begin_src emacs-lisp
(defun my-org-open-line-below (n)
  "Insert a new row in tables, call `my-open-line-below' elsewhere.
If `org-special-ctrl-o' is nil, call `my-open-line-below' everywhere.
As a special case, when a document starts with a table, allow to
call `open-line' on the very first character."
  (interactive "*p")
  (if (and org-special-ctrl-o (/= (point) 1) (org-at-table-p))
      (org-table-insert-row)
    (my-open-line-below n)))

;; bind over `org-open-line' to call `my-org-open-line-below' instead
;; making it consistent with customized global-mode-map "C-o"
(with-eval-after-load 'org-keys
  (define-key org-mode-map (kbd "C-o") #'my-org-open-line-below))
#+end_src

** Org TODO keywords and task states

Possible Org task states:
- *TODO*: Pending inactive task.
- *NEXT*: Active task.
- *DONE*: Completed task.
- *HOLD*: Paused inactive task.
- *WAIT*: Paused active task, waiting for external action before continuation.
- *CANX*: Canceled task.

#+name: org-todo-keywords
#+begin_src emacs-lisp
;; Set possible Org task states
;; Diagram of possible task state transitions
;;     -------------------------
;;     |                       |
;;     |                       v
;; -> TODO....... -> NEXT -> DONE ----->
;;    | ^  |  | ^    | ^      ^     |
;;    v |  |  v |    v |      |     |
;;   HOLD  |  WAIT...... ------     |
;;     |   |  | (note records what  |
;;     v   v  v  it is waiting for) |
;;     CANX.... ---------------------
;;     (note records why it was cancelled)
(setq org-todo-keywords '((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d!)")
                          (sequence "WAIT(w@/!)" "HOLD(h@/!)" "|" "CANX(c@/!)")))
#+end_src

** Org basic capture templates

#+name: org-capture-templates
#+begin_src emacs-lisp
;; Org capture templates
(setq org-capture-templates '(("t" "Todo" entry (file my-org-agenda-inbox)
                               "* TODO %i%?\n%U")
                              ("r" "Respond" entry (file my-org-agenda-inbox)
                               "* NEXT Respond to %i%?\n%U")
                              ("i" "Interrupt Task" entry (file my-org-agenda-inbox)
                               "* NEXT %i%?\n%U"
                               :jump-to-captured t :clock-in t :clock-resume t)
                              ("n" "Note" entry (file my-org-agenda-inbox)
                               "* %i%? :note:\n%U")
                              ("s" "Someday" entry (file my-org-agenda-inbox)
                               "* %i%? :someday:\n%U")
                              ("l" "Link" entry (file my-org-agenda-inbox)
                               "* %a%?\n%U")
                              ("y" "Paste" entry (file my-org-agenda-inbox)
                               "* %?\n%U\n%c")))
#+end_src

** Maximize Org capture buffers

Have Org capture buffers always be maximized.
Restore the window configuration after capturing the task.

#+name: org-maximize-capture-buffers
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; maximize org-capture buffer
  (defun my-org-capture-setup (&rest args)
    "Save window configuration prior to `org-capture'."
    (set-frame-parameter
     nil
     'my-org-capture-prior-config
     (current-window-configuration)))
  (defun my-org-capture-teardown ()
    "Restore window configuration prior to `org-capture'."
    (let ((prior-window-configuration (frame-parameter
                                       nil
                                       'my-org-capture-prior-config)))
      (when prior-window-configuration
        (set-window-configuration prior-window-configuration))))
  (advice-add 'org-capture :before 'my-org-capture-setup)
  (add-hook 'org-capture-mode-hook 'delete-other-windows)
  (add-hook 'org-capture-after-finalize-hook 'my-org-capture-teardown))
#+end_src

** Org tags

#+name: org-tags
#+begin_src emacs-lisp
;; tags (note that tags within the same group are mutually exclusive)
(setq org-tag-alist '((:startgroup) ;; importance
                      ("important" . ?1)
                      ("unimportant" . ?2)
                      (:endgroup)
                      (:startgroup) ;; time-sensitivity
                      ("urgent" . ?3)
                      ("nonurgent" . ?4)
                      (:endgroup)
                      (:startgroup) ;; location
                      ("@home" . ?7)
                      ("@office" . ?8)
                      ("@travel" . ?9)
                      ("@errands" . ?0)
                      (:endgroup)
                      (:startgroup) ;; export
                      ("export" . ?e)
                      ("noexport" . ?E)
                      (:endgroup)
                      ;; ungrouped
                      ("meeting" . ?m)
                      ("note" . ?n)
                      ;; work-related relationship category
                      ("hiring" . ?H)
                      ("managing" . ?M)
                      ("vendor" . ?V)
                      ("partner" . ?P)
                      ("client" . ?C)
                      ;; work-related meeting type
                      ("internal" . ?I)
                      ("external" . ?X)
                      ;; work-related project category
                      ("healthcare" . ?\^h) ;; C-h
                      ("retail" . ?\^r))) ;; C-r
#+end_src

** Org export global macros

Useful Org export macros that are enabled globally.

To color text (works with LaTeX and HTML exports):
#+begin_example
{{{color(colorname, text)}}}
#+end_example

To insert [[https://en.wikipedia.org/wiki/Lorem_ipsum][filler]] text:
#+begin_example
{{{loremipsum}}}
#+end_example

To export different text for LaTeX and for other formats:
#+begin_example
{{{if-latex-else(latex-specific text,other text)}}}
#+end_example

#+name: org-export-global-macros
#+begin_src emacs-lisp
;; `org-export' macros
(with-eval-after-load 'ox
  ;; color macro, {{{color(colorname, text)}}} to use
  (push `("color"
          .
          ,(concat "@@latex:\\textcolor{$1}{$2}@@"
                   "@@html:<span style=\"color:$1\">$2</span>@@"))
        org-export-global-macros)
  ;; placeholder text, {{{loremipsum}}} to use
  (push `("loremipsum"
          .
          ,(mapconcat 'identity
                      '("Lorem ipsum dolor sit amet, consectetur"
                        "adipisicing elit, sed do eiusmod tempor"
                        "incididunt ut labore et dolore magna"
                        "aliqua. Ut enim ad minim veniam, quis"
                        "nostrud exercitation ullamco laboris nisi"
                        "ut aliquip ex ea commodo consequat. Duis"
                        "aute irure dolor in reprehenderit in"
                        "voluptate velit esse cillum dolore eu"
                        "fugiat nulla pariatur. Excepteur sint"
                        "occaecat cupidatat non proident, sunt in"
                        "culpa qui officia deserunt mollit anim id"
                        "est laborum."
                        "\n\n"
                        "Curabitur pretium tincidunt lacus. Nulla"
                        "gravida orci a odio. Nullam varius, turpis"
                        "et commodo pharetra, est eros bibendum elit,"
                        "nec luctus magna felis sollicitudin mauris."
                        "Integer in mauris eu nibh euismod gravida."
                        "Duis ac tellus et risus vulputate vehicula."
                        "Donec lobortis risus a elit. Etiam tempor."
                        "Ut ullamcorper, ligula eu tempor congue,"
                        "eros est euismod turpis, id tincidunt sapien"
                        "risus a quam. Maecenas fermentum consequat"
                        "mi. Donec fermentum. Pellentesque malesuada"
                        "nulla a mi. Duis sapien sem, aliquet nec,"
                        "commodo eget, consequat quis, neque. Aliquam"
                        "faucibus, elit ut dictum aliquet, felis nisl"
                        "adipiscing sapien, sed malesuada diam lacus"
                        "eget erat. Cras mollis scelerisque nunc."
                        "Nullam arcu. Aliquam consequat. Curabitur"
                        "augue lorem, dapibus quis, laoreet et,"
                        "pretium ac, nisi. Aenean magna nisl, mollis"
                        "quis, molestie eu, feugiat in, orci. In hac"
                        "habitasse platea dictumst.")
                      " "))
        org-export-global-macros)
  ;; flow control for latex-specific text and otherwise
  ;; {{{if-latex-else(latex text, other text)}}} to use
  (push '("if-latex-else"
          .
          "(eval (if (org-export-derived-backend-p
                     org-export-current-backend
                     'latex)
                    $1
                  $2))")
        org-export-global-macros))
#+end_src

** Org Agenda

Org-mode provides [[https://orgmode.org/manual/Agenda-Views.html][agenda views]] that give an overview of open action
items or events with specific scheduled or deadline dates in Org files
specified by ~org-agenda-files~.

A number of customizations are done here, including defining
a view that displays 3-day agenda and undated ~TODO~ entries.

*Note*: Archiving ~DONE~ and ~CANX~ items every so often helps to keep
Org agenda parsing and operations speedy ([[https://www.gnu.org/software/emacs/manual/html_node/org/Speeding-up-your-agendas.html][link]]):
- ~M-x org-agenda~ to bring up the agenda menu.
- ~t~ to list ~TODO~ items.
- ~N r~ (where ~N~ is the number corresponding to a task state) to
  select the ~DONE~ (~N=3~ in this configuration) or the ~CANX~ (~N=6~
  in this configuration) task state.
- ~*~ to select all listed items.
- ~B $~ to bulk archive the selected items to their respective
  =<filename>.org_archive= files.

#+name: org-agenda
#+begin_src emacs-lisp
;; org-agenda settings:
;; - narrow to subtree in org-agenda-follow-mode ("F" in agenda)
;; - full-frame Agenda view
;; - use ~/ORG-DIRECTORY/*.org files as Org agenda files
(setq org-agenda-follow-indirect t
      org-agenda-restore-windows-after-quit t
      org-agenda-start-on-weekday nil
      org-agenda-window-setup 'only-window
      org-agenda-files (file-expand-wildcards (concat org-directory "*.org")))

;; add separator between each day in agenda view
(setq org-agenda-format-date
      (lambda (date)
        (let* ((datestr (org-agenda-format-date-aligned date))
               (separator-width (- (window-width)
                                   (string-width datestr)
                                   1)))
          (concat "\n" datestr " " (make-string separator-width ?_)))))

(with-eval-after-load 'org-agenda
  ;; add custom agenda commands that only show undated tasks in list view
  (dolist (my-custom-cmd
           '(("N" "Three-day agenda and undated TODO entries"
              ((agenda "" ((org-agenda-span 3)))
               (alltodo "" ((org-agenda-todo-ignore-with-date t)
                            (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up category-keep alpha-up))))))
             ("u" "Undated TODO entries"
              (alltodo "" ((org-agenda-todo-ignore-with-date t)
                           (org-agenda-sorting-strategy '(todo-state-up priority-down effort-up category-keep alpha-up)))))))
    (add-to-list 'org-agenda-custom-commands my-custom-cmd)))
#+end_src

** Org refiling of tasks and subtrees

Set up Org refile targets:
- Current buffer up to a max depth of 9 levels.
- Org Agenda files corresponding to non-directory entries of
  ~org-agenda-files~ at the top-level of each file.

#+name: org-refile
#+begin_src emacs-lisp
;; allow refiling up to 9 levels deep in the current buffer
;; and 3 levels deep in Org agenda files
;; allow refiling to the top level
(setq org-refile-targets `((nil . (:maxlevel . 9)) ;; current buffer
                           ;; top-level of regular `org-agenda-files' files
                           (,(seq-filter
                              'file-regular-p
                              org-agenda-files) . (:level . 0)))
      org-refile-use-outline-path 'file
      org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

** Automatic text wrapping in Org-mode documents

#+name: org-visual-line-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'visual-line-mode)
#+end_src

** Compile Org documents to PDF with LaTeX                         :external:

Org-mode supports an Org \to LaTeX \to PDF build chain for compiling Org
documents to PDF files.

By default, this build process utilizes the base ~latex~ compiler and
does not handle [[http://tug.org/bibtex/][BibTeX]] bibliography database files (~.bib~ files).

It is better change to this to a more modern compiler like [[http://www.luatex.org/][LuaTeX]] for
better font and unicode support, and add a BibTeX compiler like [[http://biblatex-biber.sourceforge.net/][Biber]]
to the build chain.

#+name: org-latex-pdf-process
#+begin_src emacs-lisp
;; compile Org documents to PDF with LuaTeX and Biber
(when (executable-find "lualatex")
  (with-eval-after-load 'org
    (setq org-latex-pdf-process
          '("lualatex -interaction nonstopmode -output-directory %o %f"
            "lualatex -interaction nonstopmode -output-directory %o %f"))
    (if (executable-find "biber")
        (push "biber %b" org-latex-pdf-process))
    (push "lualatex -interaction nonstopmode -output-directory %o %f"
          org-latex-pdf-process)))
#+end_src

** Use LuaTeX to generate LaTeX fragments previews in Org-mode     :external:

Use [[http://www.luatex.org/][LuaTeX]] to generate previews of [[https://orgmode.org/manual/LaTeX-fragments.html][LaTeX fragments]] as images in
~org-mode~.

The build chain converts LaTeX \to DVI \to PNG, so ~lualatex~ (LuaTeX
binary) and ~dvipng~ (which should come installed with most TeX
distributions) are needed.

For more information on LaTeX fragment previews, see [[https://orgmode.org/manual/Previewing-LaTeX-fragments.html#Previewing-LaTeX-fragments][here]].

#+name: org-preview-latex-process
#+begin_src emacs-lisp
;; use LuaTeX for previewing LaTeX math formula as images
(when (and (executable-find "lualatex")
           (executable-find "dvipng"))
  (with-eval-after-load 'org
    (add-to-list 'org-preview-latex-process-alist
                 '(dvipng :programs ("lualatex" "dvipng")
                          :description "dvi > png"
                          :message "you need to install lualatex and dvipng."
                          :image-input-type "dvi"
                          :image-output-type "png"
                          :image-size-adjust (1.0 . 1.0)
                          :latex-compiler
                          (concat "lualatex -output-format dvi"
                                  " -interaction nonstopmode"
                                  " -output-directory %o %f")
                          :image-converter ("dvipng -D %D -T tight -o %O %f")))))
#+end_src

** Automatically preview LaTeX fragments and resize them with text scaling :external:

Automatically preview LaTeX fragments and also scale them according
the current text scale (font size modifier).

#+name: org-preview-and-scale-latex-fragments
#+begin_src emacs-lisp
;; preview LaTeX fragments scaled to font size, requires dvipng from TexLive
(when (and (display-graphic-p)
           (executable-find "dvipng"))
  (with-eval-after-load 'org
    (defvar my-org-latex-scale-base (plist-get org-format-latex-options :scale)
      "Base LaTeX fragment scale.")
    (defun my-org-display-latex-fragments ()
      "Previews LaTeX fragments in the buffer scaled to match font size."
      (interactive)
      (let* ((curr-text-scale (condition-case nil
                                  text-scale-mode-amount
                                (error 0)))
             (new-latex-scale (+ my-org-latex-scale-base curr-text-scale)))
        (when (eq major-mode 'org-mode)
          ;; modify LaTeX scale in a local copy of `org-format-latex-options'
          (if (not (assoc 'org-format-latex-options (buffer-local-variables)))
              (setq-local org-format-latex-options
                          (copy-tree org-format-latex-options)))
          (setq-local org-format-latex-options
                      (plist-put org-format-latex-options :scale new-latex-scale))
          ;; preview LaTeX fragments
          (org--latex-preview-region (point-min) (point-max)))))
    ;; preview LaTeX fragments when opening Org documents ...
    (add-hook 'org-mode-hook (lambda (&optional arg)
                               (my-org-display-latex-fragments)))
    ;; ... and regenerate after changing font size
    (advice-add 'text-scale-mode :after (lambda (&optional arg)
                                          (my-org-display-latex-fragments)))))
#+end_src

** Mouse support and variable pitch fonts in graphical Emacs Org-mode

When using graphical emacs, enable mouse support (like clicking on the
header stars to cycle visibility of the subtree) and use variable
pitch fonts with a little extra line spacing except for certain parts of
Org documents like code and tables.

#+name: org-graphical-customizations
#+begin_src emacs-lisp
;; add mouse support and use variable pitch fonts in graphical Emacs org-mode
(when (display-graphic-p)
  (with-eval-after-load 'org
    (require 'org-mouse) ;; mouse support
    ;; use variable pitch fonts ...
    (add-hook 'org-mode-hook #'variable-pitch-mode)
    (add-hook 'org-mode-hook (lambda () (setq line-spacing 0.1)))
    ;; ... but keep some faces fixed-pitch
    (require 'org-indent) ;; ensure `org-indent' face is defined
    (let ((fixed-pitch-family (face-attribute 'fixed-pitch :family nil 'default)))
      (dolist (curr-face '(org-block
                           org-block-begin-line
                           org-block-end-line
                           org-code
                           org-date
                           org-document-info-keyword
                           org-done
                           org-indent ;; properly align indentation
                           org-latex-and-related
                           org-meta-line
                           org-property-value
                           org-special-keyword
                           org-table
                           org-todo
                           org-verbatim))
        (set-face-attribute curr-face nil :family fixed-pitch-family)))))
#+end_src

** org-cliplink for inserting URLs from the clipboard as Org-mode links :melpa:

[[https://github.com/rexim/org-cliplink][org-cliplink]] provides support for inserting URLs from the clipboard as
links in Org-mode documents with the URL page titles as link
descriptions.

#+name: org-cliplink
#+begin_src emacs-lisp
;; insert urls from clipboard as links with title of page
(when (display-graphic-p)
  (use-package org-cliplink
    :after org
    :bind (:map org-mode-map
           ("C-c C-S-l" . org-cliplink))))
#+end_src

** org-download for dragging and dropping images into Org-mode        :melpa:

[[https://github.com/abo-abo/org-download][org-download]] enables support for downloading images to Org-mode
documents, either by running an external command to capture a
screenshot or by dragging and dropping an image onto the document.

#+name: org-download
#+begin_src emacs-lisp
;; drag and drop images into Org buffers
(when (display-graphic-p)
  (use-package org-download
    :after org
    :config
    ;; Mac screenshot command
    (if (memq window-system '(mac ns))
        (setq org-download-screenshot-method "screencapture -i %s"))
    ;; adapted from https://coldnew.github.io/hexo-org-example/2018/05/22/use-org-download-to-drag-image-to-emacs/
    ;; save drag-and-drop images into folder of the same name as Org file
    ;; with filename prefixed by a timestamp of format `org-download-timestamp'
    ;; e.g. dragging test.png to abc.org saves it to abc/20180522183050-test.png
    (defun my-org-download-method (link)
      """Returns download save path for LINK, for use with `org-download'"""
      (let ((filename (format "%s%s"
                              (format-time-string org-download-timestamp)
                              (file-name-nondirectory
                               (car (url-path-and-query
                                     (url-generic-parse-url link))))))
            (dirname (file-name-sans-extension (buffer-name))))
        ;; create dir if it does not exist
        (unless (file-exists-p dirname)
          (make-directory dirname))
        ;; save path
        (expand-file-name filename dirname)))
    (setq org-download-method 'my-org-download-method
          org-download-timestamp "%Y%m%d%H%M%S-")))
#+end_src

** org-journal for journaling using Org-mode               :workaround:melpa:

[[https://github.com/bastibe/org-journal][org-journal]] extends journaling capabilities to Org-mode.

*Note*: Journal files are not added to the Org agenda by default in
the config due to potential slowdown as the number of files increases.
Instead it is better to use ~org-store-link~ to store an Org link to
the heading and then creating a new todo using ~org-capture~ and
pasting/yanking the Org link in the todo using ~C-c C-l~.

#+name: org-journal
#+begin_src emacs-lisp
;; journaling using Org documents
(use-package org-journal
  :after org
  :init
  ;; org-capture helper function from https://github.com/bastibe/org-journal
  (defun my-org-journal-find-location ()
    "Find location of today's Org journal, for use with `org-capture'."
    ;; Open today's journal but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
  ;; add org-capture-template for new journal entries
  (push '("j" "Journal" entry (function my-org-journal-find-location)
          "* %(format-time-string org-journal-time-format)%?\n%i")
        org-capture-templates)
  (setq org-journal-date-prefix "#+TITLE: Daily Journal "
        ;; separate journal files into folders by year
        org-journal-file-format "%Y/%Y%m%d.org"
        org-journal-file-type 'daily
        ;; don't carry over TODO items from a previous days
        org-journal-carryover-items nil
        ;; use ORG-DIRECTORY/journal/ as the default journal directory
        org-journal-dir (concat org-directory "journal/"))
  ;; add journal files to Org agenda
  ;; may cause the Org agenda parsing to slow down as the number as
  ;; the number of files grows, so make sure to prune or archive the
  ;; files elsewhere every so often if this is enabled.
  ;; (push org-journal-dir org-agenda-files)
  :config
  ;; workaround on `org-journal-is-journal' `string-match' error when
  ;; exporting to HTML due to `buffer-file-name' func returning nil
  (defun org-journal-is-journal--around-workaround (orig-fun &rest args)
    "Drop-in replacement advice function for `org-journal-is-journal'."
    (let ((buf-file-name (or (buffer-file-name) "")))
      (string-match (org-journal-dir-and-file-format->pattern)
                    buf-file-name)))
  (advice-add 'org-journal-is-journal :around
              #'org-journal-is-journal--around-workaround))
#+end_src

** org-present for minimalist presentations within Emacs              :melpa:

[[https://github.com/rlister/org-present][org-present]] extends org-mode so that it can be used for minimalist
presentations within Emacs.

Each top-level heading will correspond to a presentation slide.
=LEFT= and =RIGHT= will move forward and backward through the
slides, and =C-c C-q= will quit the presentation.

*Customizations*:
- Hide header and mode lines when presentation is active.
- Additional keybindings during presentation
  - =UP=/=DOWN=: Scroll up/down.
  - =SHIFT-UP=/=SHIFT-DOWN=: Go to top/bottom of slide.
  - =SHIFT-LEFT=/=SHIFT-RIGHT=: Go to first/last slide.
  - =f=: Toggle fullscreen.
  - =q=: Quit presentation (like =C-c C-q=).
  - =-=: Decrease text scale.
  - =+=: Increase text scale.

#+name: org-present
#+begin_src emacs-lisp
;; in-editor presentations using Org documents
(use-package org-present
  :after org
  :hook ((org-present-mode . (lambda ()
                               (org-present-big)
                               (org-display-inline-images)
                               (org-present-read-only)
                               (my-hide-header-and-mode-lines)))
         (org-present-mode-quit . (lambda ()
                                    (org-present-small)
                                    (org-remove-inline-images)
                                    (org-present-read-write)
                                    (my-unhide-header-and-mode-lines))))
  :config
  ;; regenerate LaTeX fragment preview images on slide transition
  (when (and (display-graphic-p)
             (executable-find "dvipng"))
    (add-hook 'org-present-after-navigate-functions
              (lambda (&optional name header)
                (my-org-display-latex-fragments))))
  ;; functions for hiding header and mode lines when in a presentation
  (defvar-local my-orig-mode-line-format nil
    "Temporary variable to store original `mode-line-format'.")
  (defvar-local my-orig-header-line-format nil
    "Temporary variable to store original `header-line-format'.")
  (defun my-hide-header-and-mode-lines ()
    "Hide header and mode lines, and store originals in temporary variables."
    (interactive)
    (when mode-line-format
      (setq-local my-orig-mode-line-format mode-line-format)
      (setq-local mode-line-format nil))
    (when header-line-format
      (setq-local my-orig-header-line-format header-line-format)
      (setq-local header-line-format nil)))
  (defun my-unhide-header-and-mode-lines ()
    "Reset header and mode lines using originals in temporary variables."
    (interactive)
    (when (not mode-line-format)
      (setq-local mode-line-format my-orig-mode-line-format)
      (setq-local my-orig-mode-line-format nil))
    (when (not header-line-format)
      (setq-local header-line-format my-orig-header-line-format)
      (setq-local my-orig-header-line-format nil)))
  ;; easier nav keys for read-only presentations
  (define-minor-mode my-org-present-extra-mode
    "Overlay minor mode on top of org-present-mode with easier nav keys."
    :keymap (let ((keymap (make-sparse-keymap)))
              ;; <left>/<right> = previous/next slide
              (define-key keymap (kbd "<up>") 'scroll-down-line)
              (define-key keymap (kbd "<down>") 'scroll-up-line)
              (define-key keymap (kbd "s-<up>") 'beginning-of-buffer)
              (define-key keymap (kbd "s-<down>") 'end-of-buffer)
              (define-key keymap (kbd "s-<left>") 'org-present-beginning)
              (define-key keymap (kbd "s-<right>") 'org-present-end)
              (define-key keymap (kbd "f") 'toggle-frame-fullscreen)
              (define-key keymap (kbd "q") 'org-present-quit)
              (define-key keymap (kbd "-") 'text-scale-decrease)
              (define-key keymap (kbd "+") 'text-scale-increase)
              keymap))
  ;; toggle minor mode after the relevant org-present funcalls
  (advice-add 'org-present-read-only
              :after (lambda () (my-org-present-extra-mode 1)))
  (advice-add 'org-present-read-write
              :after (lambda () (my-org-present-extra-mode 0))))
#+end_src

** ox-md for Org export backend to Markdown

Load the [[https://github.com/emacsmirror/org/blob/master/lisp/ox-md.el][built-in Org backend]] for exporting Org documents to Markdown.

#+name: ox-md
#+begin_src emacs-lisp
;; load Org backend for exporting to Markdown
(with-eval-after-load 'org
  (require 'ox-md))
#+end_src

** org-superstar for nicer headings and plain lists

[[https://github.com/integral-dw/org-superstar-mode][org-superstar]] provides a minor mode that replaces header stars and
plain lists in Org-mode with UTF-8 characters.

Replace plain list bullets can be slow when lists are long, so only
header star replacements are configured.

#+name: org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :init (setq org-superstar-headline-bullets-list '("◉" "◇" "○" "▷")
              ;; don't prettify plain lists, which can be slow
              org-superstar-prettify-item-bullets nil))
#+end_src

** org-noter for document annotation                                  :melpa:

[[https://github.com/weirdNox/org-noter][Org-noter]] allows the creation of external synchronized notes for
documents viewed using [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView]], [[https://github.com/politza/pdf-tools][PDF Tools]] or [[https://depp.brause.cc/nov.el/][Nov.el]].

Use ~C-c C-M-S-n~ or ~M-x org-noter~ while in an Org document or when
viewing a document in the above tools to annotate.

When annotating in the split-screen mode:
- ~i~ inserts a note approximately (document buffer-only).
- ~M-i~ inserts a precise note (document buffer-only).
- ~q~ exits the annotation session (document buffer-only).
- ~M-n~ goes to the next page.
- ~M-p~ goes to the previous page.
- ~C-M-n~ goes to the next note.
- ~C-M-p~ goes to the previous note.

#+name: org-noter
#+begin_src emacs-lisp
;; create sychronized external notes in DocView and Nov.el
(use-package org-noter
  :bind ("C-c C-M-S-n" . org-noter)
  :init (setq org-noter-always-create-frame nil))
#+end_src

** org-super-agenda                                                   :melpa:

[[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] groups agenda items into sections.

#+name: org-super-agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
  :config
  (setq org-super-agenda-groups '((:name "Today"
                                   :time-grid t
                                   :scheduled today)
                                  (:name "Due today"
                                   :deadline today)
                                  (:name "Important"
                                   :priority "A")
                                  (:name "Overdue"
                                   :deadline past)
                                  (:name "Due soon"
                                   :deadline future)
                                  (:name "Backlog"
                                   :scheduled past)
                                  (:name "Upcoming"
                                   :scheduled future)
                                  (:priority<= "B")
                                  (:name "Waiting"
                                   :todo "WAIT")
                                  (:name "On hold"
                                   :todo "HOLD")))
  (org-super-agenda-mode 1))
#+end_src

** org-protocol

Enable [[https://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]] to allow intercepting calls to emacsclient and
triggering custom actions.

~emacsclient~ will need to be set up as the ~org-protocol~ URL
handler. See the following sections for instructions.

#+name: org-protocol
#+begin_src emacs-lisp
;; start server and load org-protocol
(server-mode 1)
(require 'org-protocol)
#+end_src

*** Setting up org-protocol

**** Linux

Create the file =~/.local/share/applications/org-protocol.desktop=
with the following contents. Change the paths in the ~Exec~ and ~Icon~
entries as appropriate.
#+begin_example
[Desktop Entry]
Name=Org-Protocol
Exec=/path/to/emacsclient %u
Type=Application
Terminal=false
Category=System;
MimeType=x-scheme-handler/org-protocol;
Icon=/path/to/icons/emacs.png
#+end_example

Run the following to have ~emacsclient~ be the default handler for
~org-protocol://~ URLs. This will add the appropriate entry to
=~/.config/mimeapps.list= or =~/.local/share/applications.mimeapps.list=.
#+begin_example
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_example

*References*:
- [[https://github.com/alphapapa/org-protocol-capture-html#1-add-protocol-handler][GitHub - alphapapa/org-protocol-capture-html]]

**** macOS

If using Emacs Mac Port, it automatically registers itself as the handler
for ~org-protocol://~ URLs. Otherwise, do the following.

Create a new document using the /Script Editor/ app. The new document
should have the following contents. Change the path to the
~emacsclient~ binary as needed. Save the document in the *Application*
file format (not Script). The name of the saved document does not
matter, it can be say =OrgProtocol.app= or =org-protocol.app= or
something else.

#+begin_example
on open location this_URL
    do shell script "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient \"" & this_URL & "\""
end open location
#+end_example

Add the following to the =Contents/Info.plist= file in the newly saved
app (an app is a folder in the filesystem). Suppose the app was saved
to =/path/to/OrgProtocol.app= then open the
=/path/to/OrgProtocol.app/Contents/Info.plist= file in some editor
and add the following to the main ~/plist/dict~ block.

#+begin_example
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>org-protocol handler</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>org-protocol</string>
    </array>
  </dict>
</array>
#+end_example

Move =OrgProtocol.app= (or whatever the new app was named) to the
=/Applications/= folder, and the system should pick up the new app as
the ~org-protocol~ URL handler.

*References*:
- [[https://github.com/xuchunyang/setup-org-protocol-on-mac][GitHub - xuchunyang/setup-org-protocol-on-mac: Setting Up org-protocol on Mac]]

*** org-protocol-capture

The org-protocol-capture API can accessed by calling the URL starting
with ~org-protocol://capture~ and passing information through query
parameters.

org-protocol-capture supports a few URL query parameters:
- ~url~ corresponding to ~%:link~ in the capture template.
- ~title~ corresponding to ~%:description~ in the capture template.
- ~body~ corresponding to ~%:initial~ in the capture template. Note
  that in the bookmarklet below this is the selected text in the page.
  For the entire page's text, use ~document.body.innerText~ instead of
  ~window.getSelection()~.
- ~template~ which automatically loads the template associated with
  the parameter character, for example
  ~javascript:location.href='org-protocol://capture?template=b'+ ...~
  uses the template ?b automatically. Note that the template character
  must be unquoted.
For more info, see the docstring and code for ~org-protocol-capture~.

As an example, the following bookmarklet can be created in any web
browser and when clicked will send details about the current page to
the org-protocol capture API. This will bring into focus the Emacs
window and call `org-capture' with the query parameters.

#+begin_example
javascript:location.href='org-protocol://capture?url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
#+end_example

*** Capturing web snippets

One useful org-protocol use is to capture snippets from the web.

Add the following bookmarklet to a web browser.

#+begin_example
javascript:location.href='org-protocol://capture?template=W&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
#+end_example

Next configure the capture template used by the org-protocol bookmarklet.

#+name: org-capture-websnippet
#+begin_src emacs-lisp
;; add capture template for web snippets
(setq org-websnippet-capture-file "scratch/websnippets.org")
(push `("W" "Capture web snippet using org-protocol" entry
        (file+headline ,org-websnippet-capture-file "Unsorted")
        "* %?%:description\n:PROPERTIES:\n:URL: %:link\n:ADDED: %U\n:END:\n%:initial\n")
      org-capture-templates)
#+end_src

Clicking the bookmarklet will capture the selected text to the
websnippets Org file.

** org-wild-notifier for Org agenda event notifications               :melpa:

[[https://github.com/akhramov/org-wild-notifier.el][org-wild-notifier.el]] adds notification support for Org agenda views,
specifically it sends notifications for upcoming ~TODO~ entries.

#+name: org-wild-notifier
#+begin_src emacs-lisp
;; send notifications for Org agenda deadlines and scheduled tasks
(use-package org-wild-notifier
  :hook (after-init . org-wild-notifier-mode))
#+end_src

* Programming

** Buffer reformatter macro                                           :melpa:

[[https://github.com/purcell/reformatter.el][reformatter.el]] defines a macro to allow an easy way to create Elisp
commands that reformat the current buffer or a given region using a
command-line program, along with an optional minor mode that applies
the reformatting command automatically on save.

The following example from the official repository defines the following:
- An interactive command ~yaml-format-buffer~ which reformats the
  buffer.
- An interactive command ~yaml-format-region~ which reformats a
  selected region.
- A buffer-local minor mode ~yaml-format-on-save-mode~ that reformats
  the buffer on save when it is enabled.

#+begin_example
(reformatter-define yaml-format
  :program "prettier"
  :group 'yaml
  :lighter 'YAMLFmt)
#+end_example

#+name: reformatter
#+begin_src emacs-lisp
;; defines the `reformatter-define' macro that allows definition of
;; commands that run reformatters on the current buffer
(use-package reformatter)
#+end_src

** Flycheck syntax checker                                            :melpa:

[[https://www.flycheck.org/en/latest/][Flycheck]] ([[https://github.com/flycheck/flycheck][Github]]) is an on-the-fly syntax checker for Emacs that is a
popular alternative to the built-in [[https://elpa.gnu.org/packages/flymake.html][Flymake]] package.

If using this, it is typical to not enable Flymake.

#+name: flycheck
#+begin_src emacs-lisp
;; linting support, used in place of FlyMake
(use-package flycheck
  :init
  ;; customizations:
  ;; - remove newlines from events triggering linting checks
  ;; - don't mark error lines in fringe or margin
  (setq flycheck-check-syntax-automatically '(save
                                              idle-change
                                              mode-line)
        flycheck-indication-mode nil)
  :config
  ;; automatically adjust idle delay before automatically checking the
  ;; buffer depending on whether there are outstanding syntax errors;
  ;; check less frequently if there were no errors, and check more
  ;; frequently if there were errors; have this behavior be per-buffer
  (make-variable-buffer-local 'flycheck-idle-change-delay)
  (defun flycheck--adjust-flycheck-idle-change-delay ()
    "Adjust `flycheck-idle-change-delay' to check less frequently
when buffer is clean, and more frequently when it has errors."
    (setq flycheck-idle-change-delay (if flycheck-current-errors
                                         0.5
                                       3.0)))
  (add-hook 'flycheck-after-syntax-check-hook
            #'flycheck--adjust-flycheck-idle-change-delay)
  ;; default modes within which to use Flycheck
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode))
#+end_src

** Security linting using DevSkim and Flycheck                     :external:

[[https://github.com/Microsoft/DevSkim/][DevSkim]] is a collection of static analyzers that does code security
analysis.

If it is installed on the system, there is a Flycheck [[https://github.com/microsoft/DevSkim/tree/main/flycheck][backend]]
distributed with the official codebase (add to a directory in
~load-path~ and load it when initializing Emacs). It does not run by
default for the supported modes (C, C++ and Python), and has to be
chained to the checker that is run for those modes. For example,
~(flycheck-add-next-checker 'lsp 'devskim)~ if using ~lsp-mode~ is
used as the main checker for the mode.

#+name: flycheck-devskim
#+begin_src emacs-lisp
(when (executable-find "devskim")
  (use-package flycheck-devskim
    :ensure nil ;; in site-lisp subfolder within user emacs directory
    :config
    (setq flycheck-devskim-executable "devskim")
    (with-eval-after-load 'lsp-diagnostics
      (defun lsp-diagnostics--flycheck-enable--after-add-devskim (&rest _)
       "Chain devskim checker on the lsp checker after it is enabled."
       (flycheck-add-next-checker 'lsp 'devskim))
     (advice-add 'lsp-diagnostics--flycheck-enable :after
                 #'lsp-diagnostics--flycheck-enable--after-add-devskim))))
#+end_src

** Conda package and environment manager                              :melpa:

[[https://docs.conda.io/][Conda]] is a cross-platform package and environment manager, enabling
easy creation, saving, loading and switching of environments.

It was initially created to target Python development, but has
expanded beyond just that and now includes R and other software
packages.

*Customizations*:
- Set the conda home directory to =~/miniconda3/=.
- Support Eshell and term-mode buffers.
- Show current conda environment in the mode line.

#+name: conda
#+begin_src emacs-lisp
(when (executable-find "conda")
  (use-package conda
    :init (setq conda-anaconda-home (expand-file-name "~/miniconda3/"))
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    ;; display current conda env in the mode line
    (add-to-list 'mode-line-misc-info
                 '(:eval (if conda-env-current-name
                             (format " «%s»"
                                     (truncate-string-to-width
                                      conda-env-current-name
                                      15 nil nil "…"))
                           ""))
                 t)))
#+end_src

** lsp-mode Language Server Protocol client                           :melpa:

[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is an Language Server Protocol client for Emacs.
It is heavier than [[https://github.com/joaotavora/eglot][Emacs Polyglot]] (eglot) but also has more features.

#+name: lsp-mode
#+begin_src emacs-lisp
;; lsp-mode Language Server Protocol client
;; auto-signature-help activation is not enabled by default, but to
;; show it activate it using `lsp-toggle-signature-auto-activate' or
;; C-S-SPC to peek, https://github.com/emacs-lsp/lsp-mode/issues/1223
(use-package lsp-mode
  :init (setq lsp-print-io nil ;; disable logging packets between Emacs and LS
              lsp-print-performance nil ;; disable performance logging
              lsp-eldoc-enable-hover nil ;; don't have eldoc display hover info
              lsp-eldoc-render-all nil ;; don't show all returned from document/onHover, only symbol info
              lsp-enable-on-type-formatting nil ;; don't have the LS automatically format the document when typing
              lsp-diagnostic-package :flycheck ;; use Flycheck for syntax checking
              lsp-signature-auto-activate nil)) ;; don't automatically show signature
#+end_src

*** Installing and updating servers

For a number of languages, lsp-mode and its related packages support
automatic download of server binaries through ~lsp-dependency~
declarations.

~(lsp-install-server t)~ will manually update a server that was
automatically installed.

*** company-mode support for lsp-mode                                 :melpa:

Add company-mode support for lsp-mode.

#+name: company-lsp
#+begin_src emacs-lisp
;; company backend for LSP-driven completion
(use-package company-lsp
  :after lsp-mode
  :init (setq company-lsp-cache-candidates t))
#+end_src

** dap-mode Debug Adaptor Protocol client                             :melpa:

[[https://github.com/emacs-lsp/dap-mode][dap-mode]] is a Debug Adaptor Protocol client.

#+name: dap-mode
#+begin_src emacs-lisp
;; client for Debug Adaptor Protocol servers
(use-package dap-mode
  :after lsp-mode)
#+end_src

** Clojure

*** clojure-mode for basic Clojure support                            :melpa:

[[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] provides a major mode for editing Clojure buffers.

#+name: clojure-mode
#+begin_src emacs-lisp
;; basic support
(use-package clojure-mode
  :defer t
  :hook ((clojure-mode . paredit-mode)
         (clojure-mode . subword-mode)))
#+end_src

*** CIDER for a more complete Clojure development environment         :melpa:

[[https://docs.cider.mx/cider/index.html][CIDER]] (Clojure(Script) Interactive Development Environment that
Rocks!) complements ~clojure-mode~, providing additional functionality
for Clojure development including compiling, debugging, running tests,
definition and documentation lookup, and so on.

#+name: cider
#+begin_src emacs-lisp
;; Clojure IDE
(use-package cider
  :after clojure-mode
  :hook ((cider-mode . eldoc-mode)
         (cider-repl-mode . eldoc-mode)
         (cider-repl-mode . paredit-mode))
  :config (setq nrepl-log-messages t))
#+end_src

*** flycheck-clj-kondo for Clojure linting using clj-kondo   :melpa:external:

[[https://github.com/borkdude/flycheck-clj-kondo][flycheck-clj-kondo]] provides [[https://github.com/borkdude/clj-kondo][clj-kondo]] (a linter for Clojure code)
integration with Flycheck.

#+name: flycheck-clj-kondo
#+begin_src emacs-lisp
;; clojure linting, requires clj-kondo be installed on the system
(when (executable-find "clj-kondo")
  (use-package flycheck-clj-kondo
    :after (flycheck clojure-mode)
    :config
    (require 'flycheck-clj-kondo)
    ;; start flycheck-mode
    (add-hook 'clojure-mode-hook (lambda () (flycheck-mode 1)) t)))
#+end_src

** Emacs Lisp

*** el-patch                                                          :melpa:

[[https://github.com/raxod502/el-patch][el-patch]] provides a way to customize Emacs Lisp functions.

#+name: el-patch
#+begin_src emacs-lisp
(use-package el-patch
  :demand t)
#+end_src

**** Modify lisp-indent-function to handle property list indentation

Modify ~lisp-indent-function~ so that it indents property lists in
Emacs Lisp (and other Lisps) in the expected manner (like in Clojure).

Uses functions from the ~el-patch~ package, so make sure that package
is loaded before this code block.

#+name: modify-lisp-indent-function
#+begin_src emacs-lisp
;; Modifies lisp indentation to handle property lists used as
;; data structures
;; --- DEFAULT BEHAVIOR
;;  `(:token ,token
;;           :token-quality ,quality)
;; ---
;; --- DESIRED BEHAVIOR
;;  `(:token ,token
;;    :token-quality ,quality)
;; ---
;; Copied from https://emacs.stackexchange.com/questions/10230/
(with-eval-after-load 'lisp-mode
  (el-patch-defun lisp-indent-function (indent-point state)
    "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.
INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.
If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:
,* `defun', meaning indent `defun'-style
  (this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);
,* an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;
,* a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.
This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
    (el-patch-let (($cond (and (elt state 2)
                               (el-patch-wrap 1 1
                                 (or (not (looking-at "\\sw\\|\\s_"))
                                     (looking-at ":")))))
                   ($then (progn
                            (if (not (> (save-excursion (forward-line 1) (point))
                                        calculate-lisp-indent-last-sexp))
                                (progn (goto-char calculate-lisp-indent-last-sexp)
                                       (beginning-of-line)
                                       (parse-partial-sexp (point)
                                                           calculate-lisp-indent-last-sexp 0 t)))
                            ;; Indent under the list or under the first sexp on the same
                            ;; line as calculate-lisp-indent-last-sexp.  Note that first
                            ;; thing on that line has to be complete sexp since we are
                            ;; inside the innermost containing sexp.
                            (backward-prefix-chars)
                            (current-column)))
                   ($else (let ((function (buffer-substring (point)
                                                            (progn (forward-sexp 1) (point))))
                                method)
                            (setq method (or (function-get (intern-soft function)
                                                           'lisp-indent-function)
                                             (get (intern-soft function) 'lisp-indent-hook)))
                            (cond ((or (eq method 'defun)
                                       (and (null method)
                                            (> (length function) 3)
                                            (string-match "\\`def" function)))
                                   (lisp-indent-defform state indent-point))
                                  ((integerp method)
                                   (lisp-indent-specform method state
                                                         indent-point normal-indent))
                                  (method
                                   (funcall method indent-point state))))))
      (let ((normal-indent (current-column))
            (el-patch-add
              (orig-point (point))))
        (goto-char (1+ (elt state 1)))
        (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
        (el-patch-swap
          (if $cond
              ;; car of form doesn't seem to be a symbol
              $then
            $else)
          (cond
           ;; car of form doesn't seem to be a symbol, or is a keyword
           ($cond $then)
           ((and (save-excursion
                   (goto-char indent-point)
                   (skip-syntax-forward " ")
                   (not (looking-at ":")))
                 (save-excursion
                   (goto-char orig-point)
                   (looking-at ":")))
            (save-excursion
              (goto-char (+ 2 (elt state 1)))
              (current-column)))
           (t $else)))))))
#+end_src

** fish shell scripts

*** fish-mode                                                         :melpa:

[[https://github.com/wwwjfy/emacs-fish][fish-mode]] is a major-mode for working with [[https://fishshell.com/][fish shell]] scripts.

#+name: fish-mode
#+begin_src emacs-lisp
(use-package fish-mode
  :init (setq fish-enable-auto-indent t
              fish-indent-offset 4))
#+end_src

** Python

*** Use jupyter or ipython as the Python interpreter when available :external:

Create a POSIX shell script =py= with the following contents somewhere
on the system path, like =~/.local/bin/py= for example.

#+begin_example
#!/bin/sh

# Wrapper script to use jupyter or ipython, if available, over python

PY_CMD="python"
PY_EXTRA_ARGS=""

if command -v jupyter-console
then
  PY_CMD="jupyter-console"
  if echo "$INSIDE_EMACS" | grep -q -e ",comint$"
  then
    PY_EXTRA_ARGS="$PY_EXTRA_ARGS --simple-prompt"
  fi
elif command -v ipython
then
  PY_CMD="ipython"
  if echo "$INSIDE_EMACS" | grep -q -e ",comint$"
  then
    PY_EXTRA_ARGS="$PY_EXTRA_ARGS --simple-prompt -i"
  fi
else  # python
  if echo "$INSIDE_EMACS" | grep -q -e ",comint$"
  then
    PY_EXTRA_ARGS="$PY_EXTRA_ARGS -i"
  fi
fi

$PY_CMD $PY_EXTRA_ARGS $@
#+end_example

Make sure it is set to executable.

#+begin_example
$ chmod +x ~/.local/bin/py
#+end_example

Set the Emacs Python interpreter command and options to the script.

#+name: python-shell-interpreter
#+begin_src emacs-lisp
(setq python-shell-interpreter "py"
      python-shell-interpreter-args ""
      python-shell-prompt-detect-failure-warning nil)

(with-eval-after-load 'python
  (add-to-list 'python-shell-completion-native-disabled-interpreters "py"))
#+end_src

*Limitations*:
- Completion in the inferior shell does not work on object attributes
  (see [[https://github.com/jorgenschaefer/elpy/issues/1545][link]]).

*** Developing

#+begin_example
$ pip install -e .
#+end_example

or

#+begin_example
$ python setup.py --editable
#+end_example

*** Debugging

The intrusive way to debug Python programs is to create a debugging
breakpoint by adding a ~import pdb; pdb.set_trace()~ statement to the
desired breakpoint location.
Running the Python program normally will stop the program at the
breakpoint and bring up the ~pdb~ interface.

The non-intrusive way to debug is to run ~pdb~ as a module using
~python -m pdb some_script.py~ which starts debugging from the
beginning of the code.

Emacs provides a way to start the debugging session from the buffer:
run ~M-x pdb~ which opens ~pdb~ using Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Debuggers.html][Grand Unified Debugger]]
(GUD) which provides some additional user interface around ~pdb~.

*Note*: For autocompletion in ~pdb~, create a =~/.pdbrc= file with the
following contents.

#+begin_example
import rlcompleter
import pdb

pdb.Pdb.complete=rlcompleter.Completer(locals()).complete
#+end_example

*** Python syntax table

By default, Emacs uses ~_~ to demarcate word boundaries.

However, using snake case for variable names (for example,
~some_variable~) is idiomatic style in Python code, so modify the
Python syntax table to keep underscores within a word boundary.

#+name: python-mode-syntax-table
#+begin_src emacs-lisp
;; modify Python syntax table to keep underscores within a word
;; boundary when editing Python buffers
(with-eval-after-load 'python
  (modify-syntax-entry ?_ "w" python-mode-syntax-table))
#+end_src

*** Python buffer reformatter using black                          :external:

Use the ~reformatter-define~ macro from the ~reformatter~ package to
define two interactive commands ~python-black-format-buffer~ and
~python-black-format-region~ (only works on top-level objects) along
with the local minor mode ~python-black-format-on-save-mode~ that uses
[[https://github.com/psf/black][black]] to format the code in the buffer.

#+name: python-black-format
#+begin_src emacs-lisp
(with-eval-after-load 'reformatter
  ;; define `python-black-format-buffer', `python-black-format-region'
  ;; and `python-black-format-on-save-mode'
  (reformatter-define python-black-format
    :program "black"
    :args '("-")
    :group 'python
    :lighter 'PyBlFmt)
  ;; dwim function that calls `python-black-format-region' if a region
  ;; is selected, or `python-black-format-buffer' otherwise
  (defun python-black-format-buffer-or-region ()
       "Format the current Python buffer or a region if selected.
Formatting a selected region only works on top-level objects."
       (interactive)
       (cond
        ((use-region-p) (python-black-format-region (region-beginning)
                                                    (region-end)))
        (t (python-black-format-buffer)))))
#+end_src

*** Live Coding in Python                                             :melpa:

[[https://donkirkby.github.io/live-py-plugin/][Live Coding in Python]] ([[https://github.com/donkirkby/live-py-plugin][Github]]) provides a minor mode ~live-py-mode~
that supports live coding, similar to the coding environment described
in [[http://worrydream.com/][Bret Victor]]'s [[http://worrydream.com/#!/InventingOnPrinciple][Inventing on Principle]] talk ([[https://github.com/ezyang/cusec2012-victor/blob/master/transcript.md][transcript]]).

When enabled, Python code will be run as it is being typed and a side
window with a live coding buffer opened that visualizes the results.

#+name: live-py-mode
#+begin_src emacs-lisp
;; live coding in python
(use-package live-py-mode)
#+end_src

*** Microsoft Pyright Language Server support with lsp-pyright        :melpa:

[[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright]] enables the use of ~lsp-mode~ as a client for the
Microsoft [[https://github.com/microsoft/pyright][Pyright]] Python Language Server.

#+name: lsp-pyright
#+begin_src emacs-lisp
(use-package lsp-pyright
  :defer t
  :init
  (defun lsp-pyright--setup ()
    "Convenience function for setting up lsp-pyright."
    ;; load packages if deferred
    (require 'lsp-mode)
    (require 'lsp-pyright)
    ;; start LSP client
    (lsp-mode))
  (add-hook 'python-mode-hook #'lsp-pyright--setup t))
#+end_src

**** Installing pyright

If [[https://www.npmjs.com/][npm]] is installed and in ~$PATH~, pyright should be installed
automatically the first the client is started.

However, pyright can also be installed and managed manually.

***** Managing Node.js versions (optional)                         :external:

Installing a [[https://nodejs.org/][Node.js]] version manager will make managing Node.js
versions much less painful.

The standard Node.js version manager is [[https://github.com/nvm-sh/nvm][nvm]].

****** Installing nvm when Bash is the login shell

Either install nvm using the [[https://github.com/nvm-sh/nvm#installing-and-updating][install script]] or using MacPorts. The
following installs it using MacPorts.

#+begin_example
$ sudo port install nvm
#+end_example

Make sure NVM is initialized during Bash startup by adding the
following to the =~/.bash_profile= or =~/.bashrc= file.

#+begin_example
# Initialize NVM
if [ -e /opt/local/share/nvm/init-nvm.sh ]; then
  . /opt/local/share/nvm/init-nvm.sh
fi
#+end_example

Install the latest LTS version of Node.js using nvm.

#+begin_example
$ nvm install --lts
#+end_example

****** Installing nvm when fish is the login shell

If fish is the login shell, use [[https://github.com/jorgebucaran/fish-nvm][fish-nvm]] instead as nvm requires a
POSIX shell. The following installs fish-nvm using [[https://github.com/jorgebucaran/fisher][fisher]].

#+begin_example
$ fisher add jorgebucaran/fish-nvm
#+end_example

Install the latest LTS version of Node.js using nvm.

#+begin_example
$ nvm use lts
#+end_example

***** Installing and updating pyright

Make sure Node.js is installed and its binaries are in ~$PATH~.

Install pyright using [[https://www.npmjs.com/][npm]] which is bundled with Node.js.

The following installs it globally.

#+begin_example
$ npm install -g pyright
#+end_example

The following updates an existing install of pyright.

#+begin_example
$ npm update -g pyright
#+end_example

**** Installing Python stubs

Pyright depends on [[https://www.python.org/dev/peps/pep-0561/][type stubs]] for resolving imports (it can also scan
the library code for that if ~python.analysis.useLibraryCodeForTypes~
is enabled or ~lsp-pyright-use-library-code-for-types~ is set to ~t~
when using ~lsp-pyright~; however, this can have significant
overhead).

Pyright includes a copy of stdlib type stubs from [[https://github.com/python/typeshed][Typeshed]], and some
third-party packages also come with stubs defined.

In other cases it may be helpful to install third-party type stubs.
For example, the following shows the installation of a third-party
[[https://pypi.org/][PyPI]] package [[https://github.com/predictive-analytics-lab/data-science-types][data-science-types]] providing stubs for ~numpy~, ~scipy~
and ~pandas~ in a specific conda environment.

#+begin_example
$ conda activate some-dev-env
$ pip install data-science-types
#+end_example

*** Microsoft Python DAP Server support with dap-mode

#+name: dap-python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (require 'dap-python))
          t)
#+end_src

**** Installing the Microsoft Python debugger for Visual Studio Code

Microsoft's Python debugger for Visual Studio Code supports the Debug
Adaptor Protocol, and is available from [[https://pypi.org/][PyPI]] as the ~ptvsd~ package.

#+begin_example
$ pip install "ptvsd>=4.2"
#+end_example

If using conda, ~ptvsd~ is available from the ~conda-forge~ channel.
Make sure to install it within the environment where code to be
debugged will be run.

#+begin_example
$ conda install -c conda-forge ptvsd
#+end_example

** R

*** Emacs Speaks Statistics                                           :melpa:

R support is provided by [[https://ess.r-project.org/][Emacs Speaks Statistics]], more commonly known
by its abbreviation ESS ([[https://github.com/emacs-ess/ESS][Github]]).

If linting using Flycheck or Flymake, it might be necessary to install
the r-lintr CRAN package and also create the =~/.R/lintr_cache~=
directory (see [[https://emacs.stackexchange.com/questions/53018/flycheck-r-lintr-doesnt-find-anything][StackOverflow issue]]).

#+begin_example
# if using conda, replace my-renv with the proper environment name
# if not using conda, install via install.packages() instead
$ conda activate my-renv
$ conda install r-lintr
# ensure lintr cache directory exists
$ mkdir ~/.R/lintr_cache
#+end_example

#+name: ess
#+begin_src emacs-lisp
;; support for R language using Emacs Speaks Statistics
;; linting is configured here to use Flycheck
(use-package ess
  :mode ("\\.R$" . R-mode)
  :commands (R-mode ess-switch-to-ESS)
  :init (setq ess-eval-visibly 'nowait
              ess-default-style 'RStudio
              ;; disable ESS auto-use of Flymake since using Flycheck
              ess-use-flymake nil)
  :config (add-hook 'ess-r-mode-hook (lambda () (flycheck-mode 1)) t))
#+end_src

*** Shortcuts for commonly used R operators

The assignment operator ~<-~ is used a lot, so it makes sense to create a shortcut for that operator that is quicker to input.

Besides that, another good candidate is the forward pipe operator
~%>%~.
This operator is from the [[https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html][magrittr]] package (one of the [[https://www.tidyverse.org/][tidyverse]]
packages), which introduces the forward pipe operator ~%>%~, then
exposition pipe operator ~%$%~, the tee pipe operator ~%T>%~ and the
compound assignment pipe operator ~%<>%~.
Of these, the forward pipe operator ~%>%~ is most common in usage.

*Configuration*:
- ~M--~ inserts ~<-~ in ~ess-mode~ and ~inferior-ess-mode~.
- ~C-S-m~ inserts ~%>%~ followed by a new line in ~ess-mode~ and
  ~inferior-ess-mode~.

#+name: ess-pipe-operators
#+begin_src emacs-lisp
;; forward pipe and assignment R operator shortcuts, adapted from
;; https://emacs.stackexchange.com/questions/8041/how-to-implement-the-piping-operator-in-ess-mode
(defun my-insert-R-forward-pipe-operator ()
  "Insert R magrittr forward pipe operator '%>%'."
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(defun my-insert-R-assignment-operator ()
  "Insert R assigment operator '<-'."
  (interactive)
  (just-one-space 1)
  (insert "<- "))

;; bindings for the above R operator shortcuts
(with-eval-after-load 'ess-mode
  (define-key ess-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key ess-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))
(with-eval-after-load 'ess-inf
  (define-key inferior-ess-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key inferior-ess-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))
#+end_src

*** Better support for R Markdown and bookdown files                  :melpa:

[[https://github.com/polymode/poly-R/][poly-R]] provides better support for R Markdown and bookdown files, as
well as other formats interleaved with R code.

Leverages support for multiple major modes using [[https://github.com/polymode/polymode][polymode]] to have
different major modes be active for different buffer regions.

#+name: poly-R
#+begin_src emacs-lisp
(use-package poly-R)
#+end_src

** Racket                                                             :melpa:

[[https://github.com/greghendershott/racket-mode][racket-mode]] provides a major mode for editing Racket buffers.

#+name: racket-mode
#+begin_src emacs-lisp
(use-package racket-mode
  :defer t)
#+end_src

* Project interaction

** Projectile                                                         :melpa:

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs, providing many
convenience functions to navigate, search and build projects.

*Customizations*:
- Create test file if missing when toggling to it using ~projectile-toggle-between-implementation-and-test~.
- Run ~projectile-commander~ instead of ~projectile-find-file~ when switching projects using ~projectile-switch-project~.
- Use ~git grep~ when searching within the project.
- Enable globally.

#+name: projectile
#+begin_src emacs-lisp
;; project interaction library
(use-package projectile
  :demand t
  :config
  (setq projectile-completion-system (if (featurep 'helm) 'helm 'default)
        projectile-create-missing-test-files t ;; create test file if none is found when toggling
        projectile-switch-project-action 'projectile-commander
        projectile-use-git-grep t) ;; use git grep to skip backup, object, and untracked files when in a Git project
  (projectile-mode)) ;; enable mode globally
#+end_src

*** org-projectile for Projectile project Org TODOs                   :melpa:

[[https://github.com/IvanMalison/org-projectile][org-projectile]] provides functions for creating Org TODOs for [[Projectile][Projectile]] projects.
It can be set up to use one file for all projects (the default), or one file per
project.
Configure it to use one file per project, specifically a ~TODO.org~ file at the
root directory of the project.
Also add a corresponding entry type to ~org-capture-templates~.

#+name: org-projectile
#+begin_src emacs-lisp
;; Org TODOs for projectile projects
;; use `org-capture' to capture and store TODOs for the current project
;; in `org-projectile-per-project-filepath' at the project's root directory
(use-package org-projectile
  :after (org projectile)
  :config
  (org-projectile-per-project)
  (setq org-projectile-per-project-filepath "TODO.org")
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src

** Magit                                                     :external:melpa:

[[https://github.com/magit/magit][Magit]] is a [[https://git-scm.com/][Git]] porcelain.
In other words, it is an high-level interface to the ~git~
command-line program on the system.

Under the below configuration, Magit uses [[https://www.gnu.org/software/emacs/manual/html_node/auth/index.html][auth-source]] to look up
passwords (from the sources listed in ~auth-sources~). A user
password/token can be stored using ~pass~ while a machine-specific
password/token can be stored in =~/.authinfo.gpg= (both use GnuPG for
encryption). Each entry in =~/.authinfo.gpg= should have the following
form.
#+begin_example
machine <hostname> login <login_name> password <password> [port <port_number_or_name>]
#+end_example

#+name: magit
#+begin_src emacs-lisp
;; binding for calling Magit
(use-package magit
  :commands magit-status
  :bind ("C-c C-M-g" . magit-status)
  :config (add-hook 'magit-process-find-password-functions
                    #'magit-process-password-auth-source))

;; Uncomment to check VC info on file auto-revert (increases I/O load)
;; https://magit.vc/manual/magit/The-mode_002dline-information-isn_0027t-always-up_002dto_002ddate.html
;; (setq auto-revert-check-vc-info t)
#+end_src

*** Magit integration with Ibuffer

Integrate Magit with Ibuffer, so that ~magit-status~ can be called on
the file at point in Ibuffer.

This uses the ~ibuffer-vc~ package, which is used to retrieve the
root directory of the file's project.

Adapted from [[https://www.manueluberti.eu/emacs/2019/08/06/ibuffer-magit/][here]].

#+name: magit-ibuffer-integration
#+begin_src emacs-lisp
;; call `magit-status' for file at point in Ibuffer, uses `ibuffer-vc'
;; adapted from https://www.manueluberti.eu/emacs/2019/08/06/ibuffer-magit/
(defun my-ibuffer-magit-status-at-pt ()
  "Call `magit-status' for the buffer at point while in Ibuffer."
  (interactive)
  (condition-case nil
      (progn
        (require 'ibuffer-vc)
        (let ((buf (ibuffer-current-buffer t)))
          (magit-status (cdr (ibuffer-vc-root buf)))))
    (message "requires `ibuffer-vc' package be installed.")))

;; bind the above function to the "G" key in Ibuffer
(with-eval-after-load 'ibuffer
  (define-key ibuffer-mode-map (kbd "G") #'my-ibuffer-magit-status-at-pt))
#+end_src

** Viewing historical versions of Git-controlled files

[[https://gitlab.com/pidu/git-timemachine][git-timemachine]] provides an easy way to view and step through
historical versions of Git-controlled files.

#+name: git-timemachine
#+begin_src emacs-lisp
;; Browse older versions of Git-controlled files
(use-package git-timemachine
  :commands git-timemachine
  :bind ("C-c C-M-S-g" . git-timemachine))
#+end_src

** Browse Git-controlled file remotely or get its Url                 :melpa:

[[https://github.com/rmuslimov/browse-at-remote][browse-at-remote.el]] provides an easy way to open a Git controlled file
remotely in a browser or to copy its remote URL.

#+name: browse-at-remote
#+begin_src emacs-lisp
(use-package browse-at-remote)
#+end_src

** Treemacs                                                           :melpa:

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a per-project file tree explorer for Emacs.

#+name: treemacs
#+begin_src emacs-lisp
;; per-project file trees
(use-package treemacs
  :demand t
  :bind ("C-c C-M-S-t" . treemacs)
  :init
  ;; resize treemacs icon sizes to 75% of line-height
  (add-hook 'after-init-hook
            (lambda ()
              (when (and (display-graphic-p)
                         (eq system-type 'darwin))
                (treemacs-resize-icons
                 (truncate (* (line-pixel-height) 0.75)))))))
#+end_src

*** Treemacs Projectile integration

Allows quick addition of Projectile projects to Treemacs workspaces.

#+name: treemacs-projectile
#+begin_src emacs-lisp
;; treemacs projectile integration
(use-package treemacs-projectile
  :after (treemacs projectile))
#+end_src

*** Treemacs Magit integration

Have Magit operations be reflected automatically in Treemacs.

#+name: treemacs-magit
#+begin_src emacs-lisp
;; treemacs magit integration
(use-package treemacs-magit
  :after (treemacs magit))
#+end_src

*** Treemacs all-the-icons integration

Use icons from all-the-icons in Treemacs.

#+name: treemacs-all-the-icons
#+begin_src emacs-lisp
;; use icons from all-the-icons in Treemacs
(use-package treemacs-all-the-icons
  :after (treemacs all-the-icons)
  :config
  (treemacs-load-theme "all-the-icons")
  ;; reduce tab-width to fix spacing between icons and text
  (add-hook 'treemacs-mode-hook
            (lambda () (setq-local tab-width 2)))
  ;; do the same if `helm-icons' is being used
  (with-eval-after-load 'helm-icons
    (add-hook 'helm-after-initialize-hook
              (lambda ()
                (with-helm-buffer
                  (setq tab-width 2))))))
#+end_src

* Search

** wgrep for writable grep buffers with changes pushed to files       :melpa:

[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep.el]] makes grep buffers writable with changes pushed to files.
Enable with ~C-c C-p~ when in a ~*grep*~ buffer.

Automatically installed by ~rg.el~.

#+name: wgrep
#+begin_src emacs-lisp
;; "C-c C-p" in grep bufs allow writing with changes pushed to files
(use-package wgrep
  :config (setq wgrep-auto-save-buffer nil
                wgrep-too-many-file-length 10))
#+end_src

** Ripgrep support with rg.el                                :external:melpa:

[[https://github.com/dajva/rg.el][rg.el]] provides support for [[https://github.com/BurntSushi/ripgrep][ripgrep]], an alternative for the grep search tool that is
extremely fast.

It supports inline editing of search results via [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]], accessed
through ~e~ while on the search results page.

#+name: ripgrep
#+begin_src emacs-lisp
(when (executable-find "rg")
  (use-package rg
    :bind ("<f6>" . rg-menu)))
#+end_src

** Show match counts with Anzu                                        :melpa:

[[https://github.com/emacsorphanage/anzu][anzu.el]] provides a minor mode that shows the total number of matches
when searching and the current match number.

*Warning*:
This can be pretty slow in large buffers.
Consider turning off this mode for the buffer in those cases.

#+name: anzu
#+begin_src emacs-lisp
;; show current and total search matches, and preview query replace results
(use-package anzu
  :bind (([remap query-replace] . anzu-query-replace)
         ([remap query-replace-regexp] . anzu-query-replace-regexp))
  :init (global-anzu-mode))
#+end_src

** dumb-jump                                                          :melpa:

[[https://github.com/jacktasia/dumb-jump][dumb-jump]] provides jump to definition capability based on fast
searching using [[https://github.com/ggreer/the_silver_searcher][ag]], [[https://github.com/BurntSushi/ripgrep][rg]] or grep to find potential definitions of the
function or variable under point and filtering based on heuristics.

It is configured here as a fallback backend for
~xref-find-definitions~ when no better options are available.

#+name: dumb-jump
#+begin_src emacs-lisp
;; jump to definition using ag or rg and applying heuristics
(use-package dumb-jump
  :init
  (setq dumb-jump-aggressive nil
        dumb-jump-default-project "./"
        dumb-jump-prefer-searcher 'rg
        dumb-jump-selector (if (fboundp 'helm)
                               'helm
                             'completing-read))
  :config
  ;; add dumb-jump to the end of the list of backends for
  ;; `xref-find-definitions' so it is used as a fallback option
  ;; when no better finders are available
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate t))
#+end_src

** avy                                                                :melpa:

[[https://github.com/abo-abo/avy][Avy]] provides support for jumping to visible text by traversing a
character-based decision tree.

*Configuration*:
- Remap ~goto-line~ bindings to call ~avy-goto-line~ instead.
  ~goto-line~ can be invoked by entering numbers for ~avy-goto-line~
  input instead of characters in the decision tree.

#+name: avy
#+begin_src emacs-lisp
;; jump to visible text using char-based decision tree
(use-package avy
  :config
  ;; bind over `goto-line' since it can be invoked by entering numbers
  ;; for `avy-goto-line' input instead characters in the decision tree
  (global-set-key [remap goto-line] #'avy-goto-line)
  ;; jump to location in frame using "C-:"
  (global-set-key (kbd "C-:") #'avy-goto-char-timer))
#+end_src

** ace-link                                                           :melpa:

[[https://github.com/abo-abo/ace-link][ace-link]] provides support for displaying, selecting and jumping to links
in a number of major modes using [[https://github.com/abo-abo/avy][avy]] as the backend.

*Configuration*:
- Call default setup code, which binds ~o~ in ~compilation-mode~,
  ~Custom-mode~, ~eww-mode~, ~help-mode~, ~Info-mode~ and ~woman-mode~
  to the corresponding ace-link command.
- ~M-O~ in ~org-mode-map~ calls the corresponding ace-link function.

#+name: ace-link
#+begin_src emacs-lisp
;; display, select and jump to links in various major modes
(use-package ace-link
  :config
  ;; bind "o" to calling ace-link in compilation-mode, Custom-mode,
  ;; eww-mode, help-mode, Info-mode and woman-mode
  (ace-link-setup-default)
  ;; bind "M-O" (Meta-CapitalOh) to jump to link in Org mode
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-O") #'ace-link-org))
  (with-eval-after-load 'org-agenda
    (define-key org-agenda-mode-map (kbd "M-O") #'ace-link-org-agenda)))
#+end_src

** Notdeft for searching notes and other text files

[[https://github.com/hasu/notdeft][Notdeft]] is an Emacs mode for quickly searching and managing
directories of files, utilizing [[https://xapian.org/][Xapian]] for indexing.

*** Installing Notdeft                                             :external:

Clone ~notdeft~ into a build directory (change =~/build= as needed).
This can be a new directory in one of the ~load-path~ directories,
for example the =site-lisp= subdirectory in ~user-emacs-directory~.

#+begin_example
$ cd ~/.emacs.d/site-lisp
$ git clone https://github.com/hasu/notdeft.git
#+end_example

Install build dependencies and compile the ~notdeft-xapian~ backend.
The following shows installing of build dependencies using MacPorts
(modify the dependency installation step as needed if using another
package manager).

#+begin_example
$ sudo port install tclap xapian
$ cd notdeft
$ make
$ cd xapian
$ make
#+end_example

If notdeft was not cloned and built to a subdirectory in ~load-path~
(like the =site-lisp= folder in ~user-emacs-directory~), make a
shallow copy (no ~.git~ directory) or create a softlink to a
~load-path~ directory.

The following shows the softlink approach
(replace =~/.emacs.d/site-lisp= as appropriate).

#+begin_example
$ ln -s ~/build/notdeft ~/.emacs.d/site-lisp
#+end_example

*** Configuring Notdeft

*Configuration*:
- Use the =journal= and =scratch= subdirectories in the Org
  directory (specified by the ~org-directory~ variable).
- Use Org documents as primary file format, supporting text and
  Markdown as secondary file formats.
- Set the path to the =notdeft-xapian= compiled binary.

#+name: notdeft
#+begin_src emacs-lisp
;; load notdeft if installed, make sure org-directory is set prior
(require 'notdeft-autoloads nil t)
(when (featurep 'notdeft-autoloads)
  (setq notdeft-directories `(,(concat org-directory "journal/")
                              ,(concat org-directory "scratch/"))
        notdeft-extension "org"
        notdeft-secondary-extensions '("md" "txt")
        notdeft-directory (concat org-directory "scratch/")
        notdeft-xapian-program (concat (file-name-directory
                                        (locate-library "notdeft"))
                                       "xapian/notdeft-xapian"))
  ;; binding to access Notdeft
  (global-set-key (kbd "C-c C-M-s") #'notdeft))
#+end_src

** Imenu

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][Imenu]] allows jumping to major definitions in a file by name.
Have Imenu automatically rescan whenever the content changes.

#+name: imenu-auto-rescan
#+begin_src emacs-lisp
(setq imenu-auto-rescan t)
#+end_src

*** Imenu extension to all open buffers using imenu-anywhere          :melpa:

[[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]] provides an Imenu extension that lists major
definitions across all open buffers.

#+name: imenu-anywhere
#+begin_src emacs-lisp
;; menu list of major definitions across several buffers
(use-package imenu-anywhere
  :defer t
  :after imenu
  :bind ("C-c C-M-;" . imenu-anywhere))
#+end_src

*** Imenu extension to list headings in a side buffer                 :melpa:

[[https://github.com/bmag/imenu-list][imenu-list]] is an Imenu extension that opens up a side buffer
listing the major definitions and headings in the current buffer.
This configuration customizes it such that on jumping to a
definition or heading, it pulses the destination line once
and automatically closes the imenu-list.

#+name: imenu-list
#+begin_src emacs-lisp
;; show imenu as a list in a side buffer
(use-package imenu-list
  :defer t
  :after imenu
  :bind ("C-c C-M-'" . imenu-list-smart-toggle)
  :config
  (setq imenu-list-focus-after-activation t)
  ;; pulse target after selecting
  (add-hook 'imenu-list-after-jump-hook
            (lambda () (pulse-momentary-highlight-one-line (point))))
  ;; close imenu list after going to entry
  (advice-add 'imenu-list-goto-entry :after 'imenu-list-quit-window))
#+end_src

* Visual

** Change default cursor type                                         :early:

Change cursor type to a non-blinking bar.

#+name: cursor
#+begin_src emacs-lisp
;; set cursor after initialization
(setq-default cursor-type 'bar)
(blink-cursor-mode 0)
#+end_src

** Decorations                                                        :early:

Remove toolbar and menu to maximize space usage.

#+name: remove-decorations
#+begin_src emacs-lisp
;; remove unused UI elements
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (and (not (display-graphic-p))
         (fboundp 'menu-bar-mode))
    (menu-bar-mode -1))
#+end_src

** Custom color theme                                        :external:early:

Use custom ~ereader~ theme in ~lisp/ereader-theme.el~.

#+name: load-custom-theme
#+begin_src emacs-lisp
;; use local eReader theme from ~/.emacs.d/themes/ereader-theme.el
(add-to-list 'custom-theme-load-path
             (file-name-as-directory
              (expand-file-name "themes" user-emacs-directory)))
(load-theme 'ereader t)
#+end_src

*Note*: Emacs 27+ added a new face attribute ~:extend~ to control extension of the face from the EOL until the edge of the window. By default it is only turned on for the ~hl-line~ and ~region~ faces. When modifying the custom theme, make sure to set this attribute to ~t~ for the faces that need to be extended.

** Display face fonts                                                 :early:

Set the fonts used for display faces.

There are a few main display faces many other faces inherit from:
- ~default~: The main display face, everything inherits from this directly or
  indirectly unless otherwise specified.
- ~fixed-pitch~: For specific cases where a fixed-pitch
  (i.e. monospace) font is expected.
- ~variable-pitch~: For specific cases where a variable-pitch
  (i.e. proportional) font is expected.
- ~mode-line~: Mode line face for active buffers.
- ~mode-line-inactive~: Mode line face for inactive buffers.

Also set a fallback font for filling gaps in character coverage in the
display face fonts using ~set-fontset-font~,
which has the function signature
~(set-fontset-font NAME TARGET FONT-SPEC &optional FRAME ADD)~.
The key observations here are that:
- When ~NAME~ is ~t~, this is applied to the default fontset.
- When ~TARGET~ is ~nil~, ~FONT-SPEC~ is used for missing characters
  (if it has that character).
- When ~ADD~ is ~append~, then this font is added to the end of the
  fontset which means it will be searched for a matching character
  glyph after all other fonts in the set.

For a list of good free or open-source fonts, see this [[https://github.com/matheuristic/dotfiles/blob/master/font_notes.org][link]].
For more information about fonts and fontsets in Emacs, see this [[https://idiocy.org/emacs-fonts-and-fontsets.html][link]].

#+name: set-display-face-fonts
#+begin_src emacs-lisp
;; set typefaces for graphical Emacs
;; main fonts
(set-face-attribute 'default nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 150 110)
                    :weight 'normal :width 'normal)
(set-face-attribute 'fixed-pitch nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 150 110)
                    :weight 'normal :width 'normal)
(set-face-attribute 'variable-pitch nil :family "Iosevka Aile"
                    :height (if (eq system-type 'darwin) 150 110)
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 120 90)
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line-inactive nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 120 90)
                    :weight 'normal :width 'normal)
;; fallback font
(set-fontset-font t nil "Symbola" nil 'append)
;; increase min underline offset for more readable underlined words
(setq underline-minimum-offset 5)
#+end_src

For some fonts, an alternative character may be preferable to the
standard character show for some symbol code.
In those instances, the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#Active-Display-Table][standard display table]] can be modified to
display replace characters of a given code with characters of a
different one.
An example is shown below.

#+begin_example
;; the following displays '0' using '\ue007' (private slashed zero in B612 font)
(setq standard-display-table (make-display-table))
(aset standard-display-table ?0 [?])
#+end_example

** Icon fonts using all-the-icons       :workaround:semiearly:external:melpa:

Icon fonts can be enabled using the [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package.
These are useful for a few scenarios:
- Fitting more information in the mode line by converting descriptor words into icons.
- Making the interface more visually information and/or appealing (subjective).

Package functionality requires that specific icon fonts be installed
on the system. This can be done automatically by running ~M-x
all-the-icons-install-fonts~, or manually by installing the TTF fonts
from [[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][here]] using the system font manager (for example the Font Book app
on macOS).

#+name: all-the-icons
#+begin_src emacs-lisp
;; font icons
(when (display-graphic-p)
  (use-package all-the-icons
    :config (setq all-the-icons-color-icons nil
                  ;; workaround for doom-modeline getting truncated in certain conditions
                  ;; https://github.com/hlissner/doom-emacs/issues/2967#issuecomment-619319082
                  all-the-icons-scale-factor 1.1)))
#+end_src

** Fancy mode line using doom-modeline           :workaround:semiearly:melpa:

Use [[https://github.com/seagle0128/doom-modeline][doom-modeline]] when not using via a TTY.
Requires the ~all-the-icons~ package.

#+name: doom-modeline
#+begin_src emacs-lisp
;; set custom mode line in graphical Emacs
(when (display-graphic-p)
  ;; fast and fancy minimalist mode line, requires all-the-icons be installed
  (use-package doom-modeline
    :after all-the-icons
    :config
    (setq doom-modeline-buffer-file-name-style 'buffer-name
          doom-modeline-env-version nil
          doom-modeline-height 23 ;; change this based on mode-line face height
          doom-modeline-icon (display-graphic-p)
          doom-modeline-irc nil
          doom-modeline-minor-modes t
          doom-modeline-persp-name nil
          doom-modeline-unicode-fallback t)
    ;; workaround for modeline getting truncated in certain conditions
    ;; https://github.com/hlissner/doom-emacs/issues/2967#issuecomment-619319082
    (doom-modeline-def-modeline 'main
      '("  " workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
      '(objed-state misc-info grip debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker "  "))
    ;; hide left margin indicator bar
    (set-face-background 'doom-modeline-bar
                         (face-background 'mode-line))
    (set-face-background 'doom-modeline-bar-inactive
                         (face-background 'mode-line-inactive))
    ;; enable mode line
    (doom-modeline-mode 1)))
#+end_src

** Hiding minor modes                                       :semiearly:melpa:

Hide minor modes by default using the [[https://github.com/tarsius/minions][minions]] package behind a pop-up menu, only displaying the most important ones.

#+name: minions
#+begin_src emacs-lisp
(if (display-graphic-p)
    ;; hide minor modes in a menu, access with mouse or `minions-minor-mode-menu'
    (use-package minions
      :init
      ;; modes in minions-direct are always shown
      ;; use UTF-8 mode line lighter
      (setq minions-direct '(overwrite-mode view-mode)
            minions-mode-line-lighter "☰")
      (minions-mode 1)))
#+end_src

** darkroom for workspaces without visual distractions                 :elpa:

[[http://elpa.gnu.org/packages/darkroom.html][darkroom]] provides two minor modes ~darkroom-mode~ and
~darkroom-tentative-mode~ that remove visual distractions.

Turning on any of the modes removes the mode line, increases the text
scale and increases the text margins.

The difference between ~darkroom-tentative-mode~ and ~darkroom-mode~
is that ~darkroom-tentative-mode~ only removes visual distractions if
the Emacs frame contains only one window.

#+name: darkroom
#+begin_src emacs-lisp
;; provides toggleable modes that remove visual distractions
(use-package darkroom
  :config (setq darkroom-text-increase-scale 2))
#+end_src

** Color coding by depth using prism                                  :melpa:

[[https://github.com/alphapapa/prism.el][prism.el]] disperses Lisp and other forms in different colors by depth.
There are two modes:
- ~prism-mode~ for Lisp forms.
- ~prism-whitespace-mode~ for languages where whitespace has semantic meaning.

#+name: prism
#+begin_src emacs-lisp
;; color code by depth
(use-package prism
  :config
  (prism-set-colors :num 16
    :desaturations (cl-loop for i from 0 below 16
                            collect (* i 2.5))
    :lightens (cl-loop for i from 0 below 16
                       collect (* i 2.5))
    :colors (list "saddle brown"
                  "midnight blue"
                  "dark green")
    :comments-fn
    (lambda (color)
      (prism-blend color
                   (face-attribute 'font-lock-comment-face
                                   :foreground)
                   0.25))
    :strings-fn
    (lambda (color)
      (prism-blend color "white" 0.5))))
#+end_src

** Display line numbers when editing code

Display line numbers by default when editing code.

#+name: display-line-numbers-when-editing-code
#+begin_src emacs-lisp
;; display line numbers by default when editing code
(add-hook 'prog-mode-hook
          (lambda ()
            (display-line-numbers-mode 1)))
#+end_src

** Show point location column number in the mode line

Show the column number of the point location in the mode line.

#+name: show-column-number
#+begin_src emacs-lisp
;; show point location column number in mode line
(setq column-number-mode t)
#+end_src

** Show matching parentheses immediately

Show matching parentheses while editing without delay.

#+name: show-matching-parentheses
#+begin_src emacs-lisp
;; show matching parentheses with no delay
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

** Temporarily highlight yanked text                                  :melpa:

[[https://github.com/k-talo/volatile-highlights.el][volatile-highlights.el]] provides a minor mode that temporarily
highlights yanked text.

#+name: volatile-highlights
#+begin_src emacs-lisp
(use-package volatile-highlights
  :hook (after-init . volatile-highlights-mode))
#+end_src

** Add frame internal border

Adding a default frame internal border creates nicer typography at the
cost of displaying a few less characters on screen.

#+name: add-frame-internal-border
#+begin_src emacs-lisp
;; add internal frame border
(add-to-list 'default-frame-alist
             `(internal-border-width . 12))
(defun my-default-frame-border-teardown ()
  "Removes internal-border-width entries from `default-frame-alist'."
  (setq default-frame-alist
        (assq-delete-all 'internal-border-width default-frame-alist)))
;; add teardown function to be run before closing Emacs, which needs
;; to run early when closing so add it to the end of `after-init-hook'
(add-hook 'after-init-hook
          (lambda ()
            (add-hook 'kill-emacs-hook #'my-default-frame-border-teardown))
          t)
#+end_src

** Add non-visible bottom window dividers for easier mouse resizing

By default for GUI Emacs (at least for the Emacs Mac port), right
window dividers are rendered and can be dragged with the mouse to
resize windows horizontally.

Add non-visible bottom window dividers to also allow vertical window
resizing by dragging the space between two up-down adjacent windows.

#+name: add-bottom-window-dividers
#+begin_src emacs-lisp
;; add non-visisible bottom window dividers for mouse-based vertical resizing
(setq window-divider-default-bottom-width (if (eq system-type 'darwin)
                                              6
                                            3)
      window-divider-default-places 'bottom-only)
(let ((fg-color (face-attribute 'default :foreground))
      (bg-color (face-attribute 'default :background)))
  (set-face-attribute 'window-divider nil :foreground bg-color)
  (set-face-attribute 'window-divider-first-pixel nil :foreground bg-color)
  (set-face-attribute 'window-divider-last-pixel nil :foreground bg-color))
(window-divider-mode 1)
#+end_src

** Censor text in specific buffers

Custom package providing a minor mode for censoring text in a buffer.
One scenario where this is useful is to hide sensitive content during
a screen share in case the buffer is opened accidentally.

~censor-mode~ is buffer-local and will always apply to the current
buffer when toggled. ~global-censor-mode~ is global and will apply to
all buffers that either satisfy a predicate function or whose name
matches a regexp in ~censor-include~.

By default, ~censor-include~ matches all buffers with names that have
the =.gpg= suffix (the default for GnuPG-encrypted files).

#+name: censor
#+begin_src emacs-lisp
(require 'censor)
#+end_src

** Highlight indentation levels                                       :melpa:

[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] adds dynamic indentation guides which are
useful for languages where whitespace is important like Python.

Use when editing Python files by default.

#+name: highlight-indent-guides
#+begin_src emacs-lisp
;; add visual indentation guides
(use-package highlight-indent-guides
  :init (setq highlight-indent-guides-method 'character
              highlight-indent-guides-responsive 'top
              highlight-indent-guides-character ?\x2502)
  :config
  (add-hook 'python-mode-hook (lambda ()
                                (highlight-indent-guides-mode 1))))
#+end_src

** Pulse line on when window focus changes

Advise ~select-window~ to pulse the line after selecting a new window.
This helps to locate the position of the cursor, particularly when the
cursor type is set to ~bar~.

#+name: advise-select-window-after-pulse-line
#+begin_src emacs-lisp
;; pulse line after changing focused window using `ace-window'
(with-eval-after-load 'ace-window
  (advice-add 'ace-window :after #'my-pulse-line))

;; also pulse line when Emacs regains focus
(add-hook 'focus-in-hook #'my-pulse-line)
#+end_src

** Hide lines that are too long                                    :external:

[[https://github.com/rakete/too-long-lines-mode][too-long-lines-mode]] provides a global minor mode that uses overlays to
truncate very long lines, which can otherwise [[https://lists.gnu.org/archive/html/emacs-devel/2018-10/msg00470.html][slow]] [[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=13675][down]] Emacs. This
package is not in MELPA.

An alternative way to reduce slowdown from long lines is using the
built-in so-long package, which instead tries to disable major and
minor modes that may contribute to the slowdown.

#+name: too-long-lines-mode
#+begin_src emacs-lisp
(require 'too-long-lines-mode)
(too-long-lines-mode 1)
#+end_src

** Highlight TODO keywords                                            :melpa:

[[https://github.com/tarsius/hl-todo][hl-todo]] highlights TODO keywords and provides functions for quick
insertion and navigation between them. Modify ~hl-todo-keyword-faces~
to control which keywords get highlighted.

#+name: hl-todo
#+begin_src emacs-lisp
(use-package hl-todo
  :bind (:map hl-todo-mode-map
         ("C-c n" . hl-todo-next)
         ("C-c p" . hl-todo-prev)
         ("C-c o" . hl-todo-occur)
         ("C-c i" . hl-todo-insert))
  :hook (prog-mode . hl-todo-mode))
#+end_src

* Web

** Browsing

*** Emacs Web Wowser

[[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][Emacs Web Wowser]] (~eww~) is a built-in Emacs web browser.
It supports text and images, but not webfonts or Javascript.

*Customizations*:
- Use the lightweight version of [[https://duckduckgo.com/][DuckDuckGo]] for web searches by default.
- Don't render images by default.

#+name: eww
#+begin_src emacs-lisp
;; built-in Emacs text web browser
(use-package eww
  :ensure nil ;; built-in
  :commands (eww eww-follow-link)
  :init (setq eww-search-prefix "https://duckduckgo.com/lite?q=")
  ;; don't render images in HTML pages by default
  :config (setq-default shr-inhibit-images t))
#+end_src

** REST development tools

*** restclient.el                                                     :melpa:

[[https://github.com/pashky/restclient.el][restclient.el]] provides a major mode for interacting with HTTP queries
stored in text files, in particular editing and sending them.

*Customizations*:
- Load the major mode automatically when opening files with a ~.http~ suffix.
- When the response to a sent HTTP query is received, the request is
  pulsed once in the buffer to give visual feedback on which query the
  response is for (adapted from [[https://github.com/jordonbiondo/.emacs.d/blob/master/init.el][here]]).

#+name: restclient
#+begin_src emacs-lisp
(use-package restclient
  :defer t
  ;; assume request source files have ".http" suffix
  :mode ("\\.http\\'" . restclient-mode)
  :config
  ;; pulse *HTTP Response* buffer after receiving request response
  ;; adapted from https://github.com/jordonbiondo/.emacs.d/blob/master/init.el
  (defun my-restclient-pulse-buffer ()
    "Pulses the current buffer."
    (save-excursion
      (goto-char (point-min))
      (pulse-momentary-highlight-region (point-min) (point-max))))
  (add-hook 'restclient-response-loaded-hook #'my-restclient-pulse-buffer))
#+end_src

** Network security

Increased network security settings.

#+name: network-security
#+begin_src emacs-lisp
;; increase network security settings
(setq gnutls-verify-error t)
(setq gnutls-min-prime-bits 1024)
(setq network-security-level 'high)
(setq nsm-save-host-names t)
#+end_src

** HTTP requests privacy

More private HTTP requests.

#+name: http-requests-privacy
#+begin_src emacs-lisp
;; HTTP requests privacy settings
(setq url-cookie-untrusted-urls '(".*")) ;; no cookies
(setq url-privacy-level 'paranoid) ;; more private HTTP requests
(url-setup-privacy-info) ;; apply `url-privacy-level'
#+end_src

** Add read-it-later functionality to Org mode

Add read-it-later functionality (bookmarking and archiving a webpage
for later offline reading) to Org mode, with keybindings bound to the
prefix ~C-c o~ (use ~C-c o ?~ for the full set of available bindings).

By default this is configured to use [[https://github.com/Y2Z/monolith][monolith]] which can bundle a web
page into single HTML file.

This custom package is forked from [[https://github.com/scallywag/org-board][org-board]] and modified as follows:
1. Simplify the user interaction model---only one URL per header.
2. Support ~monolith~ or another tool by having an API that is less
   specific to ~wget~. This also means less ~wget~ specific magic like
   option completions when editing the entry's properties in Org mode.

#+name: org-readitlater
#+begin_src emacs-lisp
;; read-it-later functionality in Org mode
;; custom package in the lisp subfolder of the user emacs directory
(require 'org-readitlater)
(define-key org-mode-map (kbd "C-c o") org-readitlater-keymap)
#+end_src

*** Monolith                                                       :external:

[[https://github.com/Y2Z/monolith][Monolith]] is a CLI tool for saving complete webpages into a single HTML
file with embedded images, CSS and JS.

**** Installing monolith

***** Pre-built binaries

[[https://github.com/Y2Z/monolith/releases][Pre-built binaries]] are available for Linux (~x86_64~) and Windows.

***** Building from source

Install dependencies. The following example instructions are for
MacPorts.

#+begin_example
$ sudo port install openssl
$ sudo port install cargo
$ sudo port install pkgconfig
#+end_example

Make sure =~/.cargo/bin= is in the shell ~$PATH~ ([[https://unix.stackexchange.com/questions/26047/how-to-correctly-add-a-path-to-path][bash]], [[https://fishshell.com/docs/current/tutorial.html#path][fish]]).

Clone the monolith repo and build it.

#+begin_example
$ cd /path/to/build
$ git clone https://github.com/Y2Z/monolith.git
$ cd monolith
$ make install
#+end_example

Test the built binary.

#+begin_example
$ monolith --help
#+end_example

*** Configure org-capture template for org-readitlater

Configure an [[https://orgmode.org/manual/Capture.html][org-capture]] template for capturing org-readitlater
entries to the =readitlater/readitlater.org= file in ~org-directory~,
filing it under the "Unsorted" heading and automatically downloading
the article.

If org-protocol is enabled, the following bookmarklet can be added to
a web browser to send the current page details (and any selected text)
to the org-readitlater capture template associated with key ~a~ (the
~template='a'~ query parameter triggers the automatic dispatch).

#+begin_example
javascript:location.href='org-protocol://capture?template=a&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())
#+end_example

The capture template below has default options for ~monolith~.
For usage with other applications for saving webpages, remove
or modify the ~READITLATER_BACKEND_OPTIONS~ property.

#+name: org-capture-readitlater
#+begin_src emacs-lisp
;; add capture template for org-readitlater
(setq org-readitlater-capture-file "readitlater/readitlater.org")
(push `("a" "Archive page to read-it-later list" entry
        (file+headline ,org-readitlater-capture-file "Unsorted")
        "* %?%:description\n:PROPERTIES:\n:URL: %:link\n:READITLATER_BACKEND_OPTIONS: --isolate --no-css --no-fonts --no-frames --no-images --no-js\n:ADDED: %U\n:END:\n%:initial\n")
      org-capture-templates)
;; auto-download page after capturing with org-readitlater template
(defun do-org-readitlater-dl-hook ()
  (when (equal (buffer-name)
               (concat "CAPTURE-"
                       (file-name-nondirectory org-readitlater-capture-file)))
    (org-readitlater-archive)))
(add-hook 'org-capture-before-finalize-hook #'do-org-readitlater-dl-hook)
#+end_src

* Writing

** Spell checking

*** Flyspell for spell checking in Emacs

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Flyspell]] is a built-in spell checker that comes in two flavors:
- ~flyspell-mode~ checks spelling anywhere in the buffer.
- ~flyspell-prog-mode~ checks spelling only in comments and strings.

When one of the modes is active, unrecognized words are highlighted.
To maintain performance, it only checks words that are newly typed or
that the point moves across.

Activating the mode also enables a few bindings that act on
unrecognized words:
- ~C-c $~ pops up menu of corrections for the word before the point.
- ~C-.~ corrects the current word. Pressing it repeatedly will propose
  successive correction candidates.
- ~C-;~ corrects the previous word. Pressing it repeated will propose
  successively correction candidates.
- ~C-,~ jumps to the next unrecognized word.

*Note*: Flyspell uses as its backend a spell checker like Aspell, so
one needs to be installed on system. An appropriate dictionary or
dictionaries for the spell checker should also be installed.

*** Aspell command-line spell checker                              :external:

[[http://aspell.net/][Aspell]] is a spell checker. There are a number of alternatives but
they are either deprecated ([[https://www.cs.hmc.edu/~geoff/ispell.html][Ispell]]), similar ([[https://en.wikipedia.org/wiki/Hunspell][Hunspell]]), or
language-specific ([[https://voikko.puimula.org/][Voikko]] for Finnish).

This or another supported spell checker has to be installed in order
for Flyspell to work. Additionally, a dictionary for the spell checker
should also be intalled.

If using MacPorts, installation instructions follow for Aspell and its
English dictionary.

#+begin_example
$ sudo port install aspell
$ sudo port install aspell-dict-en
#+end_example

** dictionary.el for looking up word definitions                      :melpa:

[[https://github.com/myrkr/dictionary-el][dictionary.el]] provides a frontend for accessing a local or online
dictionary server that implements [[https://en.wikipedia.org/wiki/DICT][RFC 2229]].

#+name: dictionary
#+begin_src emacs-lisp
;; provides word lookups from a dictionary server
;; `dictionary-server' can be set to "localhost" to use a local
;; dictionary server like dictd or GNU Dico that implements RFC 2229
(use-package dictionary
  :init (setq dictionary-server "dict.org"
              dictionary-default-dictionary "*"))
#+end_src

*** GNU Collaborative International Dictionary of English

The [[https://gcide.gnu.org.ua/][GNU Collaborative International Dictionary of English]] (GCIDE) is a free dictionary derived from the Webster's 1913 dictionary (which provides definitions that are fuller and more descriptive than more modern dictionaries) supplemented with newer definitions from Wordnet and other sources.

It is available as a source on [[http://www.dict.org/][dict.org]] which can be accessed by
~dictionary.el~ functions.

Downloads are available for use with a local dictionary server.
One local dictionary server that has good GCIDE support is [[https://www.gnu.org.ua/software/dico/][GNU Dico]],
which has a bundled [[http://puszcza.gnu.org.ua/software/dico/manual/html_section/gcide.html][interface module]] for the dictionary.

** Synosaurus in-editor thesaurus                                     :melpa:

[[https://github.com/hpdeifel/synosaurus][Synosaurus]] provides a thesaurus frontend with pluggable backends.
Supported backends are limited to:
- [[https://www.openthesaurus.de/][OpenThesaurus]] (German), which the package can access via HTTP
  requests.
- [[https://wordnet.princeton.edu/][WordNet]] (English), which requires the command-line tool ~wn~ be
  installed locally.

To install WordNet on macOS using MacPorts, do the following.

#+begin_example
$ sudo port install wordnet
#+end_example

#+name: synosaurus
#+begin_src emacs-lisp
;; thesaurus functions using Synosaurus
(use-package synosaurus
  :init (setq synosaurus-choose-method 'default
              synosaurus-backend 'synosaurus-backend-wordnet))
#+end_src

** LanguageTool for grammar checking

[[https://languagetool.org/][LanguageTool]] ([[https://github.com/languagetool-org/languagetool][Github]]) provides a standalone open-source grammar checking tool that can be used on the command line or run as a HTTP server.

*** Installing LanguageTool                                        :external:

Make sure a working Java distribution is installed on the system.
The following shows the installing of OpenJDK 8 using MacPorts.

#+begin_example
$ sudo port install openjdk8
#+end_example

[[https://languagetool.org/#standalone][Download]] the standalone desktop version of LanguageTool for offline use
which comes in a zip file and extract it to some directory.
The following assumes the zip file was downloaded to =~/Downloads= and
extracts its contents to =~/build= (change paths as appropriate as well
as the zip filename).

#+begin_example
$ unzip ~/Downloads/LanguageTool-4.9.1.zip -d ~/build
#+end_example

Optionally, softlink the JAR files to be used to a common storage folder like =~/jars= for easier access (change paths as appropriate).

#+begin_example
$ cd ~/jars
$ ln -s ~/build/LanguageTool-4.9.1/languagetool-commandline.jar
#+end_example

*** LanguageTool basic Emacs configuration                            :melpa:

[[https://github.com/mhayashi1120/Emacs-langtool][langtool]] provides support for using LanguageTool in Emacs as a grammar checking backend.

The configuration here is for using the command-line version of LanguageTool.
See the website for setting up the HTTP server version.

#+name: langtool
#+begin_src emacs-lisp
;; grammar checking functions using LanguageTool
(use-package langtool
  :init (setq langtool-default-language "en-US"
              langtool-language-tool-jar (expand-file-name "~/jars/languagetool-commandline.jar")))
#+end_src

** typo.el for typographical editing                                  :melpa:

[[https://github.com/jorgenschaefer/typoel][typo.el]] is a minor mode that makes insertion of typographically useful
unicode characters easier.

Enabling the buffer-local ~typo-mode~ does the following:
- Automatically convert ~'~ to ~‘~ and ~’~, and ~"~ to ~“~ and ~”~.
- Pressing ~'~, ~"~ and ~-~ cycles among their different variants.
  For example, repeatedly pressing ~-~ cycles between en-dash,
  em-dash, and other dash-like glyphs.
- Three periods in a row get automatically replaced by an ellipsis.

Enabling ~typo-global-mode~ does the following:
- ~C-c 8~ brings up a unicode insertion dispatcher that is like the
  standard ~C-x 8~ unicode insertion dispatcher but focused on a
  different selection of commonly used typographical characters.

#+name: typo
#+begin_src emacs-lisp
(use-package typo)
#+end_src

* Other

** real-auto-save for auto-saving files at regular intervals          :melpa:

The [[https://github.com/ChillarAnand/real-auto-save][real-auto-save]] package supports per-file auto-saving at regular
time intervals, i.e. a buffer-local ~auto-save-visited-mode~.

When the buffer-local minor mode ~real-auto-save-mode~ is active, the
buffer is automatically saved every ~real-auto-save-interval~ seconds.

#+name: real-auto-save
#+begin_src emacs-lisp
;; buffer-local `auto-save-visited-mode'
(use-package real-auto-save
  :defer t
  :config (setq real-auto-save-interval 10)) ;; save interval, in seconds
#+end_src

*Example use case*:
If some directory (say where files in ~org-agenda-files~ are
stored) is a cloud-enabled shared folder and external changes should be
reflected with files auto-saved on changes so that the buffer, local and
remote files are kept in sync, create a ~.dir-locals.el~ file in the folder
with the following contents.

#+begin_example
;; Directory-local settings
((nil . ((eval . (auto-revert-mode 1)) ;; auto-revert files
         (eval . (real-auto-save-mode 1))))) ;; buffer-local auto-save
#+end_example

** Configure mouse settings to be trackpad-friendly

Modify mouse scroll settings to be friendlier for trackpads:
- Regular scrolling is one line at a time.
- Hold Shift while scrolling for five lines at a time.
- Hold Control while scrolling for a screen at a time.
- Natural scrolling (scrolling right moves the screen left and the
  converse is true as well).

Only apply these settings after initialization is complete
to avoid it being clobbered by settings applied by the
Emacs implementation (looking at Emacs Mac Port here).

#+name: mouse-settings
#+begin_src emacs-lisp
;; mouse settings
(when (display-graphic-p)
  (add-hook
   'after-init-hook
   (lambda ()
     ;; use super-left-click as middle-click (trackpad workaround)
     ;; (define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>"))
     ;; smooth scrolling, hold SHIFT/CONTROL for 5 line/full window increments
     (setq mouse-wheel-scroll-amount '(1
                                       ((shift) . 5)
                                       ((control) . nil)))
     ;; enable horizontal scrolling
     (setq mouse-wheel-flip-direction t ;; t/nil for trackpad/mouse
           mouse-wheel-tilt-scroll t))
   t))
#+end_src

** Scratch buffer default mode set to fundamental-mode

Set the initial mode of the scratch buffer to ~fundamental-mode~,
as it can used for anything and not just Emacs Lisp interaction.

S-expressions in the buffer can still be evaluated as Emacs Lisp by
using ~C-x C-e~ if desired.

#+name: scratch-buffer-initial-mode
#+begin_src emacs-lisp
;; set *scratch* buffer major-mode to fundamental-mode
(setq initial-major-mode 'fundamental-mode)
#+end_src

** Scroll conservatively at window edge

The default behavior in Emacs when scrolling past the window edge is
to recenter the viewport on the point.
Modify this to scroll conservatively, moving the viewport one column
or line at a time instead of recentering.

#+name: scroll-conservatively
#+begin_src emacs-lisp
;; scroll a line at a time at window edge
(setq scroll-conservatively 101)
#+end_src

** Silence audio and visual bells

Supress audio and visual bells.
These are super distracting.

#+name: silence-audio-and-visual-bells
#+begin_src emacs-lisp
;; turn off audio and visual bells
(setq ring-bell-function 'ignore)
#+end_src

** Suppress auto-revert messages

Suppress the minibuffer messages that appear whenever a file is
auto-reverted.

#+name: suppress-auto-revert-messages
#+begin_src emacs-lisp
;; suppress auto-revert minibuffer messages
(setq auto-revert-verbose nil)
#+end_src

** Suppress startup splash screen

Suppress the startup splash screen.
Don't need it.

#+name: suppress-startup-splash
#+begin_src emacs-lisp
;; suppress splash screen that appears on startup by default
(setq inhibit-startup-message t)
#+end_src

** Very large file support                                            :melpa:

[[https://github.com/m00natic/vlfi][Very Large Files]] provides a minor mode ~vlf-mode~ that allows loading
of large file in chunks, trading increased processing time for reduced
memory usage.

When ~vlf-mode~ is active, it exposes a number of commands that
are prefixed by ~C-c C-v~:
- ~C-c C-v n~ and ~C-c C-v p~ moves forward and back through the file
  by chunk.
- ~C-c C-v SPC~ shows the chunk starting from the current point.
- ~C-c C-v [~ and ~C-c C-v ]~ goes to the front and end of the file.
- ~C-c C-v l~ and ~C-c C-v j~ jumps to a given line in the file and a given chunk number respectively.
- ~C-c C-v s~, ~C-c C-v r~, ~C-c C-v o~ and ~C-c C-v %~ are the forward search,
  backward search, occur and replace equivalents that act across all the file
  chunks. Note the ~C-c C-v %~ auto-saves the file when each chunk is
  processed.
- ~C-c C-v f~ toggles continuous chunk around the point.
- ~C-c C-v +~ and ~C-c C-v -~ control chunk size.

The package also provides two commands ~vlf-ediff-files~ and
~vlf-ediff-buffers~ that compare files and buffers in chunks.

#+name: vlf
#+begin_src emacs-lisp
;; visit large files without loading it entirely
(use-package vlf
  :config (require 'vlf-setup))
#+end_src

** Auto-disable modes that slow down Emacs in files with long lines

Many Emacs modes cause slowdown when working with buffers containing
extremely long lines.

Emacs 27+ includes a package ~so-long~ that if enabled will
automatically disable major and minor modes that can cause extreme
slowdown when visiting files with excessively long lines.

~C-c C-c~ will revert ~so-long-mode~ after it is activated back to the
original major mode.

See ~M-x so-long-commentary~ for more information.

#+name: so-long
#+begin_src emacs-lisp
;; automatically disable major and minor modes that can slow down
;; Emacs when visiting files with long lines, Emacs 27+ only
(when (require 'so-long nil :noerror)
  (global-so-long-mode 1)
  ;; leave major modes alone, only disable minor modes
  ;; increase threshold before so-long action is invoked
  (setq so-long-action 'so-long-minor-mode
        so-long-max-lines 10
        so-long-threshold 500))
#+end_src

** Uniquify file buffer names

Disambiguate open file buffers with the same name but from different
directories.

#+name: uniquify
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src

** Calc built-in calculator

[[https://www.gnu.org/software/emacs/manual/html_node/calc/index.html][Calc]] is a built-in calculator that uses [[https://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish notation]] (RPN).
Use ~C-x *~ to start a Calc dispatch on the expression under the
point, for example:
- ~C-x * c~ to call ~calc~ and open a Calc instance.
- ~C-x * e~ to enter Embedded mode when the point is on a formula.
- ~C-x * q~ to run a quick calculation.

See the help buffer surfaced by ~C-h f calc-dispatch-help~ for more
information.

#+name: calc
#+begin_src emacs-lisp
(setq calc-multiplication-has-precedence nil
      calc-ensure-consistent-units t
      calc-context-sensitive-enter t
      calc-undo-length 100
      calc-highlight-selections-with-faces nil)
#+end_src

** Enable commands that are disabled by default

Some commands are disabled by default and show a warning when they are
called for the first time.

Enable some of them:
- Horizontal scrolling, ~C-x <~ and ~C-x >~
- Narrow to region and page, ~C-x n n~ and ~C-x n p~
- Downcasing and upcasing a text region, ~C-x C-l~ and ~C-x C-u~

#+name: enable-default-disabled-functions
#+begin_src emacs-lisp
;; Enable some functions disabled by default.
(put 'scroll-left 'disabled nil)
(put 'scroll-right 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

** Revert buffer using F5

Buffers can be reverted using ~s-u~ but since the Super key is not on
all keyboards it is a good idea to bind it to a function key, which is
~<f5>~ here.

#+name: revert-buffer
#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") #'revert-buffer)
#+end_src

** Hacky workaround for GnuTLS timing issues                     :workaround:

The Emacs usage of GnuTLS has some timing-related issues, especially
with ~url-retrieve-synchronously~ and on GUI Emacs. This appears to be
a sort of race condition, and a bug reporter thinks that GnuTLS is not
properly waiting for the server to write the initial greeting.

See [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=930573][link]] for more information and a [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=930573#10][workaround]].

#+name: open-gnutls-stream-workaround
#+begin_src emacs-lisp
(defun open-gnutls-stream--after-sleep-250ms (&rest args)
  "Workaround for race condition bug in `open-gnutls-stream'.

Adds 250ms to the opening of GnuTLS connections.

ARGS is a list of the original arguments passed to
`open-gnutls-stream' and is ignored.

See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=930573#10
for more information."
  (sleep-for 0 250))

;; add advice to `open-gnutls-stream' to have it sleep for 250ms
;; as a workaround for GnuTLS race condition bug
(advice-add #'open-gnutls-stream :after #'open-gnutls-stream--after-sleep-250ms)
#+end_src

** Password management and storage

The [[https://www.passwordstore.org/][pass]] password store is a Bash script for CLI password management
using GnuPG and Git.

It has a number of interfaces, including [[https://github.com/mssun/passforios][Pass for iOS]], [[https://github.com/android-password-store/Android-Password-Store][Password Store]] for Android and [[https://github.com/browserpass/browserpass-extension][browserpass]] for web browsers, as well as for Emacs.

There is also a Go rewrite of pass called [[https://github.com/gopasspw/gopass][gopass]] that adds a number of
useful features, but is also more complicated and less battle-tested.

References:
- [[https://jherrlin.github.io/posts/emacs-gnupg-and-pass/][Emacs, GnuPG and Pass | jherrlin]]
- [[https://medium.com/@chasinglogic/the-definitive-guide-to-password-store-c337a8f023a1][The Definitive Guide to password-store | by Mathew Robinson | Medium]]

*** auth-source-pass                                                  :melpa:

[[https://github.com/DamienCassou/auth-password-store][auth-password-store]] provides integration between the Emacs built-in
auth-source and [[https://www.passwordstore.org/][pass]].

#+name: auth-source-pass
#+begin_src emacs-lisp
;; enable auth-source integration with pass
(when (executable-find "pass")
  (use-package auth-source-pass
    :demand t
    :config
    (defun my-auth-source-pass-enable ()
      "Enable auth-source and pass integration."
      (interactive)
      (auth-source-pass-enable)
      (message "auth-source-password-store enabled"))
    (defun my-auth-source-pass-disable ()
      "Disable auth-source and pass integration."
      (interactive)
      ;; To add password-store to the list of sources, evaluate the following:
      (setq auth-sources (delete 'password-store auth-sources))
      ;; clear the cache (required after each change to #'auth-source-pass-search)
      (auth-source-forget-all-cached)
      (message "auth-source-password-store disabled"))))
#+end_src

*** password-store.el                                                 :melpa:

[[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store.el]] provides integration with the [[https://www.passwordstore.org/][pass]] password-store
package.

#+name: password-store
#+begin_src emacs-lisp
;; emacs integration with pass password-store
(when (executable-find "pass")
  (use-package password-store))
#+end_src

** Add marks and filters to tabulated-list-mode                       :melpa:

[[https://github.com/politza/tablist][Tablist]] extends ~tabulated-list-mode~ to add marks, filters, a column
visibility toggle, and CSV export. One example of a buffer with this
major mode is the one opened by ~list-packages~.

#+name: tablist
#+begin_src emacs-lisp
;; extend `tabulated-list-mode' with more functionality, adapted from
;; https://emacsnotes.wordpress.com/2019/04/16/how-i-shortlist-add-ons-for-my-emacs-introducing-tablist/
(use-package tablist
  :config
  ;; enable `tablist-minor-mode' automatically
  (add-hook 'tabulated-list-mode-hook 'tablist-minor-mode)
  ;; add tablist entries to the menu bar
  (easy-menu-define my-tablist-minor-mode-menu tablist-minor-mode-map
    "Menu for Tablist Minor Mode Map."
    '("Tablist"
      ("Mark"
       ["Mark Items Regexp" tablist-mark-items-regexp :help "(tablist-mark-items-regexp COLUMN-NAME REGEXP)\n\nMark entries matching REGEXP in column COLUMN-NAME."]
       ["Mark Items Numeric" tablist-mark-items-numeric :help "(tablist-mark-items-numeric BINOP COLUMN-NAME OPERAND)\n\nMark items fulfilling BINOP with arg OPERAND in column COLUMN-NAME.\n\nFirst the column's value is coerced to a number N.  Then the test\nproceeds as (BINOP N OPERAND)."]
       "--"
       ["Mark Forward" tablist-mark-forward :help "(tablist-mark-forward &optional ARG INTERACTIVE)\n\nMark ARG entries forward.\n\nARG is interpreted as a prefix-arg.  If interactive is non-nil,\nmaybe use the active region instead of ARG.\n\nSee `tablist-put-mark' for how entries are marked."]
       ["Unmark Forward" tablist-unmark-forward :help "(tablist-unmark-forward &optional ARG INTERACTIVE)\n\nUnmark ARG entries forward.\n\nSee `tablist-mark-forward'."]
       ["Unmark Backward" tablist-unmark-backward :help "(tablist-unmark-backward &optional ARG INTERACTIVE)\n\nUnmark ARG entries backward.\n\nSee `tablist-mark-forward'."]
       "--"
       ["Change Marks" tablist-change-marks :help "(tablist-change-marks OLD NEW)\n\nChange all OLD marks to NEW marks.\n\nOLD and NEW are both characters used to mark files."]
       "--"
       ["Toggle Marks" tablist-toggle-marks :help "(tablist-toggle-marks)\n\nUnmark all marked and mark all unmarked entries.\n\nSee `tablist-put-mark'."]
       ["Unmark All Marks" tablist-unmark-all-marks :help "(tablist-unmark-all-marks &optional MARKS INTERACTIVE)\n\nRemove alls marks in MARKS.\n\nMARKS should be a string of mark characters to match and defaults\nto all marks.  Interactively, remove all marks, unless a prefix\narg was given, in which case ask about which ones to remove.\nGive a message, if interactive is non-nil.\n\nReturns the number of unmarked marks."])
      "--"
      ("Filter"
       ["Push Regexp Filter" tablist-push-regexp-filter :help "(tablist-push-regexp-filter COLUMN-NAME REGEXP)\n\nAdd a new filter matching REGEXP in COLUMN-NAME.\n\nThe filter is and'ed with the current filter.  Use\n`tablist-toggle-first-filter-logic' to change this."]
       ["Push Equal Filter" tablist-push-equal-filter :help "(tablist-push-equal-filter COLUMN-NAME STRING)\n\nAdd a new filter whre string equals COLUMN-NAME's value.\n\nThe filter is and'ed with the current filter.  Use\n`tablist-toggle-first-filter-logic' to change this."]
       ["Push Numeric Filter" tablist-push-numeric-filter :help "(tablist-push-numeric-filter OP COLUMN-NAME 2ND-ARG)\n\nAdd a new filter matching a numeric predicate.\n\nThe filter is and'ed with the current filter.  Use\n`tablist-toggle-first-filter-logic' to change this."]
       ["Pop Filter" tablist-pop-filter :help "(tablist-pop-filter &optional N INTERACTIVE)\n\nRemove the first N filter components."]
       "--"
       ["Negate Filter" tablist-negate-filter :help "(tablist-negate-filter &optional INTERACTIVE)\n\nNegate the current filter."]
       ["Suspend Filter" tablist-suspend-filter :style toggle :selected tablist-filter-suspended :help "(tablist-suspend-filter &optional FLAG)\n\nTemporarily disable filtering according to FLAG.\n\nInteractively, this command toggles filtering."]
       ["Clear Filter" tablist-clear-filter :help "(tablist-clear-filter)"]
       ["Toggle First Filter Logic" tablist-toggle-first-filter-logic :help "(tablist-toggle-first-filter-logic)\n\nToggle between and/or for the first filter operand."]
       ["Display Filter" tablist-display-filter :style toggle :selected (assq 'tablist-display-filter-mode-line-tag mode-line-format) :help "(tablist-display-filter &optional FLAG)\n\nDisplay the current filter according to FLAG.\n\nIf FLAG has the value 'toggle, toggle it's visibility.\nIf FLAG has the 'state, then do nothing but return the current\nvisibility."]
       ["Edit Filter" tablist-edit-filter :help "(tablist-edit-filter)"]
       "--"
       ["Name Current Filter" tablist-name-current-filter :help "(tablist-name-current-filter NAME)"]
       ["Push Named Filter" tablist-push-named-filter :help "(tablist-push-named-filter NAME)\n\nAdd a named filter called NAME.\n\nNamed filter are saved in the variable `tablist-named-filter'."]
       ["Delete Named Filter" tablist-delete-named-filter :help "(tablist-delete-named-filter NAME &optional MODE)"]
       ["Deconstruct Named Filter" tablist-deconstruct-named-filter :help "(tablist-deconstruct-named-filter)"])
      "--"
      ("Column"
       ["Forward Column" tablist-forward-column :help "(tablist-forward-column N)\n\nMove n columns forward, while wrapping around."]
       ["Backward Column" tablist-backward-column :help "(tablist-backward-column N)\n\nMove n columns backward, while wrapping around."]
       "--"
       ["Move To Major Column" tablist-move-to-major-column :help "(tablist-move-to-major-column &optional FIRST-SKIP-INVISIBLE-P)\n\nMove to the first major column."]
       "--"
       ["Shrink Column" tablist-shrink-column :help "(tablist-shrink-column &optional COLUMN WIDTH)"]
       ["Enlarge Column" tablist-enlarge-column :help "(tablist-enlarge-column &optional COLUMN WIDTH)\n\nEnlarge column COLUMN by WIDTH.\n\nThis function is lazy and therfore pretty slow."])
      "--"
      ["Sort" tablist-sort :help "(tablist-sort &optional COLUMN)\n\nSort the tabulated-list by COLUMN.\n\nCOLUMN may be either a name or an index.  The default compare\nfunction is given by the `tabulated-list-format', which see.\n\nThis function saves the current sort column and the inverse\nsort-direction in the variable `tabulated-list-sort-key', which\nalso determines the default COLUMN and direction.\n\nThe main difference to `tabulated-list-sort' is, that this\nfunction sorts the buffer in-place and it ignores a nil sort\nentry in `tabulated-list-format' and sorts on the column\nanyway (why not ?)."]
      ["Do Kill Lines" tablist-do-kill-lines :help "(tablist-do-kill-lines &optional ARG INTERACTIVE)\n\nRemove ARG lines from the display."]
      "--"
      ["Export Csv" tablist-export-csv :help "(tablist-export-csv &optional SEPARATOR ALWAYS-QUOTE-P INVISIBLE-P OUT-BUFFER DISPLAY-P)\n\nExport a tabulated list to a CSV format.\n\nUse SEPARATOR (or ;) and quote if necessary (or always if\nALWAYS-QUOTE-P is non-nil).  Only consider non-filtered entries,\nunless invisible-p is non-nil.  Create a buffer for the output or\ninsert it after point in OUT-BUFFER.  Finally if DISPLAY-P is\nnon-nil, display this buffer.\n\nReturn the output buffer."]
      "--"
      ["Previous Line" tablist-previous-line :help "(tablist-previous-line &optional N)"]
      ["Next Line" tablist-next-line :help "(tablist-next-line &optional N)"]
      "--"
      ["Revert" tablist-revert :help "(tablist-revert)\n\nRevert the list with marks preserved, position kept."]
      ["Quit" tablist-quit :help "(tablist-quit)"])))
#+end_src

* OS-specific

** macOS

There are two main Emacs ports for macOS. Both work pretty well.
- [[https://emacsformacosx.com/][Emacs for Mac OS X]] is a vanilla build.
- The [[https://bitbucket.org/mituharu/emacs-mac/][Emacs Mac Port]] ([[https://github.com/railwaycat/homebrew-emacsmacport/releases][binaries]]) by Mitsuharu Yamamoto has a bunch of
  Mac-specific features patched in.

macOS does not support file notifications, so use file polling
instead for ~auto-revert-mode~.

#+name: mac
#+begin_src emacs-lisp
;; on macOS, use Option keys as Meta and file polling for auto-revert
(when (eq system-type 'darwin)
  (setq auto-revert-use-notify nil ;; macOS does not support file notifications
        mac-option-modifier 'meta ;; use Option key as Meta
        mac-right-option-modifier 'left ;; right Option uses left's mapping
        mac-command-modifier 'super)) ;; keep Super key as is
#+end_src

*** Keyboard settings in Emacs for OS X

Emacs for OS X keyboard settings:
- Use the Option key as Meta.
  For accented characters, use ~C-x 8~ (for example ~C-x 8 , c~).
- Keep Super key as is.
  Super key combinations are first intercepted by the system and
  only passed on if they don't correspond to an existing system
  shortcut (say ~s-TAB~ or ~s-`~), which can limit the bindings
  available for use.

#+name: mac-emacs-for-os-x-keys
#+begin_src emacs-lisp
(when (eq window-system 'ns)
  (setq mac-option-modifier 'meta ;; use Option key as Meta
        mac-right-option-modifier 'left ;; right Option uses left's mapping
        mac-command-modifier 'super)) ;; keep Super key as is
#+end_src

*** Revert Command bindings in Emacs Mac Port

Emacs Mac Port keyboard settings:
- Use the Option key as Meta.
  For accented characters, use ~C-x 8~ (for example ~C-x 8 , c~).
- Modify Super key combinations to match Emacs for Mac OS X as
  possible. Super key combinations are first intercepted by the system
  and only passed on if they don't correspond to an existing system
  shortcut (say ~s-TAB~ or ~s-`~), which can limit the bindings
  available for use.

Adapted from [[https://news.ycombinator.com/item?id=19647365][here]].

#+name: mac-emacs-mac-port-keys
#+begin_src emacs-lisp
;; revert Command keys in Emacs Mac Port to match Emacs for Mac OS X bindings
(when (eq window-system 'mac)
  (setq mac-option-modifier 'meta
        mac-right-option-modifier 'left
        mac-command-modifier 'super)
  (global-set-key (kbd "s-'") 'next-multiframe-window)
  (global-set-key (kbd "s-,") 'customize)
  (global-set-key (kbd "s-`") 'other-frame)
  (global-set-key (kbd "s-a") 'mark-whole-buffer)
  (global-set-key (kbd "s-c") 'kill-ring-save) ;; ns-copy-including-secondary
  (global-set-key (kbd "s-d") 'isearch-repeat-backward)
  (global-set-key (kbd "s-f") 'isearch-forward)
  (global-set-key (kbd "s-g") 'isearch-repeat-forward)
  ;; (global-set-key (kbd "s-h") 'ns-do-hide-emacs) ;; done by default
  (global-set-key (kbd "s-j") 'exchange-point-and-mark)
  (global-set-key (kbd "s-k") 'kill-this-buffer)
  (global-set-key (kbd "s-l") 'goto-line)
  (global-set-key (kbd "s-m") 'iconify-frame)
  (global-set-key (kbd "s-n") 'make-frame)
  ;; (global-set-key (kbd "s-o") 'ns-open-file-using-panel) ;; no equivalent
  ;; (global-set-key (kbd "s-p") 'ns-print-buffer) ;; no equivalent
  (global-set-key (kbd "s-q") 'save-buffers-kill-emacs)
  (global-set-key (kbd "s-s") 'save-buffer)
  (global-set-key (kbd "s-u") 'revert-buffer)
  (global-set-key (kbd "s-v") 'yank)
  (global-set-key (kbd "s-w") 'delete-frame)
  (global-set-key (kbd "s-x") 'kill-region)
  (global-set-key (kbd "s-y") 'yank) ;; ns-paste-secondary
  (global-set-key (kbd "s-z") 'undo))
#+end_src

*** Case-insensitive sorting in Dired

Configure case-insensitive sorting in Dired to match macOS behavior.
Copied from [[http://pragmaticemacs.com/emacs/case-insensitive-sorting-in-dired-on-os-x/][here]].

#+name: mac-case-insensitive-sorting-in-dired
#+begin_src emacs-lisp
;; case-insensitive sorting in Dired
;; http://pragmaticemacs.com/emacs/case-insensitive-sorting-in-dired-on-os-x/
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil)
  (setq ls-lisp-ignore-case t)
  (setq ls-lisp-use-string-collate nil)
  ;; customise the appearance of the listing
  (setq ls-lisp-verbosity '(links uid))
  ;; (setq ls-lisp-format-time-list '("%b %e %H:%M" "%b %e %Y"))
  (setq ls-lisp-use-localized-time-format t))
#+end_src

*** Configure system open command

On macOS, ~open~ is used to open a given file in its preferred
application by type.

#+name: mac-system-open-command
#+begin_src emacs-lisp
;; configure system open file by type command for macOS
(when (eq system-type 'darwin)
  (setq my-system-open-command "open"))
#+end_src

*** Exclude Emacs source files from being tracked by recentf

Exclude Emacs source files from ~recentf~ history on macOS.

#+name: mac-recentf-exclude
#+begin_src emacs-lisp
;; exclude Emacs source files from recentf history on macOS
(add-to-list 'recentf-exclude "^/Applications/Emacs.app/")
#+end_src

*** Scale up Org-mode LaTeX fragment previews on macOS

Due to the higher resolution of Retina screens on macOS, LaTeX preview
images rendered as PNG files should be scaled up.

#+name: mac-scale-org-latex-fragment-previews
#+begin_src emacs-lisp
;; scale up LaTeX fragment preview images on macOS
(if (and (display-graphic-p)
         (eq system-type 'darwin)
         (executable-find "dvipng"))
    (setq org-format-latex-options (plist-put org-format-latex-options
                                              :scale 1.5)))
#+end_src

*** DocView resolution increase to accommodate Retina screen DPI

The default DocView DPI resolution is 100, which is very low for
Retina screens which can lead to blurry PDF rendering.

One solution is to increase the DPI resolution and let Emacs scale the
resulting higher DPI imagine downward, but this only works on the
Emacs Mac Port (which leverages Mac systems' Image I/O framework to
scale images).

#+name: mac-emacs-mac-doc-view-resolution
#+begin_src emacs-lisp
;; increment DocView DPI resolution for Mac Retina screens
;; when using emacs-mac port
(when (eq window-system 'mac)
  (setq doc-view-resolution 300))
#+end_src

* Transient commands                                              :transient:

Temporary bindings that are shown in a popup window.

** Transient                                                          :melpa:

[[https://github.com/magit/transient][Transient]] provides functionality for defining transient keymaps.

Transient bindings and definitions in this configuration conform to the
following conventions:
- The config calls ~(transient-bind-q-to-quit)~ which binds ~q~ to
  quit any transient like magit. Doing this will also rotate any ~q~,
  ~Q~ and ~M-q~ bindings defined in any transient to ~Q~, ~M-q~ and
  unbound respectively.
- Globally-accessible transients are always bound to a key sequence
  prefixed by ~C-c C-M-~ (like ~C-c C-M-b~ for the basic buffer
  management hydra).
- Major mode-specific transients are always bound to ~C-c C-M-m~.
- Transients are always defined in their own section after all other
  user configuration, such that all dependencies in transients are
  loaded before any are defined. This simplifies transient definitions
  (the alternative is to modify already defined transients), but
  separates package loading code from where their functions are used
  in transients. Accordingly, take extra care to check all downstream
  transient definitions are adjusted when removing packages.

*References*:
- [[https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/][Anyone have good examples for Transient? : emacs]]
- [[https://github.com/magit/transient/issues/51][magit/transient#51 Add some examples of basic transients for reference]]

#+name: transient
#+begin_src emacs-lisp
(use-package transient
  :init
  ;; convenience function for specifying transient toggle descriptions
  (defun transient--make-description (desc is-enabled)
    "Return a string description for transient descriptions.
The returned string has format \"DESC [ ]\" if IS-ENABLED is nil
or \"DESC [X]\" if is-enabled is non-nil.

Examples:

  (transient--make-description symbol-overlay-mode \"highlight\")
  => \"highlight [x]\"

Example of use with transient suffix definitions in a
`transient-define-prefix' macro:

  ...
  (\"m\" (lambda () (transient--describe-toggle
                       \"highlight-at-pt\"
                       symbol-overlay-mode))
   symbol-overlay-mode)
  ...

  => \"m highlight-at-pt [ ]\"
"
    (concat desc " " (if is-enabled "[X]" "[ ]")))
  :config
  ;; bind "q" to quit transient popups by default, transient defns
  ;; binding "q" will attempt to bind "Q" or "M-q" instead
  (transient-bind-q-to-quit))
#+end_src

** Global transients

Global transients have global bindings other than ~C-c C-M-m~ (that is
reserved for major mode transients) and are always active.

*** Bookmarks transient

Transient for easier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][bookmark]] manipulation and usage.

#+name: bookmarks-transient
#+begin_src emacs-lisp
;; add transient popup for bookmark commands, bind to "C-c C-M-j"
(transient-define-prefix transient/bookmarks ()
  "Various bookmark commands."
  ["Bookmarks"
   ["Navigate"
    ("j" "Jump" helm-bookmarks) ;; helm `bookmark-jump' replacement
    ("l" "List" list-bookmarks)
    ]
   ["Add/Remove"
    ("s" "Set" bookmark-set)
    ("d" "Delete" bookmark-delete)
    ("i" "Insert" bookmark-insert)
    ]
   ["File"
    ("L" "Load" bookmark-load)
    ("W" "Write" bookmark-write)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-j") #'transient/bookmarks)
#+end_src

*** Buffer transient

Transient for buffer management.

#+name: buffer-transient
#+begin_src emacs-lisp
(defun transient/buffer--tramp-cleanup-buffers ()
  "Clean up all TRAMP buffers and connections with confirm prompt."
  (interactive)
  (when (y-or-n-p "Cleanup all TRAMP buffers and connections? ")
    (tramp-cleanup-all-buffers)))

(defun transient/buffer--kill-other-buffers ()
  "Kill all file buffers except the current one."
  (interactive)
  (when (y-or-n-p "Kill all file buffers except the current one? ")
    (seq-each
     #'kill-buffer
     (delete (current-buffer)
             (seq-filter #'buffer-file-name (buffer-list))))))

(defun transient/buffer--indent-region-or-buffer ()
  "Indent a selected region, or the buffer otherwise."
  (interactive)
  (cond
   ((use-region-p) (indent-region (region-beginning) (region-end)))
   (t (indent-region (point-min) (point-max)))))

(defun transient/buffer--untabify-region-or-buffer ()
  "Convert tabs to spaces in a selected region, or the buffer otherwise."
  (interactive)
  (cond
   ((use-region-p) (untabify (region-beginning) (region-end)))
   (t (untabify (point-min) (point-max)))))

(defun transient/buffer--apply-all-hygiene-ops-region-or-buffer ()
  "Apply standard hygiene operations for selected region, or buffer otherwise.
The standard hygiene operations include removing trailing
whitespace, indenting and untabifying."
  (interactive)
  (progn
    (whitespace-cleanup)
    (transient/buffer--indent-region-or-buffer)
    (transient/buffer--untabify-region-or-buffer)))

(defun transient/buffer--open-containing-dir-externally (&optional path)
  "Opens the directory containing PATH or the buffer if unspecified externally."
  (interactive)
  (let* ((my-path (cl-some 'identity (list path
                                           (buffer-file-name)
                                           default-directory)))
         (my-full-path (expand-file-name my-path))
         (my-dir-path (file-name-directory my-full-path))
         (my-process-args (list "my-open-dir" nil
                                my-system-open-command my-dir-path)))
    (apply 'start-process my-process-args)))

;; add transient for buffer management commands, bind to "C-c C-M-b"
(transient-define-prefix transient/buffer ()
  "Buffer management commands."
  ["Buffer"
   ["Select"
    ("b" "Switch" switch-to-buffer)
    ("n" "Next" next-buffer :transient t)
    ("p" "Previous" previous-buffer :transient t)
    ("e" "Open external" transient/buffer--open-containing-dir-externally)
    ;; commands below are autoloaded, so there should be no need
    ;; to make sure (require 'browse-at-remote) is run prior
    ("gb" "Git browse" browse-at-remote)
    ("gw" "Git copy URL" browse-at-remote-kill)
    ]
   ["Hygiene"
    ("cr" "Whitespace report" whitespace-report)
    ("cw" "Whitespace cleanup" whitespace-cleanup)
    ("ci" "Indent" transient/buffer--indent-region-or-buffer)
    ("ct" "Untabify" transient/buffer--untabify-region-or-buffer)
    ("ca" "All hygiene ops" transient/buffer--apply-all-hygiene-ops-region-or-buffer)
    ]
   ["File operations"
    ("R" "Revert" revert-buffer)
    ("B" "Bury" bury-buffer)
    ("U" "Unbury" unbury-buffer)
    ("s" "Save" save-buffer)
    ("S" "Save all" save-some-buffers)
    ("k" "Kill" kill-this-buffer)
    ("K" "Kill matching" kill-matching-buffers)
    ("o" "Kill others" transient/buffer--kill-other-buffers)
    ("t" "TRAMP cleanup" transient/buffer--tramp-cleanup-buffers)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-b") #'transient/buffer)
#+end_src

*** Conda transient

Transient for switching conda environments.

#+name: conda-transient
#+begin_src emacs-lisp
;; add transient popup for conda commands, bind to "C-c C-M-S-v"
(with-eval-after-load 'conda
  (transient-define-prefix transient/conda ()
    "Conda commands."
    ["Conda environments"
     ("a" "Activate" conda-env-activate)
     ("b" "Activate for buffer" conda-env-activate-for-buffer)
     ("d" "Deactivate" conda-env-deactivate)
     ("l" "List" conda-env-list)
     ]
    )
  (global-set-key (kbd "C-c C-M-S-v") #'transient/conda))
#+end_src

*** Debugger transient

Transient for modifying Emacs Lisp [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugging.html][debugger]] settings.

#+name: debugger-transient
#+begin_src emacs-lisp
(require 'debug)

(defun transient/debugger--list-variables ()
  "Print variables configured to invoke the debugger to the minibuffer."
  (interactive)
  (prin1 (debug--variable-list)))

;; add transient popup for conda commands, bind to "C-c C-M-S-v"
(transient-define-prefix transient/debugger ()
  "Emacs debugger settings."
  ["Emacs debugger settings"
   ["Toggle"
    ("1" (lambda ()
           (transient--make-description "Debug on error" debug-on-error))
     toggle-debug-on-error :transient t)
    ("2" (lambda ()
           (transient--make-description "Debug on quit" debug-on-quit))
     toggle-debug-on-quit :transient t)
    ]
   ["Invoke on function entry"
    ("fl" "List" debugger-list-functions)
    ("fa" "Add" debug-on-entry)
    ("fc" "Cancel" cancel-debug-on-entry)
    ]
   ["Invoke on variable change"
    ("vl" "List" transient/debugger--list-variables)
    ("va" "Add" debug-on-variable-change)
    ("vc" "Cancel" cancel-debug-on-variable-change)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-S-d") #'transient/debugger)
#+end_src

*** Ediff transient

Transient popup for launching Ediff commands.

#+name: ediff-transient
#+begin_src emacs-lisp
;; add transient popup for Ediff commands, bind to "C-c C-M-="
(transient-define-prefix transient/ediff ()
  "Various Ediff launch commands."
  ["Ediff"
   ["2 Way"
    ("b" "Buffers" ediff-buffers)
    ("f" "Files" ediff-files)
    ("d" "Directories" ediff-directories)
    ("c" "Buffer vs File" ediff-current-file)
    ("~" "File vs Backup" ediff-backup)
    ]
   ["3 Way"
    ("3b" "Buffers" ediff-buffers3)
    ("3f" "Files" ediff-files3)
    ("3d" "Directories" ediff-directories3)
    ]
   ["Patches"
    ("pb" "Buffer" ediff-patch-buffer)
    ("pf" "File" ediff-patch-file)
    ]
   ["Regions"
    ("rl" "Linewise" ediff-regions-linewise)
    ("rw" "Wordwise" ediff-regions-wordwise)
    ]
   ["Windows"
    ("wl" "Linewise" ediff-windows-linewise)
    ("ww" "Wordwise" ediff-windows-wordwise)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-=") #'transient/ediff)
#+end_src

*** Frame transient

Transient for frame management.

#+name: frame-transient
#+begin_src emacs-lisp
(defun transient/frame--previous-frame ()
  "Select previous frame."
  (interactive)
  (other-frame -1))

;; add transient popup for frame commands, bind to "C-c C-M-f"
(transient-define-prefix transient/frame ()
  "Frame management commands."
  ["Frame"
   ["Select"
    ("n" "Next" other-frame)
    ("p" "Previous" transient/frame--previous-frame)
    ("s" "By name" select-frame-by-name)
    ]
   ["Layout"
    ("0" "Delete frame" delete-frame)
    ("1" "Delete other frames" delete-other-frames)
    ("2" "Create new frame" make-frame-command)
    ]
   ["Resize"
    ("M" "Toggle maximized" toggle-frame-maximized :transient t)
    ("f" "Toggle fullscreen" toggle-frame-fullscreen :transient t)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-f") #'transient/frame)
#+end_src

*** Help transient

Transient for accessing Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Help.html][help]].

#+name: help-transient
#+begin_src emacs-lisp
;; add transient popup for help commands, bind to "C-c C-M-S-h"
(transient-define-prefix transient/help ()
  "Various help commands."
  ["Help"
   ["Apropos"
    ("aa" "Symbol" apropos)
    ("ac" "Command" apropos-command)
    ("ad" "Documentation" apropos-documentation)
    ("al" "Library" apropos-library)
    ("av" "Variable" apropos-variable)
    ("aV" "Value" apropos-value)
    ]
   ["Describe"
    ("db" "Bindings" describe-bindings)
    ("df" "Function" describe-function)
    ("dk" "Key" describe-key)
    ("dm" "Mode" describe-mode)
    ("dp" "Package" describe-package)
    ("ds" "Syntax" describe-syntax)
    ("dv" "Variable" describe-variable)
    ]
   ["Info"
    ("ia" "Apropos" info-apropos)
    ("ib" "Browse" info)
    ("if" "File" info-lookup-file)
    ("ik" "Keywords" info-finder)
    ("is" "Symbol" info-lookup-symbol)
    ]
   ["Other"
    ("ve" "View messages" view-echo-area-messages)
    ("vl" "View lossage" view-lossage)
    ("w" "Where is" where-is)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-S-h") #'transient/help)
#+end_src

*** Keyboard macros transient

Transient for manipulating and using Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][keyboard macros]].
For an example, see the writeup on [[https://www.emacswiki.org/emacs/KeyboardMacros][EmacsWiki]].

#+name: keyboard-macros-transient
#+begin_src emacs-lisp
;; add transient for keyboard macros, bind to "C-c C-M-k"
(with-eval-after-load 'elmacro
  (transient-define-prefix transient/keyboard-macros ()
    "Keyboard macro commands."
    ["Keyboard Macros"
     ["Actions"
      ("(" "Start" kmacro-start-macro)              ;; also "C-x ("
      (")" "End/Call last" kmacro-end-or-call-macro) ;; also "C-x )"
      ("r" "Call last on region" apply-macro-to-region-lines)
      ]
     ["Ring"
      ("C-n" "Cycle next" kmacro-cycle-ring-next :transient t)
      ("C-p" "Cycle prev" kmacro-cycle-ring-previous :transient t)
      ("C-v" "View last" kmacro-view-macro :transient t)
      ("C-d" "Delete head" kmacro-delete-ring-head :transient t)
      ]
     ["Edit"
      ("e" "Named" edit-kbd-macro)
      ("RET" "Last" kmacro-edit-macro)
      ("l" "Lossage" kmacro-edit-lossage)
      ("SPC" "Step" kmacro-step-edit-macro)
      ]
     ]
    [
     ["Bind/Name"
      ("b" "Bind to key" kmacro-bind-to-key)
      ("n" "Name last" kmacro-name-last-macro)
      ("x" "To register" kmacro-to-register)
      ]
     [:description (lambda ()
                     (transient--make-description "Elmacro" elmacro-mode))
      ("Em" "Toggle mode" elmacro-mode :transient t)
      ("Ec" "Show last commands" elmacro-show-last-commands)
      ("El" "Show last macro" elmacro-show-last-macro)
      ("EC" "Clear history" elmacro-clear-command-history)
      ]
     ["Other"
      ("i" "Insert named" insert-kbd-macro)
      ]
     ]
    )
  (global-set-key (kbd "C-c C-M-k") #'transient/keyboard-macros))
#+end_src

*** Marks and markers transient

Transient for manipulating and managing marks and markers.

#+name: marks-and-markers-transient
#+begin_src emacs-lisp
(defun transient/marks-and-markers--xref-pop-marker-stack-all ()
  "Pop back to where `xref-find-definitions' was first invoked.
\\[xref-find-definitions] is the current binding for `xref-find-definitions'."
  (interactive)
  (let ((ring xref--marker-ring))
    (when (ring-empty-p ring)
      (user-error "Marker stack is empty"))
    (let ((marker (ring-remove ring nil))) ;; oldest marker
      (switch-to-buffer (or (marker-buffer marker)
                            (user-error "The marked buffer has been deleted")))
      (goto-char (marker-position marker))
      (set-marker marker nil nil)
      (run-hooks 'xref-after-return-hook)
      (xref-clear-marker-stack)))) ;; clear the rest of the marker stack

(defun transient/marks-and-markers--push-mark ()
  "Push location of point into the mark ring."
  (interactive)
  (push-mark))
(defun transient/marks-and-markers--pop-mark ()
  "Pop the top location the mark ring and jump to it."
  (interactive)
  (set-mark-command t))
(defun transient/marks-and-markers--push-marker ()
  "Push location of point onto the marker stack."
  (interactive)
  (xref-push-marker-stack))
(defun transient/marks-and-markers--clear-marker-stack ()
  "Clear the marker stack."
  (interactive)
  (xref-clear-marker-stack)
  (message "Cleared `xref--marker-ring'"))

(with-eval-after-load 'helm
  (transient-define-prefix transient/marks-and-markers ()
    "Commands for manipulating and managing marks and markers."
    ["Marks/Markers"
     ["Mark"
      ("SPC" "Push" transient/marks-and-markers--push-mark)
      ("S-SPC" "Pop" transient/marks-and-markers--pop-mark)
      (")" "Sexp" mark-sexp :transient t)
      ("}" "Paragraph" mark-paragraph :transient t)
      ("]" "Defun" mark-defun :transient t)
      ("b" "Buffer" mark-whole-buffer :transient t)
      ("x" "Exchange with point" exchange-point-and-mark :transient t)
      ("m" "Helm" helm-mark-ring)
      ("M" "Helm (all)" helm-all-mark-rings)
      ]
     ["Marker"
      ("." "Push" transient/marks-and-markers--push-marker)
      ("," "Pop" xref-pop-marker-stack :transient t)
      ("<" "Pop all" transient/marks-and-markers--xref-pop-marker-stack-all)
      ("c" "Clear stack" transient/marks-and-markers--clear-marker-stack)
      ]
     ]
    )
  (global-set-key (kbd "C-c C-M-:") #'transient/marks-and-markers))
#+end_src

*** Neuron transient

Transient for interfacing with neuron Zettelkasten.

#+name: neuron-transient
#+begin_src emacs-lisp
;; add transient for neuron commands, bind to "C-c C-M-z"
(with-eval-after-load 'neuron-mode
  (transient-define-prefix transient/neuron ()
    "Neuron Zettelkasten commands."
    ["Neuron Zettelkasten"
     ["File"
      ("z" "New" neuron-new-zettel)
      ("e" "Edit" neuron-edit-zettel)
      ("j" "Daily" neuron-open-daily-notes)
      ("o" "Open" neuron-open-zettel)
      ("i" "Open index" neuron-open-index)
      ]
     ["Server"
      ("rw" "Watch files" neuron-rib-watch)
      ("rg" "Generate site" neuron-rib-generate)
      ("rs" "Start" neuron-rib-serve)
      ("ro" "Open" neuron-rib-open-zettel)
      ("ri" "Open z-index" neuron-rib-open-z-index)
      ("rk" "Kill" neuron-rib-kill)
      ]
     ["Other"
      ("t" "Query tags" neuron-query-tags)
      ("g" "Refresh cache" neuron-refresh)
      ("c" "Configuration" neuron-edit-zettelkasten-configuration)
      ]
     ]
    )
  (global-set-key (kbd "C-c C-M-z") #'transient/neuron))
#+end_src

*** Org launcher transient

Transient for accessing Org entry points.

#+name: org-launcher-transient
#+begin_src emacs-lisp
;; add transient for accessing Org entry points
(with-eval-after-load 'org
  (transient-define-prefix transient/org-launcher ()
    "Launcher for Org entry points."
    ["Org launcher"
     ("a" "Agenda" org-agenda)
     ("c" "Capture" org-capture)
     ("b" "Switchb" org-switchb)
     ("l" "Store link" org-store-link)
     ]
    )
  (global-set-key (kbd "C-c C-M-o") #'transient/org-launcher))
#+end_src

*** Password store transient

Transient for accessing password-store.el commands.

#+name: password-store-transient
#+begin_src emacs-lisp
;; add transient for password-store commands, bind to "C-c C-M-S-p"
(with-eval-after-load 'auth-source-pass
  (with-eval-after-load 'password-store
    (defun transient/password-store--toggle-auth-source-pass-store ()
      "Toggle auto-source and password-store integration."
      (interactive)
      (if (member 'password-store auth-sources)
          (my-auth-source-pass-disable)
        (my-auth-source-pass-enable)))
    (transient-define-prefix transient/password-store ()
      "Various password-store commands."
      ["Password store"
       ["Copy"
        ("c" "Password" password-store-copy)
        ("f" "Field" password-store-copy-field)
        ("u" "URL" password-store-url)
        ]
       ["Add/Remove/Modify"
        ("g" "Generate" password-store-generate)
        ("i" "Insert" password-store-insert)
        ("e" "Edit" password-store-edit)
        ("r" "Rename" password-store-rename)
        ("R" "Remove" password-store-remove)
        ]
       ["Other"
        ("A" (lambda ()
               (transient--make-description
                "Auth-source integration"
                (member 'password-store auth-sources)))
         transient/password-store--toggle-auth-source-pass-store
         :transient t)
        ("C" "Clear" password-store-clear)
        ("I" "Init store" password-store-init)
        ("v" "Version" password-store-version)
        ]
       ]
      )
    (global-set-key (kbd "C-c C-M-S-p") #'transient/password-store)))
#+end_src

*** Profiler transient

Transient for built in Emacs [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html][profiler]].

#+name: profiler-transient
#+begin_src emacs-lisp
;; add transient for Emacs profiler, bind to "C-c C-M-S-e"
(transient-define-prefix transient/profiler ()
  "Emacs profiler commands."
  [:description (lambda ()
                  (concat "Profiler | "
                          (transient--make-description
                           "CPU"
                           (profiler-running-p))
                          " "
                          (transient--make-description
                           "Memory"
                           (profiler-memory-running-p))))
   ("s" "Start/Reset" profiler-start :transient t)
   ("p" "Report" profiler-report)
   ("e" "Stop" profiler-stop :transient t)
   ]
  )
(global-set-key (kbd "C-c C-M-S-e") #'transient/profiler)
#+end_src

*** Projectile transient

Transient for interfacing with Projectile commands

#+name: projectile-transient
#+begin_src emacs-lisp
;; add transient popup for projectile, bind to "C-c C-M-p"
(with-eval-after-load 'projectile
  (transient-define-prefix transient/projectile ()
    "Projectile commands"
    [:description (lambda ()
                    (concat "Projectile ["
                            (projectile-project-name)
                            "]"))
     ["Project"
      ("C" "Configure" projectile-configure-project)
      ("c" "Compile" projectile-compile-project)
      ("u" "Run" projectile-run-project)
      ("P" "Test" projectile-test-project)
      ("z" "Cache file" projectile-cache-current-file)
      ("i" "Invalidate cache" projectile-invalidate-cache)
      ("x" "Run Eshell" projectile-run-eshell)
      ("!" "Run command" projectile-run-shell-command-in-root)
      ("&" "Run command async" projectile-run-async-shell-command-in-root)
      ]
     ["Buffer"
      ("b" "Switchb" projectile-switch-to-buffer)
      ("<left>" "Previous" projectile-previous-project-buffer :transient t)
      ("<right>" "Next" projectile-next-project-buffer :transient t)
      ("I" "Ibuffer" projectile-ibuffer)
      ("S" "Save" projectile-save-project-buffers)
      ("k" "Kill" projectile-kill-buffers)
      ]
     ["Search"
      ("o" "Occur" projectile-multi-occur)
      ("s" "Grep" projectile-grep)
      ("r" "Replace" projectile-replace)
      ]
     ["Tags"
      ("j" "Find tag" projectile-find-tag)
      ("R" "Regen tags" projectile-regenerate-tags)
      ]
     ]
    [
     ["File"
      ("f" "Find file" projectile-find-file)
      ("F" "Find file (known prjs)" projectile-find-file-in-known-projects)
      ("g" "Find file (dwim)" projectile-find-file-dwim)
      ("t" "Toggle impl/test" projectile-toggle-between-implementation-and-test)
      ("e" "Recentf" projectile-recentf)
      ("E" "Edit dir-locals" projectile-edit-dir-locals)
      ]
     ["Dir"
      ("d" "Find dir" projectile-find-dir)
      ("D" "Dired" projectile-dired)
      ]
     ["Other"
      ("m" "Commander" projectile-commander)
      ("p" "Switch project" projectile-switch-project)
      ]
     ]
    )
  (define-key projectile-mode-map (kbd "C-c C-M-p")
    #'transient/projectile))
#+end_src

*** Registers transient

Transient for easier access to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][register]] commands.

#+name: registers-transient
#+begin_src emacs-lisp
;; add transient popup for register commands, bind to "C-c C-M-S-v"
(transient-define-prefix transient/registers ()
  "Register commands."
  ["Registers"
   [("SPC" "Save point" point-to-register)
    ("w" "Save windows" window-configuration-to-register)
    ("f" "Save frames" frameset-to-register)
    ("j" "Jump" jump-to-register)
    ]
   [("s" "Copy region" copy-to-register)
    ("a" "Append region" append-to-register)
    ("p" "Prepend region" prepend-to-register)
    ("r" "Copy rectangle" copy-rectangle-to-register)
    ]
   [("i" "Insert" insert-register)
    ("l" "List" list-registers)
    ("v" "View" view-register)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-\"") #'transient/registers)
#+end_src

*** Search transient

Transient for accessing Emacs [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Search.html][search]] functionality.

#+name: search-transient
#+begin_src emacs-lisp
;; add transient popup for search tools, bind to "C-c C-M-/"
(with-eval-after-load 'helm
  (defun transient/search--rg-menu-or-rgrep ()
    "Dispatch to `rg-menu' if command available, else `rgrep'."
    (interactive)
    (if (and (executable-find "rg")
             (fboundp 'rg-menu))
        (call-interactively #'rg-menu)
      (call-interactively #'rgrep)))
  (transient-define-prefix transient/search ()
    "Search commands."
    ["Search"
     ["Grep"
      ("gr" "Recursive" transient/search--rg-menu-or-rgrep)
      ("gz" "Recursive (*.gz)" rzgrep)
      ("gg" "With user args" grep)
      ("gf" "Via find" grep-find)
      ]
     ["Occur in buffers"
      ("oo" "Current" helm-occur)
      ("ov" "Visible" helm-occur-visible-buffers)
      ("ob" "Matching" multi-occur-in-matching-buffers)
      ("om" "All" multi-occur)
      ]
     ["Query/Replace"
      ("rs" "String" query-replace)
      ("rr" "Regexp" query-replace-regexp)
      ]
     ["Other"
      ("." "Find definition" xref-find-definitions)
      ("w" "EWW web search" eww)
      ]
     ]
    )
  (global-set-key (kbd "C-c C-M-/") #'transient/search))
#+end_src

*** Shell entry transient

Transient providing entry points into Eshell and vterm.

#+name: shell-transient
#+begin_src emacs-lisp
;; add transient popup for shell tools, bind to "C-c C-M-t"
(transient-define-prefix transient/shell ()
  "Various shell tools."
  ["Shell tools"
   ["Eshell"
    ("e" "New/Switch" my-eshell-with-name)
    ]
   ["Vterm"
    ("vv" "New" vterm)
    ("vo" "Other" vterm-other-window)
    ("vc" "Switch" vterm-switchb)
    ]
   ["Tmux"
    ("ts" "Send" tmux-send)
    ("tr" "Resend" tmux-resend)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-t") #'transient/shell)
#+end_src

*** Symbol overlay transient

Add transient popup for symbol-overlay functionality.

#+name: symbol-overlay-transient
#+begin_src emacs-lisp
;; add symbol-overlay transient popup and bind to "C-M-;"
(with-eval-after-load 'symbol-overlay
  (transient-define-prefix transient/symbol-overlay ()
    "Symbol overlay commands"
    ;; suffix actions don't exit the transient popup by default
    :transient-suffix 'transient--do-stay
    ["Symbol overlays"
     ["Navigation"
      ("n" "Jump next" symbol-overlay-jump-next)
      ("p" "Jump prev" symbol-overlay-jump-prev)
      ("f" "Switch fwd" symbol-overlay-switch-forward)
      ("b" "Switch bwd" symbol-overlay-switch-backward)
      ]
     ["Operations"
      ("i" "Put/Remove" symbol-overlay-put)
      ("t" "Toggle scope" symbol-overlay-toggle-in-scope)
      ("k" "Remove all" symbol-overlay-remove-all :transient nil)
      ("r" "Rename" symbol-overlay-rename :transient nil)
      ("q" "Query/Replace" symbol-overlay-query-replace :transient nil)
      ]
     ["Other"
      ("m" (lambda () (transient--make-description
                       "symbol-overlay-mode"
                       symbol-overlay-mode))
       symbol-overlay-mode)
      ("w" "Copy" symbol-overlay-save-symbol)
      ("s" "Search" symbol-overlay-isearch-literally :transient nil)
      ("d" "Defn" symbol-overlay-jump-to-definition :transient nil)
      ]
     ]
    )
  (global-set-key (kbd "C-M-;") 'transient/symbol-overlay))
#+end_src

*** System information, process and Emacs runtime/server transient

Transient for accessing system, process and Emacs runtime commands.
The Emacs runtime commands also include those for toggling and
restarting Emacs as a server.

#+name: system-transient
#+begin_src emacs-lisp
(defun transient/system--display-current-datetime ()
  "Display the current time in the minibuffer."
  (interactive)
  (message (format-time-string "%Y-%b-%d %l:%M:%S%p %Z %A")))

(defun transient/system--display-emacs-pid ()
  "Display the process id of current Emacs process in the minibuffer."
  (interactive)
  (message (format "%d" (emacs-pid))))

(defun transient/system--display-emacs-build-config ()
  "Display the Emacs build configuration in the minibuffer."
  (interactive)
  (message (mapconcat 'identity
                      `("Emacs build configuration"
                        ,(format "  Build target:     %s"
                                 system-configuration)
                        ,(format "  Enabled features: %s"
                                 system-configuration-features))
                      "\n")))

;; add transient popup for system info, process and Emacs runtime
;; commands (including `server-mode'), bind to "C-c C-M-S-s"
(transient-define-prefix transient/system ()
  "System info, process and Emacs runtime/server-related commands."
  ;; suffix actions don't exit the transient popup by default
  :transient-suffix 'transient--do-stay
  ["System, process and Emacs runtime/server"
   [:description (lambda ()
                   (concat "Emacs ("
                           (transient--make-description
                            "server-mode"
                            server-mode)
                           ")"))
    ("eb" "Build config" transient/system--display-emacs-build-config)
    ("ei" "Init time" emacs-init-time)
    ("ep" "Emacs PID" transient/system--display-emacs-pid)
    ("es" "Toggle server-mode" server-mode)
    ("er" "Restart server" restart-emacs-server)
    ("eu" "Uptime" emacs-uptime)
    ("ev" "Version" emacs-version)
    ]
   ["System"
    ("sp" "Proced" proced :transient nil)
    ("st" "Datetime" transient/system--display-current-datetime)
    ("sw" "World time" display-time-world :transient nil)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-S-s") #'transient/system)
#+end_src

*** Visual transient

Transient for visual commands and toggles.

#+name: visual-transient
#+begin_src emacs-lisp
;; make sure functions used by visual transient are loaded
(require 'follow)
(require 'hilit-chg)
(require 'hl-line)
(require 'display-line-numbers)
(require 'face-remap)
(require 'whitespace)

(require 'censor)
(require 'darkroom)
(require 'highlight-indent-guides)
(require 'hl-todo)
(require 'prism)
(require 'symbol-overlay)
(require 'too-long-lines-mode)

(defvar-local transient/visual--face-remap-cookies '()
  "Alist storing cookies for `face-remap-add-relative' calls.")

(defun transient/visual--toggle-lighten-face (face)
  "Toggle brightness of FACE color for emphasis or emphasis."
  (let ((face-remap-cookie-old (alist-get
                                face
                                transient/visual--face-remap-cookies)))
    (if face-remap-cookie-old
        (progn
          (face-remap-remove-relative face-remap-cookie-old)
          (setq transient/visual--face-remap-cookies
                (assq-delete-all
                 face
                 transient/visual--face-remap-cookies)))
      (let* ((light-color (color-lighten-name
                           (face-attribute face :foreground)
                           50)) ;; lighten color by 50 percent
             (face-remap-cookie-new (face-remap-add-relative
                                     face
                                     :foreground light-color)))
        (push `(,face . ,face-remap-cookie-new)
              transient/visual--face-remap-cookies)))))

(defun transient/visual--toggle-lighten-font-lock-comment-face ()
  "Toggle brightness of `font-lock-comment-face'."
  (interactive)
  (transient/visual--toggle-lighten-face
   'font-lock-comment-face))

(defun transient/visual--toggle-lighten-font-lock-comment-delimiter-face ()
  "Toggle brightness of `font-lock-comment-delimiter-face'."
  (interactive)
  (transient/visual--toggle-lighten-face
   'font-lock-comment-delimiter-face))

(defun transient/visual--toggle-lighten-font-lock-doc-face ()
  "Toggle brightness of `font-lock-doc-face'."
  (interactive)
  (transient/visual--toggle-lighten-face
   'font-lock-doc-face))

(defun transient/visual--display-toggle-trailing-whitespace ()
  "Toggle the display of trailing whitespace."
  (interactive)
  (setq-local show-trailing-whitespace
              (not show-trailing-whitespace))
  (message "show-trailing-whitespace: %s"
           (if show-trailing-whitespace "yes" "no")))

(defun transient/visual--doom-modeline-focus-and-redraw-display ()
  "Refocus doom-modeline and redraw display."
  (interactive)
  ;; refocus doom-modeline just in case
  (when (and (boundp 'doom-modeline-mode)
             doom-modeline-mode)
    (doom-modeline-focus))
  ;; redraw display
  (redraw-display))

(defun transient/visual--toggle-ligatures ()
  "Toggle ligatures.
Currently only works for Emacs Mac port."
  (interactive)
  (cond ((fboundp 'mac-auto-operator-composition-mode)
         (mac-auto-operator-composition-mode))
        (t (message "Not implemented for this Emacs build."))))

;; add transient popup for visual commands, bind to "C-c C-M-v"
(transient-define-prefix transient/visual ()
  "Visual commands and toggles."
  :transient-suffix 'transient--do-stay
  ["Visual"
   ["Display"
    ("H" (lambda ()
           (transient--make-description
            "Highlight changes"
            highlight-changes-mode))
     highlight-changes-mode)
    ("l" (lambda ()
           (transient--make-description
            "Line numbers"
            display-line-numbers-mode))
     display-line-numbers-mode)
    ("m" (lambda ()
           (transient--make-description
            "Menu bar"
            menu-bar-mode))
     menu-bar-mode)
    ("s" (lambda ()
           (transient--make-description
            "Vscroll bar"
            (frame-parameter nil 'vertical-scroll-bars)))
     toggle-scroll-bar)
    ("S" (lambda ()
           (transient--make-description
            "Hscroll bar"
            (frame-parameter nil 'horizontal-scroll-bars)))
     toggle-horizontal-scroll-bar)
    ("t" (lambda ()
           (transient--make-description
            "Truncate lines"
            truncate-lines))
     toggle-truncate-lines)
    ("w" (lambda ()
           (transient--make-description
            "Trailing whitespace"
            show-trailing-whitespace))
     transient/visual--display-toggle-trailing-whitespace)
    ("W" (lambda ()
           (transient--make-description
            "Whitespace"
            whitespace-mode))
     whitespace-mode)
    ("i" (lambda ()
           (transient--make-description
            "Indent guides"
            highlight-indent-guides-mode))
     highlight-indent-guides-mode)
    ("L" (lambda ()
           (transient--make-description
            "Hide long lines"
            too-long-lines-mode))
     too-long-lines-mode)
    ("C-l" "Ligatures" transient/visual--toggle-ligatures)
    ]
   ["Cursor"
    ("b" (lambda ()
           (transient--make-description
            "Blink"
            blink-cursor-mode))
     blink-cursor-mode)
    ("h" (lambda ()
           (transient--make-description
            "Highlight line"
            hl-line-mode))
     hl-line-mode)
    ("p" (lambda ()
           (transient--make-description
            "Show paren"
            show-paren-mode))
     show-paren-mode)
    ("T" (lambda ()
           (transient--make-description
            "Transient mark"
            transient-mark-mode))
     transient-mark-mode)
    ("O" (lambda ()
           (transient--make-description
            "Symbol overlay"
            symbol-overlay-mode))
     symbol-overlay-mode)
    ]
   ["Toggle color"
    ("cf" (lambda ()
            (transient--make-description
             "Font locking"
             font-lock-mode))
     font-lock-mode)
    ("cc" (lambda ()
            (transient--make-description
             "Comments"
             (null (assq 'font-lock-comment-face
                         transient/visual--face-remap-cookies))))
     transient/visual--toggle-lighten-font-lock-comment-face)
    ("cC" (lambda ()
            (transient--make-description
             "Comment delims"
             (null (assq 'font-lock-comment-delimiter-face
                         transient/visual--face-remap-cookies))))
     transient/visual--toggle-lighten-font-lock-comment-delimiter-face)
    ("cd" (lambda ()
            (transient--make-description
             "Docstrings"
             (null (assq 'font-lock-doc-face
                         transient/visual--face-remap-cookies))))
     transient/visual--toggle-lighten-font-lock-doc-face)
    ("cp" (lambda ()
            (transient--make-description
             "Prism"
             prism-mode))
     prism-mode)
    ("cP" (lambda ()
            (transient--make-description
             "Prism whitespace"
             prism-whitespace-mode))
     prism-whitespace-mode)
    ("cT" (lambda ()
             (transient--make-description
              "Highlight TODOs"
              hl-todo-mode))
     hl-todo-mode)
    ]
   ]
  [
   [:description (lambda ()
                   (transient--make-description
                    "Narrow"
                    (buffer-narrowed-p)))
    ("nd" "Defun" narrow-to-defun)
    ("nr" "Region" narrow-to-region)
    ("np" "Page" narrow-to-page)
    ("nw" "Widen" widen)
    ]
   [:description (lambda ()
                   (concat "Zoom ["
                           (if text-scale-mode
                               (number-to-string text-scale-mode-amount)
                             " ")
                           "]"))
    ("+" "Increase" text-scale-increase)
    ("-" "Decrease" text-scale-decrease)
    ("dm" (lambda ()
            (transient--make-description
             "Darkroom"
             darkroom-mode))
     darkroom-mode)
    ("dt" (lambda ()
            (transient--make-description
             "Darkroom ttv"
             darkroom-tentative-mode))
     darkroom-tentative-mode)
    ]
   ["Other"
    ("v" (lambda ()
           (transient--make-description
            "Visual line"
            visual-line-mode))
     visual-line-mode)
    ("F" (lambda ()
           (transient--make-description "Follow" follow-mode))
     follow-mode)
    ("x" (lambda ()
           (transient--make-description
            "Censor"
            censor-mode))
     censor-mode)
    ("X" (lambda ()
           (transient--make-description
            "Censor (global)"
            global-censor-mode))
     global-censor-mode)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-v") #'transient/visual)
#+end_src

*** Window transient

Transient for window management.

#+name: window-transient
#+begin_src emacs-lisp
;; `next-multiframe-window' & `previous-multiframe-window' renamed to
;; `next-window-any-frame' & `previous-window-any-frame' in Emacs 27
(when (version< emacs-version "27")
  (defalias 'next-window-any-frame 'next-multiframe-window)
  (defalias 'previous-window-any-frame 'previous-multiframe-window))

(defun transient/window--transpose-windows (selector)
  "Call SELECTOR and transpose buffers between current and selected windows."
  (let ((from-win (selected-window))
        (from-buf (window-buffer)))
    (funcall selector)
    (set-window-buffer from-win (window-buffer))
    (set-window-buffer (selected-window) from-buf)))

(defun transient/window--transpose-window-up ()
  "Transpose buffers between current and the window above it."
  (interactive)
  (transient/window--transpose-windows 'windmove-up))
(defun transient/window--transpose-window-down ()
  "Transpose buffers between current and the window below it."
  (interactive)
  (transient/window--transpose-windows 'windmove-down))
(defun transient/window--transpose-window-left ()
  "Transpose buffers between current and the window to its left."
  (interactive)
  (transient/window--transpose-windows 'windmove-left))
(defun transient/window--transpose-window-right ()
  "Transpose buffers between current and the window to its right."
  (interactive)
  (transient/window--transpose-windows 'windmove-right))

;; add transient popup for window commands, bind to "C-c C-M-w"
(transient-define-prefix transient/window ()
  "Window management commands."
  :transient-suffix 'transient--do-stay
  ["Window"
   ["Navigate"
    ("n" "Next" next-window-any-frame)
    ("p" "Previous" previous-window-any-frame)
    ("o" "Other" other-window)
    ("<up>" "↑" windmove-up)
    ("<down>" "↓" windmove-down)
    ("<left>" "←" windmove-left)
    ("<right>" "→" windmove-right)
    ]
   ["Transpose"
    ("S-<up>" "↑" transient/window--transpose-window-up)
    ("S-<down>" "↓" transient/window--transpose-window-down)
    ("S-<left>" "←" transient/window--transpose-window-left)
    ("S-<right>" "→" transient/window--transpose-window-right)
    ("[" "Rotate bwd" my-rotate-buffers-backward)
    ("]" "Rotate fwd" my-rotate-buffers-forward)
    ]
   ["Layout"
    ("0" "Delete window" delete-window)
    ("1" "Delete other windows" delete-other-windows)
    ("2" "Split horiz" split-window-right)
    ("3" "Split vert" split-window-below)
    ("4" "Kill buffer and window" kill-buffer-and-window)
    ("u" "Winner undo" winner-undo)
    ("r" "Winner redo" winner-redo)
    ]
   ["Resize"
    ("-" "Shrink vert" shrink-window)
    ("^" "Enlarge vert" enlarge-window)
    ("{" "Shrink horiz" shrink-window-horizontally)
    ("}" "Enlarge horiz" enlarge-window-horizontally)
    ("M" "Maximize" maximize-window)
    ("m" "Minimize" minimize-window)
    ("+" "Balance" balance-windows)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-w") #'transient/window)
#+end_src

*** Workspace transient

Transient for workspace manipulation and usage.

#+name: workspace-transient
#+begin_src emacs-lisp
;; add transient popup for workspace commands, bind to "C-c C-M-e"
(transient-define-prefix transient/workspace ()
  "Various workspace commands."
  ["Workspace"
   ["Desktop"
    ("dc" "Clear" desktop-clear)
    ("ds" "Save" desktop-save)
    ("dr" "Read" desktop-read)
    ("dR" "Revert" desktop-revert)
    ("dd" "Change Dir" desktop-change-dir)
    ]
   ]
  )
(global-set-key (kbd "C-c C-M-e") #'transient/workspace)
#+end_src

*** Writing transient

Transient for accessing writing-related commands.

#+name: writing-transient
#+begin_src emacs-lisp
;; add transient popup for writing commands, bind to "C-c C-M-S-w"
(with-eval-after-load 'dictionary
  (with-eval-after-load 'synosaurus
    (with-eval-after-load 'langtool
      (with-eval-after-load 'typo
        (transient-define-prefix transient/writing ()
          "Writing commands."
          ["Writing"
           ["Spelling"
            ("sm" (lambda ()
                    (interactive)
                    (transient--make-description "Flyspell mode"
                                                 flyspell-mode))
             flyspell-mode :transient t)
            ("sb" "Check buffer" flyspell-buffer :transient t)
            ("sn" "Next error" flyspell-goto-next-error :transient t)
            ("sc" "Correct word" flyspell-auto-correct-word :transient t)
            ]
           ["Thesaurus"
            ("tm" (lambda ()
                    (interactive)
                    (transient--make-description "Synosaurus mode"
                                                 synosaurus-mode))
             synosaurus-mode :transient t)
            ("tl" "Lookup" synosaurus-lookup)
            ("tr" "Replace" synosaurus-choose-and-replace)
            ("ti" "Insert" synosaurus-choose-and-insert)
            ]
           ["Grammar"
            ("gs" "Start check" langtool-check)
            ("gc" "Correct buffer" langtool-correct-buffer)
            ("ge" "End check" langtool-check-done)
            ("gl" "Switch language" langtool-switch-default-language
             :transient t)
            ]
           ]
          [
           ["Dictionary"
            ("ds" "Search" dictionary-search)
            ("dm" "Match words" dictionary-match-words)
            ]
           ["Typography"
            ("y" (lambda ()
                   (interactive)
                   (transient--make-description "Typography mode"
                                                typo-mode))
             typo-mode :transient t)]
           ]
          )
        (global-set-key (kbd "C-c C-M-S-w") #'transient/writing)))))
#+end_src

*** YASnippet transient

Transient for ~yas-minor-mode~ YASnippet commands and YASnippet
supporting packages.

#+name: yasnippet-transient
#+begin_src emacs-lisp
;; add transient popup for yasnippet commands, bind to "C-c C-M-<"
(with-eval-after-load 'yasnippet
  (with-eval-after-load 'auto-yasnippet
    (defun transient/yasnippet--aya-show-current ()
     "Show the current auto-snippet `aya-current' in the minibuffer."
     (interactive)
     (message "Current auto-yasnippet:\n%s" aya-current))
   (transient-define-prefix transient/yasnippet ()
     "YASnippet commands."
     ["YASnippet"
      ["Stored snippets"
       ("SPC" "Expand" yas-expand)
       ("s" "Insert" yas-insert-snippet)
       ("n" "New" yas-new-snippet)
       ("d" "Describe" yas-describe-tables)
       ("v" "Visit file" yas-visit-snippet-file)
       ]
      ["Auto snippets"
       ("w" "Create" aya-create)
       ("y" "Expand" aya-expand)
       ("?" "Show current" transient/yasnippet--aya-show-current)
       ]
      ]
     )
   (global-set-key (kbd "C-c C-M-<") #'transient/yasnippet)))
#+end_src

** Major mode transients

Major mode transients are always bound to ~C-c C-M-m~ and that binding
is active only when their corresponding major mode is active.

*** clojure-mode transient

Clojure major mode transient. Mostly entry points to [[https://github.com/clojure-emacs/cider][CIDER]] commands.

#+name: clojure-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for clojure-mode
(with-eval-after-load 'clojure-mode
  (with-eval-after-load 'cider
    (transient-define-prefix transient/clojure-mode/eval ()
      "`clojure-mode' CIDER evaluation commands."
      ["CIDER → Run"
       ["Eval"
        ("r" "Region" cider-eval-region)
        ("n" "Namespace form" cider-eval-ns-form)
        ("e" "Last sexp" cider-eval-last-sexp)
        ("P" "Last sexp (pprint)" cider-pprint-eval-last-sexp)
        ("w" "Last sexp replace" cider-eval-last-sexp-and-replace)
        ("E" "Last sexp to REPL" cider-eval-last-sexp-to-repl)
        ("d" "Defun at point" cider-eval-defun-at-point)
        ("f" "Defun at point (pprint)" cider-pprint-eval-defun-at-point)
        (":" "Minibuffer input" cider-read-and-eval)
        ]
       ["Load"
        ("k" "Buffer" cider-load-buffer)
        ("l" "File" cider-load-file)
        ("p" "All proj ns" cider-load-all-project-ns)
        ]
       ["Other"
        ("i" "Inspect" cider-inspect)
        ("m" "Macroexpand (single level)" cider-macroexpand-1)
        ("M" "Macroexpand (all levels)" cider-macroexpand-all)
        ]
       ]
      )

    (transient-define-prefix transient/clojure-mode/test ()
      "`clojure-mode' CIDER testing commands."
      ["CIDER → Test"
       ("t" "Run" cider-test-run-test)
       ("l" "Run loaded" cider-test-run-loaded-tests)
       ("p" "Run project" cider-test-run-project-tests)
       ("n" "Run namespace" cider-test-run-ns-tests)
       ("r" "Rerun failed" cider-test-rerun-failed-tests)
       ("s" "Show report" cider-test-show-report)
       ]
      )

    (transient-define-prefix transient/clojure-mode/help ()
      "`clojure-mode' CIDER help/documentation commands."
      ["CIDER → Help"
       ("d" "CIDER docs" cider-doc)
       ("c" "Clojure docs" cider-clojuredocs)
       ("C" "Clojure docs (web)" cider-clojuredocs-web)
       ("j" "Java docs (web)" cider-javadoc)
       ("a" "Search symbols" cider-apropos)
       ("s" "Select symbols" cider-apropos-select)
       ("A" "Search docs" cider-apropos-documentation)
       ("S" "Select docs" cider-apropos-documentation-select)
       ]
      )

    (defun transient/clojure-mode/debug--eval-defun-at-point ()
      "Debug version of `cider-eval-defun-at-point'."
      (interactive)
      (cider-eval-defun-at-point t))

    (transient-define-prefix transient/clojure-mode/debug ()
      "`clojure-mode' CIDER debug/documentation commands."
      ["CIDER → Debug"
       ("x" "Eval at point" transient/clojure-mode/debug--eval-defun-at-point)
       ("v" "Toggle trace variable" cider-toggle-trace-var)
       ("n" "Toggle trace namespace" cider-toggle-trace-ns)
       ]
      )

    (defun transient/clojure-mode/repl--clear-output-all ()
      "Clear all output in CIDER REPL buffer."
      (interactive)
      (cider-find-and-clear-repl-output t))

    (transient-define-prefix transient/clojure-mode/repl ()
      "`clojure-mode' CIDER REPL commands."
      ["CIDER → REPL"
       ["Input"
        ("z" "Switch to buffer" cider-switch-to-repl-buffer)
        ("n" "Set namespace" cider-repl-set-ns)
        ("p" "Insert last sexp" cider-insert-last-sexp-in-repl)
        ("x" "Refresh" cider-refresh)
        ]
       ["Output"
        ("o" "Clear" cider-find-and-clear-repl-output)
        ("O" "Clear all" transient/clojure-mode/repl--clear-output-all)
        ]
       [
        "Other"
        ("d" "Display conn info" cider-display-connection-info)
        ("b" "Interrupt" cider-interrupt)
        ("Q" "Quit CIDER" cider-quit)
        ]
       ]
      )

    (transient-define-prefix transient/clojure-mode ()
      "`clojure-mode' CIDER commands."
      ["CIDER"
       ["Session"
        ("jc" "Jack-in (Clojure)" cider-jack-in-clj)
        ("js" "Jack-in (ClojureScript)" cider-jack-in-cljs)
        ("jb" "Jack-in (Both)" cider-jack-in-clj&cljs)
        ]
       ["Submenus"
        ("r" "→ REPL" transient/clojure-mode/repl)
        ("e" "→ Run" transient/clojure-mode/eval)
        ("t" "→ Test" transient/clojure-mode/test)
        ("d" "→ Debug" transient/clojure-mode/debug)
        ("h" "→ Help" transient/clojure-mode/help)
        ]
       ]
      )

    (define-key clojure-mode-map (kbd "C-c C-M-m") #'transient/clojure-mode)))
#+end_src

*** csv-mode transient

CSV major mode transient.

#+name: csv-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for csv-mode
(with-eval-after-load 'csv-mode
  (transient-define-prefix transient/csv-mode ()
    "`csv-mode' commands."
    ["CSV"
     ["Sort"
      ("s" "Lexicographic" csv-sort-fields)
      ("n" "Numerically" csv-sort-numeric-fields)
      ("r" "Reverse" csv-reverse-region)
      ("d" "Toggle descending" csv-toggle-descending :transient t)
      ]
     ["Edit"
      ("t" "Transpose" csv-transpose)
      ("k" "Cut" csv-kill-fields)
      ("y" "Paste" csv-yank-fields)
      ("z" "Paste as new table" csv-yank-as-new-table)
      ]
     ["Visual"
      ("A" "Align visible" csv-align-visible-fields :transient t)
      ("a" "Align" csv-align-fields :transient t)
      ("u" "Unalign" csv-unalign-fields :transient t)
      ("h" "Toggle header" csv-header-line :transient t)
      ("v" "Toggle separator" csv-toggle-invisibility :transient t)
      ]
     ]
    )
  (define-key csv-mode-map (kbd "C-c C-M-m") #'transient/csv-mode))
#+end_src

*** debugger-mode transient

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugger.html][Debugger]] major mode transient.

#+name: debugger-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for debugger-mode
(with-eval-after-load 'debug
  (transient-define-prefix transient/debugger-mode ()
    "`debugger-mode' commands."
    ["Emacs debugger"
     ["Movement"
      ("n" "Next line" next-line :transient t)
      ("p" "Previous line" previous-line :transient t)
      ]
     ["Breakpoints"
      ("b" "Set" debugger-frame)
      ("u" "Unset" debugger-frame-clear)
      ]
     ["Evaluate"
      ("e" "Sexp" debugger-eval-expression)
      ("R" "Sexp and record" debugger-record-expression)
      ]
     ]
    [
     [
      "Stepping"
      ("d" "Step through" debugger-step-through)
      ("c" "Continue" debugger-continue)
      ("j" "Jump" debugger-jump)
      ("q" "Exit" top-level)
      ]
     ["Other"
      ("RET" "Follow at point" backtrace-help-follow-symbol)
      ("r" "Specify return value" debugger-return-value)
      ("l" "List debug functions" debugger-list-functions)
      ("v" "Toggle locals" backtrace-toggle-locals)
      ("h" "Help" describe-mode)
      ]
     ]
    )
  (define-key debugger-mode-map (kbd "C-c C-M-m") #'transient/debugger-mode))
#+end_src

*** dired-mode transient

Dired major mode transient.

#+name: dired-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for ess-mode
(with-eval-after-load 'dired
  (with-eval-after-load 'dired-filter
    (defun transient/dired-mode--dired-kill-and-next-subdir ()
      "Kill current subdir in dired, and jump back to its parent dir."
      (interactive)
      (let* ((subdir-name (directory-file-name (dired-current-directory)))
             (parent-dir  (file-name-directory subdir-name))
             (search-term (concat " "
                                  (file-name-base subdir-name)
                                  (file-name-extension subdir-name t))))
        (dired-kill-subdir)
        (dired-goto-subdir parent-dir)
        (search-forward search-term)))
    (transient-define-prefix transient/dired-mode/filter ()
      "`dired-mode' Dired-Filter commands."
      ;; have suffixes not exit the transient by default
      :transient-suffix 'transient--do-stay
      ["Dired → Filter"
       ["Filter by"
        ("n" "Name" dired-filter-by-name)
        ("r" "Regexp" dired-filter-by-regexp)
        ("." "Extension" dired-filter-by-extension)
        ("h" "Hidden" dired-filter-by-dot-files)
        ("o" "Omitted" dired-filter-by-omit)
        ("g" "Garbage" dired-filter-by-garbage)
        ("e" "Predicate" dired-filter-by-predicate)
        ("f" "File" dired-filter-by-file)
        ("d" "Directory" dired-filter-by-directory)
        ("m" "Mode" dired-filter-by-mode)
        ("s" "Symlink" dired-filter-by-symlink)
        ("x" "Executable" dired-filter-by-executable)
        ("ig" "Git-ignored" dired-filter-by-git-ignored)
        ]
       ["Operators"
        ("|" "OR" dired-filter-or)
        ("!" "NOT" dired-filter-negate)
        ("*" "Decompose" dired-filter-decompose)
        ("TAB" "Transpose" dired-filter-transpose)
        ("p" "Pop" dired-filter-pop)
        ("/" "Reset" dired-filter-pop-all)
        ]
       ["Save/Load"
        ("S" "Save" dired-filter-save-filters)
        ("L" "Load" dired-filter-load-saved-filters)
        ("A" "Add" dired-filter-add-saved-filters)
        ("D" "Delete" dired-filter-delete-saved-filters)
        ]
       ]
      )
    (transient-define-prefix transient/dired-mode ()
      "`dired-mode' commands."
      ["Dired"
       ["File open"
        ("RET" "Open" dired-find-file)
        ("o" "Open other" dired-find-file-other-window)
        ("F" "Open marked" dired-do-find-marked-files)
        ("z" "Open external" dired--open-file-at-pt)
        ("v" "View file" dired-view-file)
        ("+" "Create dir" dired-create-directory)
        ("=" "Diff" dired-diff)
        ]
       ["File operations"
        ("C" "Copy" dired-do-copy)
        ("D" "Delete" dired-do-delete)
        ("x" "Delete marked" dired-do-flagged-delete)
        ("S" "Symlink" dired-do-symlink)
        ("Y" "Symlink to" dired-do-relsymlink)
        ("c" "Compress to" dired-do-compress-to)
        ("Z" "Compress" dired-do-compress)
        ]
       ["File modification"
        ("R" "Rename" dired-do-rename)
        ("%R" "Rename by regexp" dired-do-rename-regexp)
        ("G" "chgrp" dired-do-chgrp)
        ("M" "chmod" dired-do-chmod)
        ("O" "chown" dired-do-chown)
        ("T" "Touch" dired-do-touch)
        ]
       ["Mark"
        ("m" "File at pt" dired-mark :transient t)
        ("E" "By extension" dired-mark-extension :transient t)
        ("t" "Toggle marks" dired-toggle-marks :transient t)
        ("u" "Unmark" dired-unmark :transient t)
        ("U" "Unmark all" dired-unmark-all-marks :transient t)
        ]
       ]
      [
       ["Search/Filter"
        ("A" "Query" dired-do-find-regexp)
        ("Q" "Query-replace" dired-do-find-regexp-and-replace)
        ("{" "Find by name" find-name-dired)
        ("}" "Find by query" find-grep-dired)
        ("/" "Filter" transient/dired-mode/filter)
        ]
       ["View"
        ("(" "Toggle details" dired-hide-details-mode :transient t)
        (")" "Toggle omit" dired-omit-mode :transient t)
        ("i" "Insert subdir" dired-maybe-insert-subdir :transient t)
        ("K" "Kill subdir" transient/dired-mode--dired-kill-and-next-subdir :transient t)
        ("s" "Sort by date" dired-sort-toggle-or-edit :transient t)
        ]
       ["Other"
        ("y" "Show file type" dired-show-file-type :transient t)
        ("g" "Refresh" revert-buffer :transient t)
        ("l" "Redisplay" dired-do-redisplay :transient t)
        ("C-o" "Display other" dired-display-file)
        ("h" "Help" describe-mode)
        ]
       ]
      )
    (define-key dired-mode-map (kbd "C-c C-M-m") #'transient/dired-mode)))
#+end_src

*** edebug-mode transient

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Edebug]] major mode transient.

#+name: edebug-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for edebug-mode
(with-eval-after-load 'edebug
  (transient-define-prefix transient/edebug-mode ()
    "`edebug-mode' commands."
    ["Edebug"
     ["Modes"
      ("SPC" "Step" edebug-step-mode)
      ("n" "Next" edebug-next-mode)
      ("g" "Go" edebug-go-mode)
      ("G" "Go (nonstop)" edebug-Go-nonstop-mode)
      ("t" "Trace" edebug-Trace-fast-mode)
      ("c" "Continue" edebug-continue-mode)
      ("C" "Continue (fast)" edebug-Continue-fast-mode)
      ]
     ["Stepping"
      ("f" "Forward sexp" edebug-forward-sexp)
      ("h" "Continue to here" edebug-goto-here)
      ("I" "Instrument callee" edebug-instrument-callee)
      ("i" "Step in" edebug-step-in)
      ("o" "Step out" edebug-step-out)
      ]
     ["Breakpoints"
      ("b" "Set" edebug-set-breakpoint)
      ("u" "Unset" edebug-unset-breakpoint)
      ("B" "Next" edebug-next-breakpoint)
      ("x" "Set (cond-at-pt)" edebug-set-conditional-breakpoint)
      ("X" "Set (global cond)" edebug-set-global-break-condition)
      ]
     ]
    [
     ["Evaluation"
      ("r" "Previous result" edebug-previous-result)
      ("e" "Sexp" edebug-eval-expression)
      ("C-e" "Last sexp" edebug-eval-last-sexp)
      ("E" "Visit eval list" edebug-visit-eval-list)
      ]
     ["Views"
      ("v" "Outside" edebug-view-outside)
      ("w" "Where" edebug-where)
      ("p" "Bounce point" edebug-bounce-point)
      ("W" "Toggle save windows" edebug-toggle-save-windows)
      ]
     ["Quitting/Stopping"
      ("q" "Top level" top-level)
      ("Q" "Top level (nonstop)" edebug-top-level-nonstop)
      ("a" "Abort recursive edit" abort-recursive-edit)
      ("S" "Stop" edebug-stop)
      ]
     ]
    [
     ["Other"
      ("d" "Backtrace" edebug-pop-to-backtrace)
      ("=" "Frequency count" edebug-temp-display-freq-count)
      ("?" "Help" edebug-help)
      ]
     ]
    )
  (define-key edebug-mode-map (kbd "C-c C-M-m") #'transient/edebug-mode))
#+end_src

*** ess-mode transient

Emacs Speaks Statistics major mode transient.

#+name: ess-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for ess-mode
(with-eval-after-load 'ess-mode
  (defun transient/ess-mode--new-session ()
    "Opens a new ESS session depending the current `ess-dialect'."
    (interactive)
    (cond ((string= ess-dialect "R") (R))
          ((string= ess-dialect "julia") (julia))
          (t (message "Unsupported dialect"))))
  (transient-define-prefix transient/ess-mode ()
    "`ess-mode' commands."
    ["Emacs Speaks Statistics"
     ["Session"
      ("N" "New" transient/ess-mode--new-session)
      ("R" "Request" ess-request-a-process)
      ("s" "Switch" ess-switch-to-ESS)
      ("q" "Quit" ess-quit)
      ]
     ["Eval"
      ("l" "Line" ess-eval-line)
      ("f" "Function" ess-eval-function)
      ("r" "Region" ess-eval-region)
      ("b" "Buffer" ess-eval-buffer)
      ]
     ["Workspace"
      ("D" "Change dir" ess-change-directory)
      ("d" "R dired" ess-rdired)
      ]
     ["Help"
      ("h" "Object" ess-display-help-on-object)
      ("A" "Apropos" ess-display-help-apropos)
      ("H" "Browser" ess-display-help-in-browser)
      ]
     ]
    )
  (define-key ess-mode-map (kbd "C-c C-M-m") #'transient/ess-mode))
#+end_src

*** eww-mode transient

Emacs Web Wowser major mode transient.

#+name: eww-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for eww-mode
(with-eval-after-load 'eww
  (defun transient/eww-mode--toggle-images ()
    "Toggle displaying of images when rendering HTML."
    (interactive)
    (setq-local shr-inhibit-images (not shr-inhibit-images))
    (eww-reload)
    (message "Images are now %s" (if shr-inhibit-images "off" "on")))
  (transient-define-prefix transient/eww-mode ()
    "`eww-mode' commands."
    ["Emacs Web Wowser"
     ["Navigation"
      ("G" "Search" eww)
      ("o" "Open file" eww-open-file)
      ("l" "Back" eww-back-url)
      ("r" "Forward" eww-forward-url)
      ("g" "Reload" eww-reload)
      ("s" "Switchb" eww-switch-to-buffer)
      ("S" "Buffers" eww-list-buffers)
      ("H" "History" eww-list-histories)
      ]
     ["Bookmarks"
      ("b" "Add" eww-add-bookmark)
      ("B" "List" eww-list-bookmarks)
      ]
     ["Toggle"
      ("F" "Fonts" eww-toggle-fonts :transient t)
      ("I" "Images" transient/eww-mode--toggle-images :transient t)
      ("M-C" "Colors" eww-toggle-colors :transient t)
      ("D" "Text direction" eww-toggle-paragraph-direction :transient t)
      ]
     ["Other"
      ("d" "Downlink link" eww-download)
      ("w" "Copy url" eww-copy-page-url)
      ("R" "View readable" eww-readable)
      ("v" "View source" eww-view-source)
      ("C" "Cookies" url-cookie-list)
      ("&" "Open external" eww-browse-with-external-browser)
      ]
     ]
    )
  (define-key eww-mode-map (kbd "C-c C-M-m") #'transient/eww-mode))
#+end_src

*** ibuffer-mode transient

Ibuffer major mode transient.

#+name: ibuffer-mode-transient
#+begin_src emacs-lisp
(transient-define-prefix transient/ibuffer-mode/mark ()
  "`ibuffer-mode' mark commands."
  :transient-suffix 'transient--do-stay
  ["Ibuffer → Mark"
   [("*" "Unmark all" ibuffer-unmark-all)
    ("M" "By mode" ibuffer-mark-by-mode)
    ("m" "Modified" ibuffer-mark-modified-buffers)
    ("u" "Unsaved" ibuffer-mark-unsaved-buffers)
    ]
   [("s" "Special" ibuffer-mark-special-buffers)
    ("r" "Read-only" ibuffer-mark-read-only-buffers)
    ("/" "Dired" ibuffer-mark-dired-buffers)
    ("e" "Disassociated" ibuffer-mark-dissociated-buffers)
    ]
   [("h" "Help" ibuffer-mark-help-buffers)
    ("z" "Compressed" ibuffer-mark-compressed-file-buffers)
    ]
   ]
  )

(transient-define-prefix transient/ibuffer-mode/action ()
  "`ibuffer-mode' action commands."
  ["Ibuffer → Action"
   ["Run"
    ("E" "Eval in buffers" ibuffer-do-eval)
    ("W" "View buffers and eval" ibuffer-do-view-and-eval)
    ("F" "Command on files" ibuffer-do-shell-command-file)
    ("X" "Pipe to command" ibuffer-do-shell-command-pipe)
    ("N" "Pipe to command and replace" ibuffer-do-shell-command-pipe-replace)
    ]
   ["Search"
    ("O" "Occur" ibuffer-do-occur)
    ("U" "Replace regexp" ibuffer-do-replace-regexp)
    ("Q" "Query/Replace" ibuffer-do-query-replace)
    ("I" "Query/Replace regexp" ibuffer-do-query-replace-regexp)
    ]
   ["Properties"
    ("R" "Rename uniquely" ibuffer-do-rename-uniquely)
    ("M" "Toggle modified" ibuffer-do-toggle-modified)
    ("T" "Toggle read-only" ibuffer-do-toggle-read-only)
    ]
   ]
  [
   ["Other"
    ("A" "View" ibuffer-do-view)
    ("H" "View (other)" ibuffer-do-view-other-frame)
    ("V" "Revert" ibuffer-do-revert)
    ("P" "Print" ibuffer-do-print)
    ]
   ]
  )

(transient-define-prefix transient/ibuffer-mode/sort ()
  "`ibuffer-mode' sort commands."
  :transient-suffix 'transient--do-stay
  ["Ibuffer → Sort"
   [("a" "Alphabetic" ibuffer-do-sort-by-alphabetic)
    ("f" "Filename/Process" ibuffer-do-sort-by-filename/process)
    ("m" "Mode" ibuffer-do-sort-by-major-mode)
    ]
   [("s" "Size" ibuffer-do-sort-by-size)
    ("v" "Recency" ibuffer-do-sort-by-recency)
    ("i" "Invert" ibuffer-invert-sorting)
    ]
   ]
  )

(require 'ibuffer-vc)
(transient-define-prefix transient/ibuffer-mode/filter ()
  "`ibuffer-mode' filter commands."
  :transient-suffix 'transient--do-stay
  ["Ibuffer → Filter"
   ["Predicates"
    ("a" "Add saved" ibuffer-add-saved-filters)
    ("c" "By content" ibuffer-filter-by-content)
    ("e" "By predicate" ibuffer-filter-by-predicate)
    ("f" "By filename" ibuffer-filter-by-filename)
    ("m" "By mode" ibuffer-filter-by-used-mode)
    ("M" "By derived mode" ibuffer-filter-by-derived-mode)
    ("n" "By name" ibuffer-filter-by-name)
    (">" "By size gt" ibuffer-filter-by-size-gt)
    ("<" "By size lt" ibuffer-filter-by-size-lt)
    ]
   ["Operators"
    ("&" "AND" ibuffer-and-filter)
    ("|" "OR" ibuffer-or-filter)]
   ["Stack"
    ("p" "Pop" ibuffer-pop-filter)
    ("\\" "Clear" ibuffer-clear-filter-groups)
    ]
   ["Presets"
    ("V" "VC groups" ibuffer-vc-set-filter-groups-by-vc-root)
    ("R" "Saved" ibuffer-switch-to-saved-filter-groups)
    ("/" "Disable" ibuffer-filter-disable)
    ]
   ]
  )

(defun transient/ibuffer-mode--activate-dwim ()
  "Toggle filter group or visit buffer under point in `ibuffer-mode'."
  (interactive)
  (condition-case nil
             (ibuffer-toggle-filter-group)
           (error (ibuffer-visit-buffer))))

;; major-mode specific transient for ibuffer-mode
(transient-define-prefix transient/ibuffer-mode ()
  "`ibuffer-mode' commands."
  :transient-suffix 'transient--do-stay
  ["Ibuffer"
   ["Navigation"
    ("n" "Next line" ibuffer-forward-line)
    ("p" "Previous line" ibuffer-backward-line)
    ("RET" "Open" transient/ibuffer-mode--activate-dwim :transient nil)
    ("o" "Open (other)" ibuffer-visit-buffer-other-window :transient nil)
    ]
   ["Actions"
    ("m" "Mark" ibuffer-mark-forward)
    ("u" "Unmark" ibuffer-unmark-forward)
    ("*" "→ Mark" transient/ibuffer-mode/mark)
    ("S" "Save" ibuffer-do-save)
    ("D" "Delete" ibuffer-do-delete)
    ("a" "→ Action" transient/ibuffer-mode/action)
    ]
   ["View"
    ("`" "Switch format" ibuffer-switch-format)
    ("g" "Refresh" ibuffer-update)
    ("s" "→ Sort" transient/ibuffer-mode/sort)
    ("/" "→ Filter" transient/ibuffer-mode/filter)
    ]
   ]
  )
(define-key ibuffer-mode-map (kbd "C-c C-M-m") #'transient/ibuffer-mode)
#+end_src

*** markdown-mode transient

Markdown major mode transient.

#+name: markdown-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for markdown-mode
(with-eval-after-load 'markdown-mode
  (with-eval-after-load 'markdown-toc
    (transient-define-prefix transient/markdown-mode ()
      "`markdown-mode' commands."
      :transient-suffix 'transient--do-stay
      ["Markdown mode"
       ["Navigate"
        ("n" "Next" markdown-outline-next)
        ("p" "Previous" markdown-outline-previous)
        ("f" "Next (same level)" markdown-outline-next-same-level)
        ("b" "Previous (same level)" markdown-outline-previous-same-level)
        ]
       ["Move outline"
        ("<left>" "Promote" markdown-promote)
        ("<right>" "Demote" markdown-demote)
        ("<up>" "Move up" markdown-move-up)
        ("<down>" "Move down" markdown-move-down)
        ]
       ["Shift region"
        ("<" "Outdent" markdown-outdent-region)
        (">" "Indent" markdown-indent-region)
        ]
       ]
      [
       ["User interface"
        ("E" "Toggle math" markdown-toggle-math)
        ("F" "Toggle code font" markdown-toggle-fontify-code-blocks-natively)
        ("I" "Toggle images" markdown-toggle-inline-images)
        ("L" "Toggle show URL" markdown-toggle-url-hiding)
        ("M" "Toggle show markup" markdown-toggle-markup-hiding)
        ]
       ["Table of contents"
        ("t" "Insert/Refresh" markdown-toc-generate-or-refresh-toc :transient nil)
        ("C-t" "Delete" markdown-toc-delete-toc)
        ]
       ["Other"
        ("d" "Do" markdown-do :transient nil)
        ("o" "Follow" markdown-follow-thing-at-point :transient nil)
        ("'" "Edit code block" markdown-edit-code-block :transient nil)
        ]
       ]
      )
    (define-key gfm-mode-map (kbd "C-c C-M-m") #'transient/markdown-mode)
    (define-key markdown-mode-map (kbd "C-c C-M-m") #'transient/markdown-mode)))
#+end_src

*** neuron-mode transient

Neuron major mode transient.

#+name: neuron-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for neuron-mode
(with-eval-after-load 'neuron-mode
  (transient-define-prefix transient/neuron-mode ()
    "`neuron-mode' commands."
    ["Neuron mode"
     ["File"
      ("o" "Follow at point" neuron-follow-thing-at-point)
      ("u" "Edit uplink" neuron-edit-uplink)
      ("r" "Open current" neuron-open-current-zettel)
      ]
     ["Tags"
      ("t" "Add" neuron-add-tag)
      ("T" "Add (multiple)" neuron-add-tags)
      ]
     ["Insert"
      ("l" "Zettel link" neuron-create-and-insert-zettel-link)
      ("L" "Zettel link from region" neuron-create-zettel-from-selected-title)
      ("s" "Static link" neuron-insert-static-link)
      ]
     ]
    [
     ["Other"
      ("c" "Toggle link conn type" neuron-toggle-connection-type :transient nil)
      ("m" "Markdown major mode transient" transient/markdown-mode)
      ]
     ]
    )
  (define-key neuron-mode-map (kbd "C-c C-M-m") #'transient/neuron-mode))
#+end_src

*** org-agenda-mode transient

Org-agenda major mode transient.

#+name: org-agenda-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for org-agenda-mode
(with-eval-after-load 'org-agenda
  (defun transient/org-agenda-mode--hide-done ()
    "Hide items with DONE state in `org-agenda-mode' buffer."
    (interactive)
    (setq org-agenda-skip-scheduled-if-done
          (not org-agenda-skip-scheduled-if-done))
    (org-agenda-redo-all t))

  (transient-define-prefix transient/org-agenda-mode ()
    "`org-agenda-mode' commands."
    :transient-suffix 'transient--do-stay
    ["Org agenda"
     ["Agenda view"
      ("d" "Day" org-agenda-day-view)
      ("w" "Week" org-agenda-week-view)
      ("f" "Later" org-agenda-later)
      ("b" "Earlier" org-agenda-earlier)
      ]
     ["Navigate"
      ("n" "Next line" org-agenda-next-line)
      ("p" "Prev line" org-agenda-previous-line)
      ("N" "Next item" org-agenda-next-item)
      ("P" "Prev item" org-agenda-previous-item)
      ]
     ["Visit"
      ("SPC" "Show" org-agenda-show-and-scroll-up :transient nil)
      ("TAB" "Goto" org-agenda-goto :transient nil)
      ("RET" "Switch to" org-agenda-switch-to :transient nil)
      ("C-c C-o" "Link" org-agenda-open-link :transient nil)
      ]
     ["Other"
      ("r" "Redisplay" org-agenda-redo)
      ("j" "Goto date" org-agenda-goto-date)
      ("." "Goto today" org-agenda-goto-today)
      ("(" (lambda ()
             (transient--make-description
              "Hide DONE"
              org-agenda-skip-scheduled-if-done))
       transient/org-agenda-mode--hide-done)
      ]
     ]
    [
     ["Filter"
      ("<" "By category" org-agenda-filter-by-category)
      ("_" "By effort" org-agenda-filter-by-effort)
      ("=" "By regexp" org-agenda-filter-by-regexp)
      ("\\" "By tag" org-agenda-filter-by-tag)
      ("^" "By top headline" org-agenda-filter-by-top-headline)
      ("|" "Remove all" org-agenda-filter-remove-all)
      ]
     ["Clock"
      ("I" "In" org-agenda-clock-in)
      ("O" "Out" org-agenda-clock-out)
      ("X" "Cancel" org-agenda-clock-cancel)
      ("J" "Current task" org-agenda-clock-goto)
      ("R" (lambda ()
             (transient--make-description
              "Clocktable"
              org-agenda-clockreport-mode))
       org-agenda-clockreport-mode)
      ]
     ["Modify"
      ("t" "Status" org-agenda-todo)
      (":" "Tags" org-agenda-set-tags)
      ("," "Priority" org-agenda-priority)
      ("z" "Add note" org-agenda-add-note)
      ("C-c C-x p" "Property" org-agenda-set-property)
      ]
     ]
    [
     ["Date"
      (">" "Prompt" org-agenda-date-prompt)
      ("C-c C-s" "Schedule" org-agenda-schedule)
      ("C-c C-d" "Deadline" org-agenda-deadline)
      ]
     ["Node ops"
      ("$" "Archive" org-agenda-archive)
      ("C-c C-w" "Refile" org-agenda-refile)
      ("C-k" "Kill" org-agenda-kill)
      ]
     ]
    )

  (define-key org-agenda-mode-map (kbd "C-c C-M-m") #'transient/org-agenda-mode))
#+end_src

*** org-mode transient

Org major mode transient.

#+name: org-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for org-mode
(with-eval-after-load 'org
  (with-eval-after-load 'org-download
   (with-eval-after-load 'org-present
     (defun transient/org-mode--toggle-display-image-width ()
       "Toggle resizing of inline images in `org-mode' to one-third screen width."
       (interactive)
       (if org-image-actual-width
           (setq org-image-actual-width nil)
         (setq org-image-actual-width (list (/ (display-pixel-width) 3))))
       (org-redisplay-inline-images))

     (defun transient/org-mode--next-heading-dwim (n)
       "Go to N-th next occur highlight or visible heading otherwise."
       (interactive "p")
       (if org-occur-highlights
           (next-error n)
         (org-next-visible-heading n)))

     (defun transient/org-mode--previous-heading-dwim (n)
       "Go to N-th previous occur highlight or visible heading otherwise."
       (interactive "p")
       (if org-occur-highlights
           (previous-error n)
         (org-previous-visible-heading n)))

     (defun transient/org-mode--toggle-present-mode ()
       "Enter or exit `org-present' presentation."
       (interactive)
       (let ((in-present-mode (condition-case nil
                                  org-present-mode
                                (error nil))))
         (if in-present-mode (org-present-quit) (org-present))))

     (transient-define-prefix transient/org-mode ()
       "`org-mode' commands."
       ["Org"
        ["Toggle"
         ("i" (lambda ()
                (transient--make-description
                 "Images"
                 org-inline-image-overlays))
          org-toggle-inline-images :transient t)
         ("I" (lambda ()
                (transient--make-description
                 "Indent"
                 org-indent-mode))
          org-indent-mode :transient t)
         ("P" (lambda ()
                (transient--make-description
                 "Prettify entities"
                 org-pretty-entities))
          org-toggle-pretty-entities :transient t)
         ("M-l" (lambda ()
                  (transient--make-description
                   "Link display"
                   (not org-link-descriptive)))
          org-toggle-link-display :transient t)
         ("M-i" (lambda ()
                  (transient--make-description
                   "Image resize"
                   org-image-actual-width))
          transient/org-mode--toggle-display-image-width :transient t)
         ]
        ["Search"
         ("g" "Goto" org-goto)
         ("o" "Occur" org-occur :transient t)
         ("/" "Create sparse tree" org-sparse-tree :transient t)
         ("c" "Clear search results" org-remove-occur-highlights :transient t)
         ("n" "Next (sparse) node" transient/org-mode--next-heading-dwim :transient t)
         ("p" "Previous (sparse) node" transient/org-mode--previous-heading-dwim :transient t)
         ]
        ["Modify"
         ("t" "Todo state" org-todo)
         (":" "Tags" org-set-tags-command)
         ("," "Priority" org-priority)
         ("D" "Insert drawer" org-insert-drawer)
         ("P" "Set property" org-set-property)
         ("N" "Add note" org-add-note)
         ]
        ]
       [
        ["Node ops"
         ("a" "Archive" org-archive-subtree-default)
         ("r" "Refile" org-refile)
         ("s" "Sort" org-sort)
         ]
        ["Text ops"
         ("F" "Add footnote" org-footnote-action)
         ("<" "Insert structure" org-insert-structure-template)
         ("'" "Edit special" org-edit-special)
         ("e" "Emphasize" org-emphasize)
         ]
        [:description (lambda ()
                        (transient--make-description
                         "Narrow"
                         (buffer-narrowed-p)))
         ("M-s" "Subtree" org-narrow-to-subtree)
         ("M-b" "Block" org-narrow-to-block)
         ("M-w" "Widen" widen)
         ]
        ["Other"
         ("<tab>" "Cycle node" org-cycle :transient t)
         ("<S-tab>" "Cycle global" org-global-cycle :transient t)
         ("C-p" "Present mode" transient/org-mode--toggle-present-mode)
         ("ds" "Download screenshot" org-download-screenshot)
         ("dy" "Download yank" org-download-yank)
         ]
        ]
       )
     (define-key org-mode-map (kbd "C-c C-M-m") #'transient/org-mode))))
#+end_src

*** org-msg-edit-mode transient

OrgMsg message compose major mode transient. This major mode is in
effect when editing message buffers with ~org-msg-mode~ enabled.

#+name: org-msg-edit-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for org-msg-edit-mode
(with-eval-after-load 'org-msg
  (transient-define-prefix transient/org-msg-edit-mode ()
    "`org-msg-edit-mode' commands."
    ["OrgMsg"
     ["Jump to"
      ("f" "From" message-goto-from)
      ("t" "To" message-goto-to)
      ("c" "Cc" message-goto-cc)
      ("B" "Bcc" message-goto-bcc)
      ("F" "Fcc" message-goto-fcc)
      ("S" "Subject" message-goto-subject)
      ("b" "Body" org-msg-goto-body)
      ]
     ["Action"
      ("C-a" "Manage attachments" org-msg-attach)
      ("C-e" "Preview" org-msg-preview)
      ("C-c" "Send" org-ctrl-c-ctrl-c)
      ("C-k" "Kill" org-msg-edit-kill-buffer)
      ]
     ]
    )
  (define-key org-msg-edit-mode-map (kbd "C-c C-M-m") #'transient/org-msg-edit-mode))
#+end_src

*** python-mode transient

Python major mode transient.

#+name: python-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for python-mode
(with-eval-after-load 'python
  (with-eval-after-load 'live-py-mode
    ;; technically also depends on reformatter but more correctly
    ;; using it to define `python-black-format-buffer-or-region' and
    ;; `python-black-format-on-save-mode'
    (transient-define-prefix transient/python-mode ()
      "`python-mode' commands."
      ["Python"
       ["REPL"
        ("p" "Start" run-python)
        ("s" "Send string" python-shell-send-string)
        ("x" "Send defun" python-shell-send-defun)
        ("r" "Send region" python-shell-send-region)
        ("c" "Send buffer" python-shell-send-buffer)
        ("l" "Send file" python-shell-send-file)
        ("z" "Switch to" python-shell-switch-to-shell)
        ]
       ["Formatting"
        ("TAB" "Fill paragraph" python-fill-paragraph :transient t)
        ("<" "Indent left" python-indent-shift-left :transient t)
        (">" "Indent right" python-indent-shift-right :transient t)
        ("y" "Region or buffer" python-black-format-buffer-or-region :transient t)
        ("Y" "On save" python-black-format-on-save-mode)
        ]
       ["Other"
        ("j" "Imenu" imenu)
        ("v" "Check error" python-check)
        ("f" "Symbol quick help" python-eldoc-at-point)
        ("d" "Symbol describe" python-describe-at-point)
        ("D" "Python debugger" pdb)
        ("L" "Live coding mode" live-py-mode)
        ]
       ]
      )
    (define-key python-mode-map (kbd "C-c C-M-m") #'transient/python-mode)))
#+end_src

*** racket-mode transient

Major mode-specific hydra for ~racket-mode~.

#+name: racket-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for racket-mode
(with-eval-after-load 'racket-mode
  (transient-define-prefix transient/racket-mode ()
    "`racket-mode' commands."
    ["Racket"
     ["Run"
      ("rr" "Buffer in REPL" racket-run)
      ("rm" "Module in REPL" racket-run-module-at-point)
      ("rR" "File in shell" racket-racket)
      ]
     ["Profiling/Logging"
      ("rp" "Profiler" racket-profile)
      ("rl" "Logger" racket-logger)
      ]
     ["Refactoring"
      ("Rb" "Base requires" racket-base-requires)
      ("Rt" "Tidy requires" racket-tidy-requires)
      ("RT" "Trim requires" racket-trim-requires)
      ]
     ["Editing"
      ("a" "Align" racket-align)
      ("u" "Unalign" racket-unalign)
      ]
     ]
    [
     ["Testing"
      ("tt" "Run tests in REPL" racket-test)
      ("tr" "Raco test" racket-raco-test)
      ]
     ["Help"
      ("." "Visit definition" racket-xp-visit-definition)
      ("C-." "Visit module" racket-visit-module)
      ("," "Unvisit" racket-unvisit)
      ("h" "Describe" racket-xp-describe)
      ("H" "Documentation" racket-xp-documentation)
      ]
     ["Other"
      ("S" "Recompile racket-mode" racket-mode-start-faster)
      ("f" "Find collection" racket-find-collection)
      ("x" "Explain/Explore mode" racket-xp-mode)
      ]
     ]
    )
  (define-key racket-mode-map (kbd "C-c C-M-m") #'transient/racket-mode))
#+end_src

*** restclient-mode transient

REST client major mode transient.

#+name: restclient-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for restclient-mode
(with-eval-after-load 'restclient
  (defun transient/restclient-mode--toggle-narrow ()
    "Toggle narrowing to the current query in a `restclient-mode' buffer."
    (interactive)
    (if (buffer-narrowed-p)
        (widen)
      (restclient-narrow-to-current)))
  (defun transient/restclient-mode--format-json-region ()
    "Format a selected region containing JSON code."
    (interactive)
    (require 'json-mode nil t)
    (if (fboundp 'json-mode-pretty-print-dwim)
        (call-interactively 'json-mode-pretty-print-dwim)
      (message "Requires the `json-mode' package be installed.")))
  (transient-define-prefix transient/restclient-mode ()
    "`restclient-mode' commands."
    :transient-suffix 'transient--do-stay
    ["REST client"
     ["Send query"
      ("v" "And stay" restclient-http-send-current-stay-in-window)
      ("c" "And switch" restclient-http-send-current :transient nil)
      ("r" "And switch (raw results)" restclient-http-send-current-raw
       :transient nil)
      ]
     ["Movement"
      ("n" "Next query" restclient-jump-next)
      ("p" "Previous query" restclient-jump-prev)
      ("." "Mark current" restclient-mark-current)
      ]
     ["Other"
      ("u" "Copy as CURL command" restclient-copy-curl-command)
      ("N" "Narrow/Widen buffer" transient/restclient-mode--toggle-narrow)
      ("f" "Format JSON region" transient/restclient-mode--format-json-region
       :transient nil)
      ]
     ]
    )
  (define-key restclient-mode-map (kbd "C-c C-M-m") #'transient/restclient-mode)
  )
#+end_src

*** smerge-mode transient

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/vc/smerge-mode.el][Smerge]] is a lightweight alternative to Ediff, and is the default merge
tool called by [[Magit][Magit]] to resolve merge conflicts.

This is a transient for the ~smerge-mode~ major mode that is adapted
from [[https://github.com/alphapapa/unpackaged.el#hydra][here]].

#+name: smerge-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for smerge-mode
(with-eval-after-load 'smerge-mode
  (transient-define-prefix transient/smerge-mode ()
    "`smerge-mode' commands."
    ;; have suffixes not exit the transient by default
    :transient-suffix 'transient--do-stay
    ["Smerge"
     ["Move"
      ("n" "Next" smerge-next)
      ("p" "Previous" smerge-prev)]
     [
      "Keep"
      ("b" "Base" smerge-keep-base)
      ("u" "Upper" smerge-keep-upper)
      ("l" "Lower" smerge-keep-lower)
      ("a" "All" smerge-keep-all)
      ("RET" "Current" smerge-keep-current)
      ]
     ["Diff"
      ("<" "Upper/Base" smerge-diff-base-upper)
      ("=" "Upper/Lower" smerge-diff-upper-lower)
      (">" "Base/Lower" smerge-diff-base-lower)
      ("R" "Refine" smerge-refine)
      ("E" "Ediff" smerge-ediff)
      ]
     [
      "Other"
      ("C" "Combine" smerge-combine-with-next)
      ("r" "Resolve" smerge-resolve)
      ("k" "Kill current" smerge-kill-current)
      ;; emulate Vim's "ZZ" command to save and close current file
      ("ZZ" "Save and bury buffer" my-save-and-bury-buffer
       :transient nil)
      ]
     ]
    )
  (define-key smerge-mode-map (kbd "C-c C-M-m") #'transient/smerge-mode))
#+end_src

*** term-mode transient

Term major mode transient.

This is mainly to toggling between ~term-char-mode~ (which is similar
to a regular terminal emulator) and ~term-line-mode~ (which is similar
to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Shell-Mode.html#Shell-Mode][Shell mode]]) when in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Terminal-emulator.html][term-mode]].

#+name: term-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for term-mode
(with-eval-after-load 'term
  (defun transient/term-mode--toggle-char-mode-line-mode ()
    "Toggle between `term-char-mode' and `term-line-mode' in `term-mode'."
    (interactive)
    (if (term-in-line-mode)
        (progn (term-char-mode) (message "line → char"))
      (progn (term-line-mode) (message "char → line"))))
  (transient-define-prefix transient/term-mode ()
    "`term-mode' commands."
    ["Term"
     ("m" "Toggle between `term-char-mode' and `term-line-mode'"
      transient/term-mode--toggle-char-mode-line-mode :transient t)
     ]
    )
  (define-key term-mode-map (kbd "C-c C-M-m") #'transient/term-mode)
  (define-key term-raw-map (kbd "C-c C-M-m") #'transient/term-mode))
#+end_src

*** ztreedir-mode transient

Ztree directory major mode transient.

#+name: ztreedir-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for ztreedir-mode
(with-eval-after-load 'ztree-dir
  (transient-define-prefix transient/ztreedir-mode ()
    "`ztreedir-mode' commands."
    :transient-suffix 'transient--do-stay
    ["Ztree directory"
     ["Movement"
      ("n" "Next" ztree-next-line)
      ("p" "Previous" ztree-previous-line)
      ("DEL" "Up directory" ztree-move-up-in-tree)
      ]
     ["Actions"
      ("RET" "Hard action" ztree-perform-action :transient nil)
      ("SPC" "Soft action" ztree-perform-soft-action :transient nil)
      ("x" "Expand subtree" ztree-toggle-expand-subtree)
      ("d" "Dired at point" ztree-dir-open-dired-at-point :transient nil)
      ]
     ["View"
      ("g" "Refresh" ztree-refresh-buffer)
      ("H" "Toggle show filtered files" ztree-dir-toggle-show-filtered-files)
      (">" "Narrow tree" ztree-dir-narrow-to-dir)
      ("<" "Widen tree" ztree-dir-widen-to-parent)
      ]
     ]
    )
  (define-key ztreedir-mode-map (kbd "C-c C-M-m") #'transient/ztreedir-mode))
#+end_src

*** ztreediff-mode transient

Ztree difference major mode transient.

#+name: ztreediff-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for ztreediff-mode
(with-eval-after-load 'ztree-diff
  (transient-define-prefix transient/ztreediff-mode ()
    "`ztreediff-mode' commands."
    :transient-suffix 'transient--do-stay
    ["Ztree difference"
     ["Movement"
      ("n" "Next" ztree-next-line)
      ("p" "Previous" ztree-previous-line)
      ("TAB" "Jump side" ztree-jump-side)
      ("DEL" "Up directory" ztree-move-up-in-tree)
      ]
     ["Actions"
      ("RET" "Hard action" ztree-perform-action :transient nil)
      ("SPC" "Soft action" ztree-perform-soft-action :transient nil)
      ("x" "Expand subtree" ztree-toggle-expand-subtree)
      ("d" "Diff files" ztree-diff-simple-diff-files :transient nil)
      ("v" "View file" ztree-diff-view-file)
      ("C" "Copy" ztree-diff-copy)
      ("D" "Delete" ztree-diff-delete-file)
      ]
     ["View"
      ("g" "Refresh" ztree-refresh-buffer)
      ("r" "Rescan (partial)" ztree-diff-partial-rescan)
      ("R" "Rescan (full)" ztree-diff-full-rescan)
      ("h" "Toggle show equal files" ztree-diff-toggle-show-equal-files)
      ("H" "Toggle show filtered files" ztree-diff-toggle-show-filtered-files)
      ]
     ]
    )
  (define-key ztreediff-mode-map (kbd "C-c C-M-m") #'transient/ztreediff-mode))
#+end_src

** Minor mode transients

Minor mode transients are bound to a binding /other/ than ~C-c C-M-m~
(which is reserved for major mode transients) and are active when
their corresponding minor mode is active.

*** flycheck-mode transient

Flycheck minor mode transient.

#+name: flycheck-mode-transient
#+begin_src emacs-lisp
;; add transient for Flycheck, bind to "C-c C-M-!"
(with-eval-after-load 'flycheck
  (defun transient/flycheck-mode--close-error-list ()
    "Close the Flycheck error list window if it is shown."
    (interactive)
    (quit-windows-on "*Flycheck errors*" t))
  (transient-define-prefix transient/flycheck-mode ()
    "Flycheck minor mode `flycheck-mode' commands."
    :transient-suffix 'transient--do-stay
    ["Flycheck"
     ["Error"
      ("n" "Next" flycheck-next-error)
      ("p" "Previous" flycheck-previous-error)
      ("l" "List open" flycheck-list-errors)
      ("L" "List close" transient/flycheck-mode--close-error-list)
      ("H" "Local help at point" display-local-help)
      ("h" "Display at point" flycheck-display-error-at-point)
      ("e" "Explain at point" flycheck-explain-error-at-point)
      ("C-w" "Copy all" flycheck-copy-errors-as-kill)
      ("C" "Clear all" flycheck-clear)
      ]
     ["Checker"
      ("s" "Select" flycheck-select-checker)
      ("?" "Describe" flycheck-describe-checker :transient nil)
      ("c" "Run" flycheck-buffer)
      ("C-c" "Run via `compile'" flycheck-compile)
      ]
     ["Other"
      ("v" "Verify setup" flycheck-verify-setup :transient nil)
      ("i" "Online manual" flycheck-manual :transient nil)
      ]
     ]
    )
  (define-key flycheck-mode-map (kbd "C-c C-M-!") #'transient/flycheck-mode)
  )
#+end_src

*** lsp-mode transient

LSP minor mode transient.

#+name: lsp-mode-transient
#+begin_src emacs-lisp
;; add transient for lsp-mode, bind to "C-c C-M-l"
(with-eval-after-load 'lsp-mode
  (with-eval-after-load 'dap-mode
    (with-eval-after-load 'avy
      (defun transient/lsp-mode--install-server ()
        "Install or reinstall `lsp-mode' server."
        (interactive)
        (lsp-install-server t))
      (transient-define-prefix transient/lsp-mode ()
        "`lsp-mode' session commands."
        ["Language server"
         ["Session"
          ("ss" "Start" lsp)
          ("sr" "Restart" lsp-workspace-restart)
          ("sq" "Shutdown" lsp-workspace-shutdown)
          ("sd" "Describe" lsp-describe-session)
          ("sD" "Disconnect" lsp-disconnect)
          ]
         ["Toggle"
          ("Tl" (lambda ()
                  (transient--make-description
                   "Lens mode"
                   lsp-lens-mode))
           lsp-lens-mode :transient t)
          ("TL" (lambda ()
                  (transient--make-description
                   "Trace I/O"
                   lsp-print-io))
           lsp-toggle-trace-io :transient t)
          ("Th" (lambda ()
                  (transient--make-description
                   "Symbol highlight"
                   lsp-enable-symbol-highlighting))
           lsp-toggle-symbol-highlight :transient t)
          ("Tb" (lambda ()
                  (transient--make-description
                   "Header breadcrumb"
                   lsp-headerline-breadcrumb-mode))
           lsp-headerline-breadcrumb-mode :transient t)
          ("Ta" (lambda ()
                  (transient--make-description
                   "Modeline code actions"
                   lsp-modeline-code-actions-mode))
           lsp-modeline-code-actions-mode :transient t)
          ("TD" (lambda ()
                  (transient--make-description
                   "Modeline diagnostics"
                   lsp-modeline-diagnostics-mode))
           lsp-modeline-diagnostics-mode :transient t)
          ("Ts" (lambda ()
                  (transient--make-description
                   "Signature auto-activate"
                   lsp-signature-auto-activate))
           lsp-toggle-signature-auto-activate :transient t)
          ("Tf" (lambda ()
                  (transient--make-description
                   "On type formatting"
                   lsp-enable-on-type-formatting))
           lsp-toggle-on-type-formatting :transient t)
          ("TT" (lambda ()
                  (transient--make-description
                   "Treemacs sync"
                   lsp-treemacs-sync-mode))
           lsp-treemacs-sync-mode :transient t)
          ]
         ["Goto"
          ("gg" "Definition" lsp-find-definition)
          ("gr" "References" lsp-find-references)
          ("gi" "Implementation" lsp-find-implementation)
          ("gt" "Type definition" lsp-find-type-definition)
          ("gd" "Declaration" lsp-find-declaration)
          ("gh" "Call hierarchy" lsp-treemacs-call-hierarchy)
          ("ga" "Apropos" xref-find-apropos)
          ("ge" "Errors list" lsp-treemacs-errors-list)
          ]
         ]
        [
         ["Folders"
          ("Fa" "Add" lsp-workspace-folders-add)
          ("Fr" "Remove" lsp-workspace-folders-remove)
          ("Fb" "Blacklist remove" lsp-workspace-blacklist-remove)
          ]
         ["Actions"
          ("aa" "Execute code action" lsp-execute-code-action)
          ("al" "Click lens with Avy" lsp-avy-lens)
          ("ah" "Highlight relevant" lsp-document-highlight)
          ]
         ["Other"
          ("I" "Install server" transient/lsp-mode--install-server)
          ("dd" "DAP debug" dap-debug)
          ("de" "DAP edit template" dap-debug-edit-template)
          ]
         ]
        [
         ["Refactoring"
          ("rr" "Rename" lsp-rename)
          ("ro" "Organize imports" lsp-organize-imports)
          ]
         ["Format"
          ("==" "Buffer" lsp-format-buffer)
          ("=r" "Region" lsp-format-region)
          ]
         ["Help"
          ("hh" "Describe" lsp-describe-thing-at-point)
          ("hs" "Signature" lsp-signature-activate)
          ]
         ]
        )
      (define-key lsp-mode-map (kbd "C-c C-M-l") #'transient/lsp-mode))))
#+end_src

* Back matter

** Footer

#+name: generate-footer
#+begin_src emacs-lisp
(concat "(provide '" feature ")\n"
        ";;; " feature ".el ends here")
#+end_src

* Tangled files

** early-init.el

In Emacs 27+, this is loaded before ~package.el~ and UI rendering.
Static UI customizations should go here to optimize startup time.

#+name: early-init.el
#+begin_src emacs-lisp :noweb no-export :tangle emacs/.emacs.d/early-init.el
<<generate-header(feature="early-init", summary="Emacs early init file")>>

<<author-info>>
<<generate-timestamp()>>

;;; Commentary:

<<file-commentary-early-init>>

;;; Code:

;; Optimizations

<<startup-optimizations>>

<<io-optimizations>>

;; Package management

<<load-prefer-newer>>

<<add-dirs-to-load-path>>

;; Visual user interface components

<<cursor>>

<<remove-decorations>>

<<load-custom-theme>>

<<set-display-face-fonts>>

<<generate-footer(feature="early-init")>>
#+end_src

** init.el

The main configuration file.

#+name: init.el
#+begin_src emacs-lisp :noweb no-export :tangle emacs/.emacs.d/init.el
<<generate-header(feature="init", summary="Emacs init file")>>

<<author-info>>
<<generate-timestamp()>>

;;; Commentary:

<<file-commentary-init>>

;;; Code:

;; Backward compatibility

<<early-init-pre-27>>

;; Customize file

<<custom-file>>

;; Package management

<<elpa-repositories>>

<<package-init>>

<<use-package>>

;; Environment variables

<<environment-variables>>

;; Backend and frontend frameworks for building user interfaces

<<flex-minibuffer-completion-style>>

<<helm>>

<<helm-icons>>

<<hydra>>

<<company>>

<<edit-indirect>>

<<alert>>

;; Custom variables and utility functions / Custom variables

<<my-system-open-command>>

;; Custom variables and utility functions / Utility functions

<<my-after-jump-context-actions>>

<<my-pulse-line>>

<<my-save-and-bury-buffer>>

;; Visual (part 1)

<<all-the-icons>>

<<doom-modeline>>

<<minions>>

;; Backups

<<backup-files-directory>>

;; Bookmarks and history

<<recentf>>

<<helm-recentf>>

<<saveplace>>

<<savehist>>

;; Buffers, windows, frames, workspaces / Buffer management

<<protect-buffers>>

<<ibuffer>>

<<ibuffer-filter-groups>>

<<ibuffer-vc>>

<<all-the-icons-ibuffer>>

<<nswbuff>>

;; Buffers, windows, frames, workspaces / Window management

<<winner-mode>>

<<popwin>>

<<ace-window>>

<<my-rotate-window-buffers>>

;; Buffers, windows, frames, workspaces / Frame management

<<transpose-frame>>

;; Buffers, windows, frames, workspaces / Workspace management

<<desktop>>

;; Command-line interaction

<<eshell>>

<<eshell-visual-commands>>

<<eshell-disable-git-pager>>

<<eshell-named-buffers>>

<<esh-autosuggest>>

<<helm-eshell-completion>>

<<helm-fish-completion>>

<<eshell-z>>

<<comint-prompt-read-only>>

<<kill-term-buffers-with-q-after-end>>

<<vterm>>

<<vterm-switchb>>

<<tmux-send>>

;; Comparison tools

<<ediff>>

<<ediff-copy-a-and-b-to-c>>

<<ztree>>

;; DevOps

<<docker>>

;; Dired

<<dired>>

<<dired-open-file-at-pt>>

<<recentf-track-dired-buffers>>

<<dired-filter>>

<<all-the-icons-dired>>

;; Editing text

<<indent-with-soft-tabs>>

<<completing-yank>>

<<delsel>>

<<sentence-end-single-space>>

<<epa-file>>

<<which-key>>

<<expand-region>>

<<iedit>>

<<symbol-overlay>>

<<multiple-cursors>>

<<yasnippet>>

<<paredit>>

<<undo-tree>>

<<zap-up-to-char>>

<<cycle-spacing>>

<<my-join-next-line>>

<<my-open-line-below-and-above>>

<<elmacro>>

;; Emacs as an edit server

<<sigusr1-restart-emacs-server>>

;; Email

<<notmuch>>

<<notmuch-shorten-multiple-author-names>>

<<notmuch-toggle-search-tags-in-results>>

<<org-msg>>

<<ol-notmuch>>

;; Non-programming files

<<doc-view-enhanced-menus>>

<<csv-mode>>

<<dockerfile-mode>>

<<nov>>

<<json-mode>>

<<markdown-mode>>

<<markdown-toc>>

<<yaml-mode>>

<<neuron-mode>>

;; Org-mode

<<org>>

<<my-org-open-line-below>>

<<org-todo-keywords>>

<<org-capture-templates>>

<<org-maximize-capture-buffers>>

<<org-tags>>

<<org-export-global-macros>>

<<org-agenda>>

<<org-refile>>

<<org-visual-line-mode>>

<<org-latex-pdf-process>>

<<org-preview-latex-process>>

<<org-preview-and-scale-latex-fragments>>

<<org-graphical-customizations>>

<<org-cliplink>>

<<org-download>>

<<org-journal>>

<<org-present>>

<<ox-md>>

<<org-superstar>>

<<org-noter>>

<<org-super-agenda>>

<<org-protocol>>

<<org-capture-websnippet>>

<<org-wild-notifier>>

;; Programming / Buffer reformatter macro

<<reformatter>>

;; Programming / Flycheck syntax checker

<<flycheck>>

;; Programming / DevSkim and Flycheck

<<flycheck-devskim>>

;; Programming / Conda package and environment manager

<<conda>>

;; Programming / lsp-mode Language Server Protocol client

<<lsp-mode>>

<<company-lsp>>

;; Programming / dap-mode Debug Adaptor Protocol client

<<dap-mode>>

;; Programming / Emacs Lisp

<<el-patch>>

<<modify-lisp-indent-function>>

;; Programming / Clojure

<<clojure-mode>>

<<cider>>

<<flycheck-clj-kondo>>

;; Programming / fish shell scripts

<<fish-mode>>

;; Programming / Python

<<python-shell-interpreter>>

<<python-mode-syntax-table>>

<<python-black-format>>

<<live-py-mode>>

<<lsp-pyright>>

<<dap-python>>

;; Programming / R

<<ess>>

<<ess-pipe-operators>>

<<poly-R>>

;; Programming / Racket

<<racket-mode>>

;; Project interaction

<<projectile>>

<<org-projectile>>

<<magit>>

<<magit-ibuffer-integration>>

<<git-timemachine>>

<<browse-at-remote>>

<<treemacs>>

<<treemacs-projectile>>

<<treemacs-magit>>

<<treemacs-all-the-icons>>

;; Search

<<wgrep>>

<<ripgrep>>

<<anzu>>

<<dumb-jump>>

<<avy>>

<<ace-link>>

<<notdeft>>

<<imenu-auto-rescan>>

<<imenu-anywhere>>

<<imenu-list>>

;; Visual (part 2)

<<darkroom>>

<<prism>>

<<display-line-numbers-when-editing-code>>

<<show-column-number>>

<<show-matching-parentheses>>

<<volatile-highlights>>

<<add-frame-internal-border>>

<<add-bottom-window-dividers>>

<<censor>>

<<highlight-indent-guides>>

<<advise-select-window-after-pulse-line>>

<<too-long-lines-mode>>

<<hl-todo>>

;; Web

<<eww>>

<<restclient>>

<<network-security>>

<<http-requests-privacy>>

<<org-readitlater>>

<<org-capture-readitlater>>

;; Writing

<<dictionary>>

<<synosaurus>>

<<langtool>>

<<typo>>

;; Other

<<real-auto-save>>

<<mouse-settings>>

<<scratch-buffer-initial-mode>>

<<scroll-conservatively>>

<<silence-audio-and-visual-bells>>

<<suppress-auto-revert-messages>>

<<suppress-startup-splash>>

<<vlf>>

<<so-long>>

<<uniquify>>

<<calc>>

<<enable-default-disabled-functions>>

<<revert-buffer>>

<<open-gnutls-stream-workaround>>

<<auth-source-pass>>

<<password-store>>

<<tablist>>

;; OS-specific / macOS

<<mac>>

<<mac-emacs-for-os-x-keys>>

<<mac-emacs-mac-port-keys>>

<<mac-case-insensitive-sorting-in-dired>>

<<mac-system-open-command>>

<<mac-recentf-exclude>>

<<mac-scale-org-latex-fragment-previews>>

<<mac-emacs-mac-doc-view-resolution>>

;; Transient commands

<<transient>>

;; Transient commands / Global transients

<<bookmarks-transient>>

<<buffer-transient>>

<<conda-transient>>

<<debugger-transient>>

<<ediff-transient>>

<<frame-transient>>

<<help-transient>>

<<keyboard-macros-transient>>

<<marks-and-markers-transient>>

<<neuron-transient>>

<<org-launcher-transient>>

<<password-store-transient>>

<<profiler-transient>>

<<projectile-transient>>

<<registers-transient>>

<<search-transient>>

<<shell-transient>>

<<symbol-overlay-transient>>

<<system-transient>>

<<visual-transient>>

<<window-transient>>

<<workspace-transient>>

<<writing-transient>>

<<yasnippet-transient>>

;; Transient commands / Major mode transients

<<clojure-mode-transient>>

<<csv-mode-transient>>

<<debugger-mode-transient>>

<<dired-mode-transient>>

<<edebug-mode-transient>>

<<ess-mode-transient>>

<<eww-mode-transient>>

<<ibuffer-mode-transient>>

<<markdown-mode-transient>>

<<neuron-mode-transient>>

<<org-agenda-mode-transient>>

<<org-mode-transient>>

<<org-msg-edit-mode-transient>>

<<python-mode-transient>>

<<racket-mode-transient>>

<<restclient-mode-transient>>

<<smerge-mode-transient>>

<<term-mode-transient>>

<<ztreedir-mode-transient>>

<<ztreediff-mode-transient>>

;; Transient commands / Minor mode transients

<<flycheck-mode-transient>>

<<lsp-mode-transient>>

<<generate-footer(feature="init")>>
#+end_src

* TODO Backlog

** Command-line interaction

*** [#C] native-complete and company-native-complete

[[https://github.com/CeleritasCelery/emacs-native-shell-complete][GitHub - CeleritasCelery/emacs-native-shell-complete: Completion in shell buffer]]

** Editing text

*** [#C] objed

[[https://github.com/clemera/objed][GitHub - clemera/objed: Navigate and edit text objects with Emacs]]

** Email

*** [#B] Multiple mailboxes

*Planning notes*:
- Not sure how to configure sending using multiple accounts, although it could probably go something like this:
  - Configuring multiple gmail mailboxes using Lieer linked to separate notmuch subdirectories (see [[https://github.com/gauteh/lieer/issues/56#issuecomment-546015279][here]]).
  - ~(setq send-mail-function #'sendmail-send-it)~
  - Advise ~sendmail-send-it~ to change its ~message-sendmail-extra-arguments~ based on the ~From~ header in the email message using the ~:before~ combinator (see [[https://www.emacswiki.org/emacs/MultipleSMTPAccounts][here]]).
- notmuch indexing does seem not handle multiple Gmail mailboxes very well (see [[https://github.com/gauteh/lieer/issues/56][Github issue]]).

*** [#B] Auto-completion of email address

*Planning notes*:
- [[https://github.com/redguardtoo/gmail2bbdb][gmail2bbdb]] for converting Google contacts to BBDB.
- [[https://elpa.gnu.org/packages/bbdb.html][bbdb]] for managing addresses in Emacs.
- See [[https://github.com/alhassy/emacs.d/blob/master/init.org#auto-completing-mail-addresses][here]] for an example configuration.
- See [[https://emacs.stackexchange.com/questions/22724/bbdb-searching-for-a-name-by-regex-with-tab-auto-completion/23842][here]] for an alternative method of completion using
  ~completing-read~ instead of ~company~.

** Non-programming files

*** Nix configuration files

**** [#C] nix-mode for editing Nix configuration files                :melpa:

[[https://github.com/NixOS/nix-mode][GitHub - NixOS/nix-mode: An Emacs major mode for editing Nix expressions.]]

**** [#C] nix-update-el for updating the rev/sha of a fetchgit declaration :melpa:

[[https://github.com/jwiegley/nix-update-el][GitHub - jwiegley/nix-update-el]] ([[https://melpa.org/#/nix-update][MELPA]])

*** [#C] jq-mode                                                      :melpa:

[[https://github.com/ljos/jq-mode][GitHub - ljos/jq-mode: Emacs major mode for editing jq queries.]]

*** [#B] PlantUML                                                     :melpa:

*** [#C] Ledger                                                       :melpa:

Ledger is a plain text double-entry accounting system for the
command-line.

[[https://github.com/ledger/ledger-mode][ledger-mode]] provides a major mode for editing [[https://github.com/ledger/ledger][ledger]] files.

** Org-mode

*** [#C] Org export backend to Tufte book and handout style PDFs   :external:

*TODO*: fork ~ox-tufte-latex.el~ and incorporate modifications from
~org-tufte-latex.el~ into it, especially making sure variable
modifications are buffer-local and reversible, and changing the
export shortcut keys so they align with the default LaTeX export ones.

Additionally, use the ~ETbb~ package from CTAN for the font instead
of the look-alike in the old code.

*** [#B] Org-ref                                                      :melpa:

[[https://github.com/jkitchin/org-ref][Org-ref]] is a collection of modules for managing citations, references
and BibTeX bibliographies in Org-mode.

*** [#C] org-reveal or org-re-reveal                                  :melpa:

[[https://gitlab.com/oer/org-re-reveal][org-re-reveal]] and [[https://github.com/yjwen/org-reveal][org-reveal]] are comparable packages support
exporting Org documents to [[https://revealjs.com/#/][reveal.js]] presentations.

One rationale for going with ~org-re-reveal~ is for its support for
audio and video, improved support for [[https://github.com/viebel/klipse][klipse]], bilbliography
support via the supporting ~org-re-reveal-ref~ and a number of quality of life
improvements for authoring [[https://en.wikipedia.org/wiki/Open_educational_resources][Open Educational Resources]] via the
supporting ~oer-reveal~ package.

One rationale for going with ~org-reveal~ is that it is more widely
used, and could be earlier to have esoteric bugs fixed and
cutting-edge features implemented.

References:
- [[http://www.zhangjiee.com/blog/2019/emacs-slide.html][Emacs 基于 org-reveal 做幻灯片]]

*** [#B] ox-hugo                                             :external:melpa:

[[https://github.com/kaushalmodi/ox-hugo][GitHub - kaushalmodi/ox-hugo: A carefully crafted Org exporter back-end for Hugo]]

[[https://www.kengrimes.com/ox-hugo-tutorial/][Ken Grimes :: Using ox-hugo To Build Websites with Emacs]]

**** [#C] Using Github Actions to build and deploy websites

[[https://www.aaron-powell.com/posts/2019-12-17-implementing-github-actions-for-my-blog/][Implementing GitHub Actions for My Blog]]

[[https://dev.to/bnb/an-unintentionally-comprehensive-introduction-to-github-actions-ci-blm][An Unintentionally Comprehensive Introduction to GitHub Actions CI - DEV]]

**** [#C] hugo.el                                                  :external:

[[https://github.com/aaronbieber/hugo.el][GitHub - aaronbieber/hugo.el: An interactive wrapper around the Hugo site gen...]]

**** [#C] Javascript (optional)

[[https://zihao.me/post/building-a-blog-with-hugo-and-webpack/][The Perfect Blog Setup with Hugo, Webpack 4 and Babel 7 in 2019 · Zihao Zhang]]

[[https://simonclayson.co.uk/notebook/hugo-pipes-mounts-optimisation/][Minify CSS and JS with Hugo Pipes and Module Mounts | Simon Clayson]]

*** [#C] org-static-blog                                              :melpa:

[[https://github.com/bastibe/org-static-blog][org-static-blog]] is a static website generator.

It integrates well with Github pages or GitLab pages.

It is possible to set up auto-rendering using CI tooling a new blog
post is pushed, see [[https://gitlab.com/_zngguvnf/org-static-blog-example][here]].

To enable local development, may want to use a =.dir-locals= file in
the repositort that sets up a switcher between local development and
remote deployment for:
- ~org-static-blog-publish-url~
- ~org-static-blog-publish-directory~
- ~org-static-blog-posts-directory~
- ~org-static-blog-drafts-directory~

References:
- [[https://jao.io/blog/2020-02-11-simplicity.html][simplicity]]
- [[https://favicon.io/emoji-favicons/floppy-disk/][Floppy Disk | Favicon.io]] (for favicon)

*** [#C] Convert data to Org-mode representation using Orger       :external:

Built-in modules support conversion from a variety of sources,
alternative is Memacs.

[[https://github.com/karlicoss/orger][GitHub - karlicoss/orger]]

** Programming

*** Bash

**** [#C] Static analysis using ShellCheck                         :external:

Install via MacPorts.

[[https://github.com/koalaman/shellcheck][GitHub - koalaman/shellcheck]]

Flycheck has built-in support.

MELPA has a package for Flymake support.
Or can define using ~flymake-quickdef~.

[[https://github.com/federicotdn/flymake-shellcheck][GitHub - federicotdn/flymake-shellcheck]]

*** Python

**** [#C] Tab completion in PDB

[[https://github.com/muffinmad/emacs-pdb-capf][GitHub - muffinmad/emacs-pdb-capf: Completion-at-point function for pdb]]

Might not be needed if mostly debugging using ~dap-mode~ with the
~ptvsd~ debugger.

*** SQL

**** WAIT [#B] ejc-sql database client using Clojure JDBC connections :external:melpa:
:LOGBOOK:
- State "WAIT"       from              [2020-06-07 Sun 16:24] \\
  Currently uses ~auto-complete-mode~ for completion.
  Wait until ~company-mode~ is supported.
  See https://github.com/kostafey/ejc-sql/issues/67
  For now, can use something like [[http://squirrel-sql.sourceforge.net/][SQuirreL SQL]] or [[https://www.knime.com/][KNIME]].
:END:

[[https://github.com/kostafey/ejc-sql][ejc-sql]] is a SQL client that uses Clojure JDBC connections to connect
to databases.

It uses Clojure and so requires [[https://leiningen.org/][Leiningen]] be installed.

[[https://github.com/kostafey/ejc-sql][GitHub - kostafey/ejc-sql: Emacs SQL client uses Clojure JDBC.]]

*Note*: Uses ~auto-complete~ which may conflict with ~company-mode~.

** Project interaction

*** [#B] Forge for working with Git forges from Magit                 :melpa:

[[https://github.com/magit/forge][Forge]] extends Magit to integrate more tightly with Git forges like
Github and Gitlab, exposing functionality to work on issues and pull
requests as well as to perform other forge-related tasks like forking.

Quick overview of using Forge in a typical open-source contribution workflow.

1. ~M-x magit-status~ on Git clone of project to contribute to.
2. Add GitHub user id to Forge custom option ~forge-owned-accounts~.
3. ~magit-status~ buffer \to ~' c f~ to create a fork (defaults ok).
4. Create feature branch, add contribution and push to feature branch.
5. ~magit-status~ buffer \to ~' c p~ to create the pull-request.

*** [#C] nix-buffer for directory/file-specific specific environments :external:melpa:

[[https://github.com/shlevy/nix-buffer][nix-buffer]] allows for directory-specific or file-specific (see below)
environments using Nix.

- Using nix-buffer for file-local environments ([[https://blog.jethro.dev/posts/nix_buffer_emacs/][link]])

*** [#B] Generic session manager                                      :melpa:

[[https://github.com/vspinu/sesman][GitHub - vspinu/sesman: Session manager for Emacs based IDEs.]]

*** [#C] EditorConfig                                                 :melpa:

[[https://editorconfig.org/][EditorConfig]] [[https://github.com/editorconfig/editorconfig-emacs][plugin]] for Emacs.

EditorConfig helps to maintain consistent coding styles when multiple
developers work on a project. A code style file can be defined for a
project and the editor is automatically configured (built-in for some
editors, using a plugin for others) to adhere to that code style when
working on that project.

** Reference management

*** [#C] Biblio                                                       :melpa:

[[https://github.com/cpitclaudel/biblio.el][Biblio]] provides Emacs functions to browse bibliographic references
from a number of sources and import them as BibTeX records.

See [[https://juanjose.garciaripoll.com/blog/ebib-biblio-interface/index.html][link]] for one reference configuration, but it's probaly better to
start with a simpler workflow like copy DOI link \to Bilbio \to import
into Ebib (~M-x ebib-import~ on region or with entries in a buffer).
See the /Merging and Importing/ section of the Ebib [[http://joostkremers.github.io/ebib/ebib-manual.html][manual]].

*** [#B] Helm-bibtex                                                  :melpa:

Leverages Helm to search and manage BibTeX bilbiographies.
Potentially useful complement to Ebib.

** Visual

** Web

*** [#A] Additions to restclient config

References:
- [[https://erick.navarro.io/blog/testing-an-api-with-emacs-and-restclient/][Testing an API with emacs and restclient · (ノ°Д°）ノ︵ ┻━┻]]

Steps:
- Add restclient-helm
- Add transient for accessing restclient functionality
- Add jq-mode
- Add restclient-jq
- Add ob-restclient

*** [#A] restclient-helm                                              :melpa:

*** [#C] restclient-jq                                             :external:

Not yet in MELPA. Depends on ~jq-mode~.

*** [#C] ob-restclient

*** [#A] Elfeed                                                       :melpa:

[[https://github.com/skeeto/elfeed][Elfeed]] is an Atom and RSS feed reader. Also look at supporting
packages [[https://github.com/remyhonig/elfeed-org][elfeed-org]] and [[https://github.com/sp1ff/elfeed-score][elfeed-score]].

** Writing

*** [#C] fountain-mode for screenwriting in Fountain markup           :melpa:

[[https://github.com/rnkn/fountain-mode][Fountain Mode]] provides a major mode for editing [[https://fountain.io/][Fountain]] plain-text
markup.

** Other

*** [#C] literate-calc-mode

[[https://github.com/sulami/literate-calc-mode.el][GitHub - sulami/literate-calc-mode.el]]

This package supports literate programming for calculations,
automatically picking up calculations and inserting the results as
overlays.

*** [#C] org-trello for syncing between Org buffers and Trello boards

[[https://github.com/org-trello/org-trello][GitHub - org-trello/org-trello: Org minor mode - 2-way sync org & trello]]

*** [#B] org-kungfu for writing Confluence pages

[[https://github.com/baohaojun/org-kungfu][GitHub - baohaojun/org-kungfu: Using Org-mode to write Confluence pages]]

* Local Variables                                                  :noexport:

Autocaption source blocks with their names when exporting so that
[[https://www.gnu.org/software/emacs/manual/html_node/org/noweb.html][noweb]] entries in the [[Tangled files]] section can be referenced against
their source blocks.

#+begin_src org
Local Variables:
eval: (setq-local org-babel-exp-code-template (concat "\n#+caption:=%name=\n" org-babel-exp-code-template))
End:
#+end_src
