#+title: Emacs machine-local configuration snippets
#+author: matheuristic
#+options: h:4 num:t toc:t
#+property: header-args:emacs-lisp :exports code

* About

Snippets that can be copied into
=$HOME/.emacs.d/lisp/early-init-local.el= or
=$HOME/.emacs.d/lisp/init-local.el= for machine-local configuration.

Configuration to be set early (e.g., font faces) should go into
=early-init-local.el= and headings for these are tagged ~early~ below.
Otherwise they should go into =init-local.el=.

The following are templates for local configuration.

#+begin_src emacs-lisp
;;; early-init-local.el --- Emacs local config file -*- lexical-binding: t; -*-

;;; Commentary:

;; Emacs configuration that is machine-local, typically loaded after
;; early-init.el but before init.el

;; This file should be located at lisp/early-init-local.el within
;; `user-emacs-directory', typically
;; ~/.emacs.d/lisp/early-init-local.el

;;; Code:

;; Local configuration code goes here ...

(provide 'early-init-local)
;;; early-init-local.el ends here
#+end_src

#+begin_src emacs-lisp
;;; init-local.el --- Emacs local config file -*- lexical-binding: t; -*-

;;; Commentary:

;; Emacs configuration that is machine-local, typically loaded before
;; the Customize file.

;; This file should be located at lisp/init-local.el within
;; `user-emacs-directory', typically ~/.emacs.d/lisp/init-local.el

;;; Code:

;; ... machine-local configuration goes here ...

(provide 'init-local)
;;; init-local.el ends here
#+end_src

* Display face fonts                                                  :early:

Set the fonts used for display faces.

There are a few main display faces many other faces inherit from:
- ~default~: The main display face, everything inherits from this directly or
  indirectly unless otherwise specified.
- ~fixed-pitch~: For specific cases where a fixed-pitch
  (i.e. monospace) font is expected.
- ~variable-pitch~: For specific cases where a variable-pitch
  (i.e. proportional) font is expected.
- ~mode-line~: Mode line face for active buffers.
- ~mode-line-inactive~: Mode line face for inactive buffers.

Also set a fallback font for filling gaps in character coverage in the
display face fonts using ~set-fontset-font~,
which has the function signature
~(set-fontset-font NAME TARGET FONT-SPEC &optional FRAME ADD)~.
The key observations here are that:
- When ~NAME~ is ~t~, this is applied to the default fontset.
- When ~TARGET~ is ~nil~, ~FONT-SPEC~ is used for missing characters
  (if it has that character).
- When ~ADD~ is ~append~, then this font is added to the end of the
  fontset which means it will be searched for a matching character
  glyph after all other fonts in the set.

For a list of good free or open-source fonts, see this [[https://github.com/matheuristic/dotfiles/blob/master/font_notes.org][link]].
For more information about fonts and fontsets in Emacs, see this [[https://idiocy.org/emacs-fonts-and-fontsets.html][link]].
Run ~(font-family-list)~ to get a list of available font families.

If using a large font, it is also a good idea to set
~inhibit-compacting-font-caches~ to ~t~ which avoids garbage
collecting font caches. This mitigates scenarios where the font is
removed from the cache and reloaded again during redisplay which can
slow down the redisplay.

#+begin_src emacs-lisp
;;; set typefaces for graphical Emacs
;;; main fonts
;;; - note that the default face must specify :height using an integer
;;;   in units of 1/10 point but other faces can use a float specifying
;;;   height relative to its underlying face if desired
(set-face-attribute 'default nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 160 110)
                    :weight 'normal :width 'normal)
(set-face-attribute 'fixed-pitch nil :family "Iosevka Term"
                    :height 1.0
                    :weight 'normal :width 'normal)
(set-face-attribute 'variable-pitch nil :family "Iosevka Aile"
                    :height 1.0
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 130 90)
                    :weight 'normal :width 'normal)
(set-face-attribute 'mode-line-inactive nil :family "Iosevka Term"
                    :height (if (eq system-type 'darwin) 130 90)
                    :weight 'normal :width 'normal)
;;; fallback font
(set-fontset-font t nil "Symbola" nil 'append)
;;; increase min underline offset for more readable underlined words
(setq underline-minimum-offset 5)
;;; uncomment below if using a large font to not compact it during GC
(setq inhibit-compacting-font-caches t)
#+end_src

For some fonts, an alternative character may be preferable to the
standard character show for some symbol code.
In those instances, the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#Active-Display-Table][standard display table]] can be modified to
display replace characters of a given code with characters of a
different one.
An example is shown below.

#+begin_example
;; the following displays '0' using '\ue007' (private slashed zero in B612 font)
(setq standard-display-table (make-display-table))
(aset standard-display-table ?0 [?])
#+end_example

* Insert characters from a menu

[[https://github.com/mrkkrp/char-menu][char-menu]] allows inserting characters by selecting from an [[https://github.com/mrkkrp/avy-menu][Avy menu]].

#+begin_src emacs-lisp
;; insert characters from a menu
(use-package char-menu
  :bind ("C-c 8" . char-menu)
  :config
  (setq char-menu '("—" "‘’" "“”" "…" "«»" "–"
                    ("Typography"
                     "•" "©" "®" "™" "†" "‡" "°" "·" "§" "¶" "№" "★"
                     "¡" "¿" "※" "◊" "❧" "☞" "¢" "£" "€" "Æ" "Œ" "æ"
                     "œ" "½" "⅓" "¼" "⅛")
                    ("Emoji"
                     "😄" "😁" "😆" "😅" "🤣" "🙂" "🙃" "😉" "😇" "😙"
                     "🤔" "🤨" "😑" "🙄" "😌" "🙁" "😮" "😭" "😢" "😖"
                     "😞" "😤" "😠" "🤬" "😷" "🤒" "🥳" "💩" "❤" "💯"
                     "👋" "👍" "👎" "🙏" "👀" "🤷" "🎉")
                    ("Mathematical Operators"
                     "±" "×" "÷" "√" "∑" "∏" "∫" "∮" "∴" "∵" "≠" "≈"
                     "≉" "≤" "≥" "⊂" "⊃" "⊄" "⊅" "⊆" "⊇" "⊈" "⊉"
                     "⩵" "⩶" "≔" "≕" "≜" "∷" "∹" "∀" "∂" "∃" "∄" "∅"
                     "∆" "∇" "∈" "∉" "⊲" "⊳" "⊴" "⊵" "∝" "∞"
                     "⋀" "⋁" "⋂" "⋃" "∧" "∨" "∩" "∪" "⊼" "⊽" "¬" "⊥"
                     "⊢" "⊨" "⊬" "⊭" "≃" "≁" "∥" "⋮" "⋯")
                    ("Superscripts & Subscripts"
                     "⁰" "¹" "²" "³" "⁴" "⁵" "⁶" "⁷" "⁸" "⁹"
                     "⁺" "⁻" "⁼" "⁽⁾" "ⁱ" "ⁿ"
                     "₀" "₁" "₂" "₃" "₄" "₅" "₆" "₇" "₈" "₉"
                     "₊" "₋" "₌" "₍₎" "ₐ" "ₑ" "ₒ" "ₓ" "ₔ" "ₕ"
                     "ₖ" "ₗ" "ₘ" "ₙ" "ₚ" "ₛ" "ₜ")
                    ("Arrows"
                     "←" "→" "↑" "↓" "⇐" "⇒" "⇑" "⇓" "⇔" "⇕"
                     "⇍" "⇏" "⇎" "↤" "↦" "↥" "↧" "↺" "↻")
                    ("Technical"
                     "⌘" "⌥" "⌫" "␡" "⌦" "⌃" "⎋" "␛" "⏎" "↩" "⇥"
                     "⇧" "⇪" "⏏" "⌽" "␣" "␀" "␖" "␆")
                    ("Greek"
                     "α" "β" "Y" "δ" "ε" "ζ" "η" "θ" "ι" "κ" "λ" "μ"
                     "ν" "ξ" "ο" "π" "ρ" "σ" "τ" "υ" "φ" "χ" "ψ" "ω"
                     "Α" "Β" "Γ" "Δ" "Ε" "Ζ" "Η" "Θ" "Ι" "Κ" "Λ" "Μ"
                     "Ν" "Ξ" "Ο" "Π" "Ρ" "Σ" "Τ" "Υ" "Φ" "Χ" "Ψ" "Ω")
                    ("Enclosed Alphanumerics"
                     "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" "Ⓐ" "Ⓑ" "Ⓒ"
                     "Ⓓ" "Ⓔ" "Ⓕ" "Ⓖ" "Ⓗ" "Ⓘ" "Ⓙ" "Ⓚ" "Ⓛ" "Ⓜ" "Ⓝ" "Ⓞ"
                     "Ⓟ" "Ⓠ" "Ⓡ" "Ⓢ" "Ⓣ" "Ⓤ" "Ⓥ" "Ⓦ" "Ⓧ" "Ⓨ" "Ⓩ" "ⓐ"
                     "ⓑ" "ⓒ" "ⓓ" "ⓔ" "ⓕ" "ⓖ" "ⓗ" "ⓘ" "ⓙ" "ⓚ" "ⓛ" "ⓜ"
                     "ⓝ" "ⓞ" "ⓟ" "ⓠ" "ⓡ" "ⓢ" "ⓣ" "ⓤ" "ⓥ" "ⓦ" "ⓧ" "ⓨ"
                     "ⓩ" "⓪"))))
#+end_src

* vterm

[[https://github.com/akermu/emacs-libvterm][emacs-libvterm]] (vterm) is full terminal emulator run inside Emacs
using [[https://launchpad.net/libvterm][libvterm]].

Note this requires Emacs be compiled with modules support enabled
(using the ~--with-modules~ option). If so, ~module-fix-suffix~ will
be non-nil.

~cmake~ and ~libtool~ are needed. On macOS, this can be installed
using MacPorts (shown below) or Homebrew or Spack or conda. On Debian,
install the ~cmake~ and ~libtool-bin~ APT packages.

#+begin_example
$ sudo port install cmake libtool
#+end_example

The emacs-libvterm package requires libvterm and its headers be
installed on the system (~libvterm-dev~ on Debian). On macOS, this can
be installed using MacPorts (shown below) or Homebrew or Spack.

#+begin_example
$ sudo port install libvterm
#+end_example

If libvterm and its headers are not installed on the system,
emacs-libvterm will try to clone the libvterm source onto the local
machine and compile it.

*Configuration*:
- Use shell title to populate buffer name.
- Clearing the screen also clears scrollback history.
- Limit the automatically eval'ed vterm commands in shell output to
  further limit attack vectors for arbitrary code execution.
- Kill vterm buffer automatically on exit.
- Define functions for sending lines and regions to a vterm buffer.
- Define a ~switch-to-buffer~ variant restricted to vterm buffers and
  the most recently selected buffer besides the current one (this is
  the buffer return by ~other-buffer~, and allows for toggling between
  the code and vterm), and bind it to ~C-c C-b~ when in ~vterm-mode~.
- Modify shell transient (~C-c t~) to include vterm suffixes.

#+name: vterm
#+begin_src emacs-lisp
;; vterm
(when (and module-file-suffix
           (executable-find "cmake")
           (executable-find "libtool"))
  (use-package vterm
    :init
    (setq vterm-buffer-name-string "vterm %s"
          vterm-clear-scrollback-when-clearing t
          vterm-eval-cmds '(("vterm-clear-scrollback" vterm-clear-scrollback))
          vterm-kill-buffer-on-exit t)
    :config
    ;; interactive funcs for sending lines/regions to a vterm buffer
    (defun my-vterm-send (command)
      "Select a vterm buffer and execute COMMAND."
      (interactive)
      (let* ((my-vt-bufs (seq-filter
                          (lambda (buf)
                            (string-match-p vterm-buffer-name (buffer-name buf)))
                          (buffer-list)))
             (my-vt-buf-name-list (mapcar #'buffer-name my-vt-bufs)))
        (if my-vt-buf-name-list
            (let* ((my-vt-buf-name (completing-read
                                    (concat "Send to vterm buffer ("
                                            (car my-vt-buf-name-list)
                                            ") : ")
                                    my-vt-buf-name-list nil t
                                    nil nil my-vt-buf-name-list)))
              (with-current-buffer my-vt-buf-name
                (goto-char (point-max))
                (message command)
                (vterm-send-string command)
                (vterm-send-return)))
          (message "No vterm buffers"))))
    (defun my-vterm-send-region ()
      "Select a vterm buffer and execute the current region."
      (interactive)
      (cond
       ((use-region-p)
        (my-vterm-send (buffer-substring-no-properties
                        (region-beginning)
                        (region-end))))
       (t (message "No region selected"))))
    (defun my-vterm-send-line ()
      "Select a vterm buffer and execute the current line."
      (interactive)
      (my-vterm-send
       (buffer-substring-no-properties (point-at-bol) (point-at-eol))))

    ;; interactive func and binding for switching to vterm buffers
    (defun vterm-switchb ()
      "Call `switch-to-buffer' but only for vterm buffers."
      (interactive)
      (let ((completion-regexp-list '("\\`vterm .*")))
        (call-interactively #'switch-to-buffer)))
    (define-key vterm-mode-map (kbd "C-c C-b") #'vterm-switchb)

    ;; add vterm suffixes to shell transient
    (with-eval-after-load 'init
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("v" "vterm" vterm))
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("V" "vterm (other)" vterm-other-window))
      (transient-append-suffix 'transient/shell '(0 0 -1)
        '("C-v" "vterm recompile" vterm-module-compile))
      (transient-append-suffix 'transient/shell '(0 1)
        ["Send to vterm"
         ("L" "Line" my-vterm-send-line)
         ("R" "Region" my-vterm-send-region)
         ]
        )
      )
    ;; major-mode specific transient for vterm-mode and vterm-copy-mode
    (transient-define-prefix transient/vterm-mode ()
      "`term-mode' commands."
      ["Vterm"
       ("n" "Next prompt" vterm-next-prompt :transient t)
       ("p" "Prev prompt" vterm-previous-prompt :transient t)
       ("r" "Reset cursor" vterm-reset-cursor-point :transient t)
       ("t" (lambda ()
              (interactive)
              (transient--make-description
               "Copy mode"
               vterm-copy-mode))
        vterm-copy-mode :transient t)
       ]
      )
    (define-key vterm-mode-map (kbd "C-c m") #'transient/vterm-mode)
    (define-key vterm-copy-mode-map (kbd "C-c m") #'transient/vterm-mode)))
#+end_src

*Updating compiled modules*: ~M-x vterm-module-compile~ recompiles
vterm-module, so run it to update to newer versions of libvterm.

** Shell-side configuration required for specific vterm features

If desired, vterm also has a number of Emacs and shell integration
features (directory tracking, prompt tracking, message parsing, etc)
that require some [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][shell-side]] [[https://github.com/akermu/emacs-libvterm#shell-side-configuration-files][configuration]].

These configurations are combined into a file (there are different
ones for Bash, ZSH and Fish) in vterm's =etc/= directory (see [[https://github.com/akermu/emacs-libvterm/tree/master/etc][link]])
that can be sourced in the main shell config file.

For Bash, add the following to the =~/.bashrc= file.

#+begin_example
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh
fi
#+end_example

For ZSH, add the following to the =~/.zshrc= file.

#+begin_example
if [[ "$INSIDE_EMACS" = 'vterm' ]] \
    && [[ -n ${EMACS_VTERM_PATH} ]] \
    && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh ]]; then
	source ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh
fi
#+end_example

*** Directory and prompt tracking

Enables using ~C-c C-n~ and ~C-c C-p~ to go the next and previous
prompts respectively while in vterm.

Also allows ~vterm-beginning-of-line~ and ~vterm-at-prompt-p~
functions to better detect prompts.

For Bash, add the following to the =~/.bashrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    vterm_prompt_end(){
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
    }
    PS1=$PS1'\[$(vterm_prompt_end)\]'
fi
#+end_example

For Zsh, add the following to the =~/.zshrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    vterm_prompt_end() {
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
    }
    setopt PROMPT_SUBST
    PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'
fi
#+end_example

For fish, create a =~/.config/fish/functions/vterm_prompt_end.fish=
file with the following.

#+begin_example
# Helper function for redefining prompt in config.fish to enable directory
# and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    function vterm_prompt_end
        vterm_printf '51;A'(whoami)'@'(hostname)':'(pwd)
    end
end
#+end_example

Next, add the following near the end of the
=~/.config/fish/config.fish= file.

#+begin_example
# Redefine the prompt for directory and prompt tracking in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#directory-tracking-and-prompt-tracking
if [ "$INSIDE_EMACS" = "vterm" ]
    functions -c fish_prompt vterm_old_fish_prompt
    function fish_prompt --description 'Write out the prompt; do not replace this. Instead, put this at end of your file.'
        # Remove the trailing newline from the original prompt. This is done
        # using the string builtin from fish, but to make sure any escape codes
        # are correctly interpreted, use %b for printf.
        printf "%b" (string join "\n" (vterm_old_fish_prompt))
        vterm_prompt_end
    end
end
#+end_example

*** vterm-clear-scrollback-when-clearing support

Required for ~vterm-clear-scrollback-when-clearing~ to work properly
when it is set to non-nil. This automatically clears the scrollback as well
on ~vterm-clear~, which bound to ~C-l~ by default.

For Bash, add the following to the =~/.bashrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    function clear(){
        vterm_printf "51;Evterm-clear-scrollback";
        tput clear;
    }
fi
#+end_example

For Zsh, add the following to the =~/.zshrc= file.

#+begin_example
if [ "$INSIDE_EMACS" = "vterm" ]; then
    alias clear='vterm_printf "51;Evterm-clear-scrollback";tput clear'
fi
#+end_example

For fish, create a =~/.config/fish/functions/clear.fish= file with the
following contents.

#+begin_example
# Redefine clear function to also clear scrollback history in emacs-libvterm
# https://github.com/akermu/emacs-libvterm#vterm-clear-scrollback
if [ "$INSIDE_EMACS" = "vterm" ]
    function clear
        vterm_printf "51;Evterm-clear-scrollback"
        tput clear
    end
end
#+end_example

* Acme mouse emulation

Emulate Acme mouse behavior.

#+begin_src emacs-lisp
;; emulate Acme mouse interface (buttons 1, 2, 3; chords 1-2 and 1-3)
(with-eval-after-load 'acme-mode
  ;; trackpad support, note that trackpads don't support mouse chords
  (cond ((eq system-type 'darwin)
         ;; middle-click
         (define-key acme-mode-map [s-down-mouse-1] #'acme-mode--down-mouse-2)
         (define-key acme-mode-map [s-mouse-1] #'acme-mode--mouse-2)
         (define-key acme-mode-map [s-drag-mouse-1] #'acme-mode--drag-mouse-2)
         ;; right-click
         (define-key acme-mode-map [C-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [C-double-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [C-triple-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [C-mouse-1] #'acme-mode--mouse-3)
         (define-key acme-mode-map [C-drag-mouse-1] #'acme-mode--down-mouse-3))
        ((eq system-type 'gnu/linux)
         ;; middle-click
         (define-key acme-mode-map [C-down-mouse-1] #'acme-mode--down-mouse-2)
         (define-key acme-mode-map [C-mouse-1] #'acme-mode--mouse-2)
         (define-key acme-mode-map [C-drag-mouse-1] #'acme-mode--drag-mouse-2)
         ;; right-click
         (define-key acme-mode-map [M-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-double-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-triple-down-mouse-1] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-mouse-1] #'acme-mode--mouse-3)
         (define-key acme-mode-map [M-drag-mouse-1] #'acme-mode--drag-mouse-3)
         ;; in ChromeOS, Alt-left-click gets auto-translated to right-click
         (define-key acme-mode-map [M-down-mouse-3] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-double-down-mouse-3] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-triple-down-mouse-3] #'acme-mode--down-mouse-3)
         (define-key acme-mode-map [M-mouse-3] #'acme-mode--mouse-3)
         (define-key acme-mode-map [M-drag-mouse-3] #'acme-mode--drag-mouse-3)))
  ;; customization options
  (setq acme-mode-enable-trackpad-chording t)
  ;; enable `acme-mode'
  (acme-mode 1))
#+end_src

* Language Server Protocol

[[https://github.com/joaotavora/eglot][Emacs Polyglot]] (or eglot) is an Emacs Language Server Protocol client.
It is more lightweight than [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]], though also with less features.

- Compose output from multiple eldoc documentation functions instead
  of only using the first one which is the default behavior ([[https://github.com/joaotavora/eglot/issues/648][link]]).
- ~C-c l~ invokes an eglot transient globally.

#+begin_src emacs-lisp
;; lightweight LSP client
(use-package eglot
  :config
  ;; increase wait time after last change before asking for
  ;; completions from 0.5s to 2s to reduce request rate
  (setq eglot-send-changes-idle-time 2)
  ;; don't let Eglot manage Flymake backends, so that multiple ones
  ;; can be used, see https://github.com/joaotavora/eglot/issues/268
  (setq eglot-stay-out-of '(flymake))
  (add-hook 'eglot--managed-mode-hook (lambda () (add-hook 'flymake-diagnostic-functions 'eglot-flymake-backend nil t))))

;; compose outputs from eldoc doc functions in Eglot managed buffers
(with-eval-after-load 'eldoc
  (with-eval-after-load 'eglot
    (add-hook 'eglot--managed-mode-hook
              (lambda ()
                (when (boundp 'eldoc-documentation-strategy)
                  (setq-local eldoc-documentation-strategy #'eldoc-documentation-compose))))))

;; add transient for Eglot
(with-eval-after-load 'eglot
  (transient-define-prefix transient/eglot ()
    "`eglot' session commands"
    ["Eglot Language Server Protocol client"
     ["Session"
      ("ss" "Start" eglot)
      ("sr" "Reconnect" eglot-reconnect)
      ("sS" "Shutdown" eglot-shutdown)
      ("sQ" "Shutdown all" eglot-shutdown-all)
      ("sc" "Update cfg" eglot-signal-didChangeConfiguration)
      ]
     ["Goto"
      ("ga" "Apropos" xref-find-apropos)
      ("gf" "Defn" xref-find-definitions)
      ("gd" "Decl" eglot-find-declaration)
      ("gi" "Impl" eglot-find-implementation)
      ("gr" "Refs" xref-find-references)
      ("gt" "Typedef" eglot-find-typeDefinition)
      ]
     ["Code Actions"
      ("cc" "Ask server" eglot-code-actions)
      ("re" "Extract" eglot-code-action-extract)
      ("ri" "Inline" eglot-code-action-inline)
      ("ro" "Org. Imprts" eglot-code-action-organize-imports)
      ("rf" "Quickfix" eglot-code-action-quickfix)
      ("rw" "Rewrite" eglot-code-action-rewrite)
      ]
     ["Other"
      ("rh" "Help-at-pt" eldoc)
      ("rr" "Rename" eglot-rename)
      ("rf" "Format" eglot-format)
      ("re" "Events buf" eglot-events-buffer)
      ("rs" "Stderr buf" eglot-stderr-buffer)
      ]
     ]
    )
  (global-set-key (kbd "C-c l") #'transient/eglot))
#+end_src

* Python

- Enable Flymake mode when editing Python files.
- Add Imenu entry to the menubar in ~python-mode~ buffers.
- Use ~jedi-language-server~ ([[https://github.com/pappasam/jedi-language-server][link]]) in Eglot for Python buffers. Since
  ~jedi-language-server~ smartly handles virtual environments, it is
  fine to install it outside of a development environment (e.g., for
  conda it can be installed in some ~jedi-ls~ environment with the
  ~jedi-language-server~ binary symlinked to a directory in ~$PATH~).
- When in a Python buffer, ~C-c m~ invokes a mode-specific transient
  (configured in ~init.el~).

#+begin_src emacs-lisp
;; enable `flymake-mode' in `python-mode' buffers
(add-hook 'python-mode-hook #'flymake-mode t)

;; add Imenu index to menubar
(with-eval-after-load 'imenu
  (add-hook 'python-mode-hook 'imenu-add-menubar-index))

;; use jedi-language-server for Python buffers when using eglot
(with-eval-after-load 'eglot
  (setf (alist-get 'python-mode eglot-server-programs) '("jedi-language-server")))
#+end_src

* R

R support is provided by [[https://ess.r-project.org/][Emacs Speaks Statistics]], more commonly known
by its abbreviation ESS ([[https://github.com/emacs-ess/ESS][Github]]).

- Install the [[https://cran.r-project.org/web/packages/lintr/index.html][lintr]] and [[https://cran.r-project.org/web/packages/styler/index.html][styler]] CRAN packages
  #+begin_src R
  install.packages("lintr")
  install.packages("styler")
  #+end_src
- Linting via Flycheck or Flymake uses the [[https://github.com/r-lib/lintr][lintr]] R package, and
  sometimes manual creation the =~/.R/lintr_cache~= directory is
  needed (see [[https://emacs.stackexchange.com/questions/53018/flycheck-r-lintr-doesnt-find-anything][StackOverflow issue]]).
- ~M--~ inserts ~<-~ in ~ess-mode~ and ~inferior-ess-mode~.
- ~C-S-m~ inserts ~%>%~ followed by a new line in ~ess-mode~ and
  ~inferior-ess-mode~.
- [[https://github.com/ShuguangSun/ess-r-insert-obj][ess-r-insert-obj]] provides utilities for inserting variable and
  column names or their values in ESS-R.
- [[https://github.com/ShuguangSun/ess-r-insert-obj][ess-r-insert-obj]] provides utilities for inserting variable and
  column names or their values in ESS-R.
- [[https://github.com/polymode/poly-R/][poly-R]] provides better support for R Markdown and bookdown files,
  leveraging [[https://github.com/polymode/polymode][polymode]] to have different major modes be active for
  different buffer regions.
- Code reformatting is done using the ~reformatter-define~ macro from
  the ~reformatter~ package, which defines two interactive commands
  ~r-styler-format-buffer~ and ~r-styler-format-region~ (only works on
  top-level objects) along with the local minor mode
  ~r-styler-format-on-save-mode~ that uses [[https://github.com/r-lib/styler][styler]] to format the code
  in the buffer.
- When in an R buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for R language using Emacs Speaks Statistics
(use-package ess
  :mode ("\\.R\\'" . R-mode)
  :commands (R-mode ess-switch-to-ESS)
  :init (setq ess-eval-visibly 'nowait
              ess-default-style 'RStudio
              ;; use Flymake only when buffer has an inferior process
              ess-use-flymake 'process))

;; forward pipe and assignment R operator shortcuts, adapted from
;; https://emacs.stackexchange.com/questions/8041/how-to-implement-the-piping-operator-in-ess-mode
(defun my-insert-R-forward-pipe-operator ()
  "Insert R magrittr forward pipe operator '%>%'."
  (interactive)
  (just-one-space 1)
  (insert "%>%")
  (reindent-then-newline-and-indent))
(defun my-insert-R-assignment-operator ()
  "Insert R assigment operator '<-'."
  (interactive)
  (just-one-space 1)
  (insert "<- "))

;; bindings for the above R operator shortcuts
(with-eval-after-load 'ess-r-mode
  (define-key ess-r-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key ess-r-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator)
  (define-key inferior-ess-r-mode-map (kbd "M--") #'my-insert-R-assignment-operator)
  (define-key inferior-ess-r-mode-map (kbd "C-S-m") #'my-insert-R-forward-pipe-operator))

;; view data in ESS-R
(use-package ess-view-data
  :after ess-r-mode
  :bind (:map ess-r-mode-map
         ("C-c v" . ess-view-data-print))
  :init
  ;; set update print backend to knitr::kable() due to csv-mode
  ;; header-line errors when using the default print backend
  (setq ess-view-data-current-update-print-backend 'kable))

;; insert column or variable names or values in ESS-R, useful when
;; working with tidyverse
(use-package ess-r-insert-obj
  :after ess-r-mode
  :bind (:map ess-r-mode-map
         ("C-c i f" . ess-r-insert-obj-dt-name)
         ("C-c i c" . ess-r-insert-obj-col-name)
         ("C-c i C" . ess-r-insert-obj-col-name-all)
         ("C-c i v" . ess-r-insert-obj-value)
         ("C-c i V" . ess-r-insert-obj-value-all)))

;; better support for R Markdown and bookdown files
(use-package poly-R)

;; format R buffers using styler
(with-eval-after-load 'reformatter
  (with-eval-after-load 'ess-r-mode
    ;; define `ess-r-styler-format-buffer', `ess-r-styler-format-region'
    ;; and `ess-r-styler-format-on-save-mode'
    (reformatter-define ess-r-styler-format
      :program "Rscript"
      :args `("--vanilla"
              "-e"
              ,(mapconcat
                'identity
                '("options(styler.colored_print.vertical=FALSE)"
                  "con <- file(\"stdin\")"
                  "out <- styler::style_text(readLines(con))"
                  "close(con)"
                  "out")
                "; ")
              "-")
      :group 'ess-R
      :lighter 'RStylFmt)
    ;; dwim function that calls `ess-r-styler-format-region' if a region
    ;; is selected, or `ess-r-styler-format-buffer' otherwise
    (defun ess-r-styler-format-buffer-or-region ()
      "Format the current R buffer or a region if selected using styler.
Formatting a selected region only works on top-level objects."
      (interactive)
      (cond
       ((use-region-p) (ess-r-styler-format-region (region-beginning)
                                                   (region-end)))
       (t (ess-r-styler-format-buffer))))))

;; major-mode specific transient for ess-r-mode
(with-eval-after-load 'ess-r-mode
  (require 'ess-view-data)
  (require 'ess-r-insert-obj)
  (transient-define-prefix transient/ess-r-mode ()
    "`ess-r-mode' commands."
    ["Emacs Speaks Statistics"
     ["Session"
      ("N" "New" R)
      ("R" "Request" ess-request-a-process)
      ("s" "Switch" ess-switch-to-ESS)
      ("q" "Quit" ess-quit)
      ]
     ["Eval"
      ("l" "Line" ess-eval-line)
      ("f" "Function" ess-eval-function)
      ("r" "Region" ess-eval-region)
      ("b" "Buffer" ess-eval-buffer)
      ]
     ["Workspace"
      ("D" "Change dir" ess-change-directory)
      ("d" "R dired" ess-rdired)
      ("v" "View data" ess-view-data-print)
      ]
     ["Insert"
      ("if" "Dataframe name" ess-r-insert-obj-dt-name)
      ("ic" "Column name" ess-r-insert-obj-col-name)
      ("iC" "Column name (all)" ess-r-insert-obj-col-name-all)
      ("iv" "Column value" ess-r-insert-obj-value)
      ("iV" "Column value (all)" ess-r-insert-obj-value-all)
      ]
     ["Help"
      ("h" "Object" ess-display-help-on-object)
      ("A" "Apropos" ess-display-help-apropos)
      ("H" "Browser" ess-display-help-in-browser)
      ]
     ]
    [
     ["Format"
      ("y" "Region or buffer" ess-r-styler-format-buffer-or-region)
      ("Y" (lambda ()
             (interactive)
             (transient--make-description
              "Buffer on save"
              ess-r-styler-format-on-save-mode))
       ess-r-styler-format-on-save-mode :transient t)
      ]
     ]
    )
  (define-key ess-r-mode-map (kbd "C-c m") #'transient/ess-r-mode))
#+end_src

* Racket

[[https://github.com/greghendershott/racket-mode][racket-mode]] provides a major mode for editing [[https://racket-lang.org/][Racket]] buffers.

- When in a Racket buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for Racket buffers
(use-package racket-mode
  :defer t
  :config
  (defun racket-mode--maybe-enable-racket-xp-mode ()
    "Enables `racket-xp-mode' if the \"racket\" executable is in system path.
This is useful for only enabling `racket-xp-mode' when the active
environment has Racket installed."
    (when (executable-find "racket")
      (racket-xp-mode 1)))
  (add-hook 'racket-mode-hook #'racket-mode--maybe-enable-racket-xp-mode))

;; major-mode specific transient for racket-mode
(with-eval-after-load 'racket-mode
  (defun transient/racket-mode--visit-definition ()
    "Visits definition of identifier at point in `racket-mode' buffers.
Uses `racket-xp-visit-definition' if `racket-xp-mode' is enabled,
and `racket-repl-visit-definition' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-visit-definition)
      (racket-repl-visit-definition)))

  (defun transient/racket-mode--describe ()
    "Describe identifier at point in `racket-mode' buffers.
Uses `racket-xp-describe' if `racket-xp-mode' is enabled, and
`racket-repl-describe' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-describe)
      (racket-repl-describe)))

  (defun transient/racket-mode--documentation ()
    "Show documentation for identifier at point in `racket-mode' buffers.
Documentation is opened in an external browser.
Uses `racket-xp-documentation' if `racket-xp-mode' is enabled,
and `racket-repl-documentation' otherwise."
    (interactive)
    (if racket-xp-mode
        (racket-xp-documentation)
      (racket-repl-documentation)))

  (transient-define-prefix transient/racket-mode ()
    "`racket-mode' commands."
    ["Racket"
     ["Run"
      ("rr" "Buffer in REPL" racket-run)
      ("rm" "Module in REPL" racket-run-module-at-point)
      ("rR" "File in shell" racket-racket)
      ]
     ["Profiling/Logging"
      ("rp" "Profiler" racket-profile)
      ("rl" "Logger" racket-logger)
      ]
     ["Refactoring"
      ("Rb" "Base requires" racket-base-requires)
      ("Rt" "Tidy requires" racket-tidy-requires)
      ("RT" "Trim requires" racket-trim-requires)
      ]
     ["Editing"
      ("a" "Align" racket-align)
      ("u" "Unalign" racket-unalign)
      ]
     ]
    [
     ["Testing"
      ("tt" "Run tests in REPL" racket-test)
      ("tr" "Raco test" racket-raco-test)
      ]
     ["Help"
      ("." "Visit definition" transient/racket-mode--visit-definition)
      ("C-." "Visit module" racket-visit-module)
      ("," "Unvisit" racket-unvisit)
      ("h" "Describe" transient/racket-mode--describe)
      ("H" "Documentation" transient/racket-mode--documentation)
      ]
     ["Other"
      ("f" "Find collection" racket-find-collection)
      ("p" (lambda ()
             (transient--make-description
              "Paredit mode"
              paredit-mode))
       paredit-mode :transient t)
      ("x" (lambda ()
             (transient--make-description
              "Explain/Explore mode"
              racket-xp-mode))
       racket-xp-mode :transient t)
      ("s" "Compile racket-mode" racket-mode-start-faster)
      ("S" "Revert compile" racket-mode-start-slower)
      ]
     ]
    )

  (define-key racket-mode-map (kbd "C-c m") #'transient/racket-mode))
#+end_src

* Go

- Support for Go buffers
- Add Imenu entry to the menubar in ~go-mode~ buffers
- Install ~gopls~ which is usable with Eglot by running
  ~GO111MODULE=on go get golang.org/x/tools/gopls@latest~
- When in a Go buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for Go buffers
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :config
  ;; set tab width to 4
  (add-hook 'go-mode-hook (lambda () (setq tab-width 4)))
  ;; add Imenu index to menubar
  (with-eval-after-load 'imenu
    (add-hook 'go-mode-hook 'imenu-add-menubar-index))
  ;; major-mode specific transient for Go buffers
  (transient-define-prefix transient/go-mode ()
    "`go-mode' commands."
    ["Go"
     ["Goto"
      ("fa" "Arguments" go-goto-arguments)
      ("fd" "Docstring" go-goto-docstring)
      ("ff" "Function" go-goto-function)
      ("fi" "Imports" go-goto-imports)
      ("fm" "Method recv" go-goto-method-receiver)
      ("fn" "Func name" go-goto-function-name)
      ("fr" "Return vals" go-goto-return-values)
      ]
     ["Imports"
      ("a" "Add" go-import-add)
      ("r" "Remove unused" go-remove-unused-imports)
      ""
      "Playground"
      ("pd" "Download URL" go-download-play)
      ("pb" "Send buffer" go-play-buffer)
      ("pr" "Send region" go-play-region)
      ]
     ["Other"
      ("C" "Test coverage" go-coverage)
      ("D" "Godoc" godoc)
      ("F" "Gofmt" gofmt)
      ("P" "Set project" go-set-project)
      ]
     ]
    )
  (define-key go-mode-map (kbd "C-c m") #'transient/go-mode))
#+end_src

* Common Lisp

- Support for Common Lisp files using [[https://github.com/joaotavora/sly][SLY]] (fork of [[https://slime.common-lisp.dev/][SLIME]])
- The first available implementation among [[https://github.com/roswell/roswell][Roswell]] (an implementation
  manager), [[http://www.sbcl.org/][SBCL]] and [[https://ccl.clozure.com/][Clozure CL]] is used
- When in a Common Lisp buffer, ~C-c m~ invokes a mode-specific
  transient
- TODO
  - [[https://github.com/mmgeorge/sly-asdf][sly-asdf]] (support for editing [[https://asdf.common-lisp.dev/][ASDF]] systems)
  - [[https://github.com/joaotavora/sly-quicklisp][sly-quicklisp]] ([[https://www.quicklisp.org/][Quicklisp]] support)
  - [[https://github.com/joaotavora/sly-macrostep][sly-macrostep]] (expand macros within the source file, may not be needed)

#+begin_src emacs-lisp
;; support for Common Lisp
(use-package sly
  :hook ((lisp-mode sly-mrepl-mode) . enable-paredit-mode)
  :config
  (setq inferior-lisp-program (cond ((executable-find "ros") "ros -Q run")
                                    ((executable-find "sbcl") "sbcl")
                                    ((executable-find "ccl64") "ccl64")
                                    (t "lisp")))
  ;; major-mode specific transient for Common Lisp buffers
  (transient-define-prefix transient/sly-mode ()
    "`sly-mode' commands."
    ["Sly"
     ["Actions"
      ("z" "Connect" sly)
      ("e" "Eval" sly-interactive-eval)
      ("p" "Eval at point" sly-pprint-eval-last-expression)
      ("r" "Eval region" sly-eval-region)
      ("b" "Interrupt" sly-interrupt)
      ("t" "Toggle trace" sly-toggle-trace-fdefinition)
      ("I" "Inspect" sly-inspect)
      ("M-d" "Disassemble" sly-disassemble-symbol)
      ("C-u" "Undefine fn" sly-undefine-function)
      ]
     ["Who"
      ("wa" "Specializes" sly-who-specializes)
      ("wb" "Binds" sly-who-binds)
      ("wc" "Calls" sly-who-calls)
      ("wm" "Macro expands" sly-who-macroexpands)
      ("wr" "References" sly-who-references)
      ("ws" "Sets" sly-who-sets)
      ("ww" "Is called by" sly-calls-who)
      ]
     ["Show"
      ("xc" "Connections" sly-list-connections)
      ("xt" "Threads" sly-list-threads)
      ("x<" "Callers" sly-list-callers)
      ("x>" "Callees" sly-list-callees)
      ("xm" "Macroexpand-1" sly-expand-1)
      ("xM" "Macroexpand-*" sly-macroexpand-all)
      ]
     ["Selector"
      ("xd" "Debugger" sly-db-pop-to-debugger-maybe)
      ("xe" "Events" sly-pop-to-events-buffer)
      ("xi" "REPL" sly-inferior-lisp-buffer)
      ("xl" "Last buf" sly-switch-to-most-recent)
      ("xn" "Next conn" sly-next-connection)
      ("xp" "Prev conn" sly-prev-connection)
      ]
     ]
    [
     ["Doc"
      ("da" "Apropos" sly-apropos)
      ("dd" "Describe" sly-describe-symbol)
      ("df" "Function" sly-describe-function)
      ("dh" "Lookup" sly-documentation-lookup)
      ("dp" "Apropos pkg" sly-apropos-package)
      ("dz" "Apropos all" sly-apropos-all)
      ("d~" "Hyperspec" hyperspec-lookup)
      ]
     ]
    )
  (with-eval-after-load 'sly-stickers
    (transient-append-suffix 'transient/sly-mode '(-1 -1)
      ["Stickers"
       ("ss" "DWIM" sly-stickers-dwim)
       ("sr" "Replay" sly-stickers-replay)
       ("sS" "Fetch" sly-stickers-fetch)
       ("sF" "Forget" sly-stickers-forget)
       ("sd" "Clear defun" sly-stickers-clear-defun-stickers)
       ("sk" "Clear buf" sly-stickers-clear-buffer-stickers)
       ("sR" "Clear region" sly-stickers-clear-region-stickers)
       ]
      ))
  (with-eval-after-load 'sly-trace-dialog
    (transient-append-suffix 'transient/sly-mode '(0 3 -1)
      '("xT" "Trace dialog" sly-trace-dialog)
      ))
  (define-key sly-mode-map (kbd "C-c m") #'transient/sly-mode))
#+end_src

* Clojure

- [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] provides a major mode for editing Clojure buffers
- [[https://docs.cider.mx/cider/index.html][CIDER]] (Clojure(Script) Interactive Development Environment that
  Rocks!) complements ~clojure-mode~, providing additional
  functionality for Clojure development including compiling,
  debugging, running tests, definition and documentation lookup, and
  so on
- Add a Flymake backend for [[https://github.com/borkdude/clj-kondo][clj-kondo]], a linter for Clojure code.
  Enable this backend automatically when editing Clojure buffers.

#+begin_src emacs-lisp
;; basic support for Clojure files
(use-package clojure-mode
  :hook ((clojure-mode . paredit-mode)
         (clojure-mode . subword-mode)))

;; set up Clojure IDE
(use-package cider
  :after clojure-mode
  :hook ((cider-mode . eldoc-mode)
         (cider-repl-mode . eldoc-mode)
         (cider-repl-mode . paredit-mode))
  :init (setq nrepl-log-messages t))

;; linting for Clojure, requires clj-kondo be installed on the system
;; see https://github.com/borkdude/clj-kondo for install instructions
(when (executable-find "clj-kondo")
  ;; Flymake config, adapted from https://github.com/turbo-cafe/flymake-kondor
  (with-eval-after-load 'flymake-quickdef
    (flymake-quickdef-backend flymake-clj-kondo-backend
      :pre-let ((clj-kondo-exec (executable-find "clj-kondo")))
      :pre-check (unless clj-kondo-exec (error "Cannot find clj-kondo executable"))
      :write-type 'pipe
      :proc-form (list clj-kondo-exec "--lint" "-")
      :search-regexp "^.+:\\([[:digit:]]+\\):\\([[:digit:]]+\\): \\([[:alpha:]]+\\): \\(.+\\)$"
      :prep-diagnostic (let* ((lnum (string-to-number (match-string 1)))
                              (lcol (string-to-number (match-string 2)))
                              (severity (match-string 3))
                              (msg (match-string 4))
                              (pos (flymake-diag-region fmqd-source lnum lcol))
                              (beg (car pos))
                              (end (cdr pos))
                              (type (cond
                                     ((string= severity "error") :error)
                                     ((string= severity "warning") :warning)
                                     ((string= severity "info") :note)
                                     (t :note))))
                         (list fmqd-source beg end type msg)))
    (defun flymake-clj-kondo-setup ()
      "Enable clj-kondo backend for Flymake."
      (add-hook 'flymake-diagnostic-functions #'flymake-clj-kondo-backend nil t))
    ;; enable Flymake with clj-kondo backend when editing Clojure
    (with-eval-after-load 'clojure-mode
      (add-hook 'clojure-mode-hook 'flymake-clj-kondo-setup)
      (add-hook 'clojure-mode-hook 'flymake-mode t))))

;; major-mode specific transient for clojure-mode
(with-eval-after-load 'clojure-mode
  (with-eval-after-load 'cider
    (transient-define-prefix transient/clojure-mode/eval ()
      "`clojure-mode' CIDER evaluation commands."
      ["CIDER → Run"
       ["Eval"
        ("r" "Region" cider-eval-region)
        ("n" "Namespace form" cider-eval-ns-form)
        ("e" "Last sexp" cider-eval-last-sexp)
        ("P" "Last sexp (pprint)" cider-pprint-eval-last-sexp)
        ("w" "Last sexp replace" cider-eval-last-sexp-and-replace)
        ("E" "Last sexp to REPL" cider-eval-last-sexp-to-repl)
        ("d" "Defun at point" cider-eval-defun-at-point)
        ("f" "Defun at point (pprint)" cider-pprint-eval-defun-at-point)
        (":" "Minibuffer input" cider-read-and-eval)
        ]
       ["Load"
        ("k" "Buffer" cider-load-buffer)
        ("l" "File" cider-load-file)
        ("p" "All proj ns" cider-load-all-project-ns)
        ]
       ["Other"
        ("i" "Inspect" cider-inspect)
        ("m" "Macroexpand (single level)" cider-macroexpand-1)
        ("M" "Macroexpand (all levels)" cider-macroexpand-all)
        ]
       ]
      )

    (transient-define-prefix transient/clojure-mode/test ()
      "`clojure-mode' CIDER testing commands."
      ["CIDER → Test"
       ("t" "Run" cider-test-run-test)
       ("l" "Run loaded" cider-test-run-loaded-tests)
       ("p" "Run project" cider-test-run-project-tests)
       ("n" "Run namespace" cider-test-run-ns-tests)
       ("r" "Rerun failed" cider-test-rerun-failed-tests)
       ("s" "Show report" cider-test-show-report)
       ]
      )

    (transient-define-prefix transient/clojure-mode/help ()
      "`clojure-mode' CIDER help/documentation commands."
      ["CIDER → Help"
       ("d" "CIDER docs" cider-doc)
       ("c" "Clojure docs" cider-clojuredocs)
       ("C" "Clojure docs (web)" cider-clojuredocs-web)
       ("j" "Java docs (web)" cider-javadoc)
       ("a" "Search symbols" cider-apropos)
       ("s" "Select symbols" cider-apropos-select)
       ("A" "Search docs" cider-apropos-documentation)
       ("S" "Select docs" cider-apropos-documentation-select)
       ]
      )

    (defun transient/clojure-mode/debug--eval-defun-at-point ()
      "Debug version of `cider-eval-defun-at-point'."
      (interactive)
      (cider-eval-defun-at-point t))

    (transient-define-prefix transient/clojure-mode/debug ()
      "`clojure-mode' CIDER debug/documentation commands."
      ["CIDER → Debug"
       ("x" "Eval at point" transient/clojure-mode/debug--eval-defun-at-point)
       ("v" "Toggle trace variable" cider-toggle-trace-var)
       ("n" "Toggle trace namespace" cider-toggle-trace-ns)
       ]
      )

    (defun transient/clojure-mode/repl--clear-output-all ()
      "Clear all output in CIDER REPL buffer."
      (interactive)
      (cider-find-and-clear-repl-output t))

    (transient-define-prefix transient/clojure-mode/repl ()
      "`clojure-mode' CIDER REPL commands."
      ["CIDER → REPL"
       ["Input"
        ("z" "Switch to buffer" cider-switch-to-repl-buffer)
        ("n" "Set namespace" cider-repl-set-ns)
        ("p" "Insert last sexp" cider-insert-last-sexp-in-repl)
        ("x" "Refresh" cider-ns-refresh)
        ]
       ["Output"
        ("o" "Clear" cider-find-and-clear-repl-output)
        ("O" "Clear all" transient/clojure-mode/repl--clear-output-all)
        ]
       [
        "Other"
        ("d" "Describe conn" cider-describe-connection)
        ("b" "Interrupt" cider-interrupt)
        ("Q" "Quit CIDER" cider-quit)
        ]
       ]
      )

    (transient-define-prefix transient/clojure-mode ()
      "`clojure-mode' CIDER commands."
      ["CIDER"
       ["Session"
        ("jc" "Jack-in (Clojure)" cider-jack-in-clj)
        ("js" "Jack-in (ClojureScript)" cider-jack-in-cljs)
        ("jb" "Jack-in (Both)" cider-jack-in-clj&cljs)
        ]
       ["Submenus"
        ("r" "→ REPL" transient/clojure-mode/repl)
        ("e" "→ Run" transient/clojure-mode/eval)
        ("t" "→ Test" transient/clojure-mode/test)
        ("d" "→ Debug" transient/clojure-mode/debug)
        ("h" "→ Help" transient/clojure-mode/help)
        ]
       ]
      )

    (define-key clojure-mode-map (kbd "C-c m") #'transient/clojure-mode)))
#+end_src

* Julia

- Support for Julia buffers
- Julia REPL integration using [[https://github.com/tpapp/julia-repl][julia-repl]] or [[https://github.com/gcv/julia-snail][julia-snail]]
- When in a Julia buffer, ~C-c m~ invokes a mode-specific transient

** Version using ~julia-snail~ to provide Julia REPL support in Emacs.

Note that ~julia-snail~ uses ~vterm~ so install that as well.

#+begin_src emacs-lisp
;;; support for editing Julia buffers
(use-package julia-mode)

;;; provides a Julia IDE
(use-package julia-snail
  ;; julia-mode is automatically installed by this package
  :after vterm
  :hook (julia-mode . julia-snail-mode)
  :config
  ;; enable Julia multimedia integration if images are supported
  (when (display-images-p)
    (setq julia-snail-multimedia-enable t))
  ;; set prompt regexp so that `vterm-next-prompt' and
  ;; `vterm-previous-prompt' work properly (the possible prompts are
  ;; "julia> ", "pkg> ", "shell> " and "help?> ")
  (add-hook 'julia-snail-repl-mode-hook
            (lambda ()
              (setq-local term-prompt-regexp "^[^>\n]*> ")))
  ;; hacky workaround for infinite loop due to `julia-snail-imenu'
  ;; calling itself when updating imenu in a Julia buffer loaded
  ;; through a stored desktop, which will cause a stack overflow
  ;; "Error in menu-bar-update-hook (imenu-update-menubar): (error
  ;; Lisp nesting exceeds `max-lisp-eval-depth')"
  (defun my-julia-snail-fix-imenu-fallback-index-function ()
    "Make sure `julia-snail--imenu-fallback-index-function' is a safe value.

If `julia-snail--imenu-fallback-index-function' is
`julia-snail-imenu', that can create an infinite loop, so in that
scenario revert it to `imenu-default-create-index-function'."
    (if (eq julia-snail--imenu-fallback-index-function
            'julia-snail-imenu)
        (setq julia-snail--imenu-fallback-index-function
              #'imenu-default-create-index-function)))
  (add-hook 'julia-snail-mode-hook
            #'my-julia-snail-fix-imenu-fallback-index-function)
  ;; major-mode specific transient for Julia buffers
  (transient-define-prefix transient/julia-snail-mode ()
    "`julia-snail-mode' commands."
    ["Julia Snail"
     ["Actions"
      ("z" "Connect" julia-snail)
      ("a" "Activate pkg" julia-snail-package-activate)
      ("d" "Documentation lookup" julia-snail-doc-lookup)
      ("m" "Toggle multimedia" julia-snail-multimedia-toggle-display-in-emacs)
      ("R" "Update module cache" julia-snail-update-module-cache)
      ]
     ["Send"
      ("k" "Buffer" julia-snail-send-buffer-file)
      ("c" "Top-level form" julia-snail-send-top-level-form)
      ("r" "Region" julia-snail-send-region)
      ("l" "Line" julia-snail-send-line)
      ("e" "DWIM" julia-snail-send-dwim)
      ]
     ]
    )
  (define-key julia-snail-mode-map (kbd "C-c m") #'transient/julia-snail-mode))
#+end_src

** Version using ~julia-repl~ to provide Julia REPL support in Emacs.

#+begin_src emacs-lisp
;;; support for editing Julia buffers
(use-package julia-mode)

;;; support for running the Julia REPL inside Emacs
(use-package julia-repl
  :after julia-mode
  :hook (julia-mode . julia-repl-mode)
  :config
  ;; interactive function for showing completions in attached REPL
  (defun my-julia-repl-word-at-pt-completions ()
    "Show completions for word at point in `julia-repl' REPL."
    (interactive)
    (if (thing-at-point 'word)
        (let ((line (replace-regexp-in-string
                     "\n\\'"
                     ""
                     (thing-at-point 'line t))))
          (julia-repl--send-string
           (concat "using REPL;"
                   "println(\"\\nCompletions\\n-----------\");"
                   "for c in REPL.REPLCompletions.completions(\""
                   line
                   "\","
                   (number-to-string (current-column))
                   ")[1];"
                   "println("
                   "REPL.REPLCompletions.completion_text(c)"
                   ");"
                   "end"
                   )))
      (message "Nothing to complete at point")))
  (define-key julia-repl-mode-map (kbd "C-c TAB") #'my-julia-repl-word-at-pt-completions) ; "C-c C-i" also works as "C-i" is the same as "TAB"
  ;; julia-repl-mode transient
  (transient-define-prefix transient/julia-repl-mode ()
    "`julia-repl-mode' commands."
    ["Julia REPL"
     [
      ("z" "Connect" julia-repl)
      ("a" "Activate" julia-repl-activate-parent)
      ("b" "Send buffer" julia-repl-send-buffer)
      ("c" "Send region/line" julia-repl-send-region-or-line)]
     [
      ("p" "Change dir" julia-repl-cd)
      ("s" "Set REPL suffix" julia-repl-prompt-set-inferior-buffer-name-suffix)
      ("v" "Set Julia exe" julia-repl-prompt-set-executable-key)
      ("t" "Includet buffer" julia-repl-includet-buffer)
      ]
     [("d" "@doc" julia-repl-doc)
      ("e" "@edit" julia-repl-edit)
      ("l" "List methods" julia-repl-list-methods)
      ("m" "Macroexpand" julia-repl-macroexpand)
      ]
     [("TAB" "complete" my-julia-repl-word-at-pt-completions)
      ]
     ]
    )
  (define-key julia-repl-mode-map (kbd "C-c m") #'transient/julia-repl-mode))
#+end_src

When using ~ansi-term~ as the inferior buffer, there can be issues
using backspace when running ~readline()~ inside the REPL (e.g., on
macOS). One workaround is to add the following to the
=~/.julia/config/startup.jl= file:

#+begin_src julia
# Reset erase and line-kill keys in TTY to their default values
run(`stty ek`)
#+end_src

** Version using ESS (not quite as well-integrated).

#+begin_src emacs-lisp
;; support for editing Julia buffers
(use-package julia-mode)

;; support for interacting with Julia buffers using ESS
(use-package ess
  :init (setq ess-eval-visibly 'nowait
              ;; ess-default-style 'RStudio
              ;; use Flymake only when buffer has an inferior process
              ess-use-flymake 'process)
  :config
  (setq inferior-julia-program (executable-find "julia"))
  (setq inferior-julia-args "--color=yes")
  (require 'ess-julia)
  ;; workaround for https://github.com/emacs-ess/ESS/issues/1151
  ;; ess-julia.el line 292 which is
  ;;   (ess-local-customize-alist     . ess-julia-customize-alist)
  ;; should be
  ;;   (ess-local-customize-alist     . 'ess-julia-customize-alist)
  (setf (alist-get 'ess-local-customize-alist ess-julia-customize-alist) '(quote ess-julia-customize-alist))
  (add-hook 'julia-mode-hook #'ess-julia-mode))
#+end_src

* Zig

- [[https://github.com/ziglang/zig-mode][zig-mode]] for syntax highlighting and indentation
- Eglot has built-in support for [[https://github.com/zigtools/zls][zls]] (Zig language server)
- When in a Zig buffer, ~C-c m~ invokes a mode-specific transient

#+begin_src emacs-lisp
;; support for editing Zig buffers
(use-package zig-mode
  :config
  ;; major-mode specific transient for Zig buffers
  (transient-define-prefix transient/zig-mode ()
    "`zig-mode' commands."
    ["Zig"
     ("F" (lambda ()
             (transient--make-description
              "Format on save"
              zig-format-on-save))
       zig-toggle-format-on-save :transient t)
     ("f" "Format buffer" zig-format-buffer)
     ("t" "Test buffer" zig-test-buffer)
     ("r" "Run" zig-run)
     ("b" "Compile" zig-compile)
     ]
    )
  (define-key zig-mode-map (kbd "C-c m") #'transient/zig-mode))
#+end_src

* Rust

- [[https://github.com/brotzeit/rustic][rustic]] provides a Rust development environment
- Eglot has built-in support for [[https://github.com/rust-lang/rust-analyzer][rust-analyzer]] (default, needs to be installed manually) and [[https://github.com/rust-lang/rls][rls]]

Note:
- May want to increase ~eglot-send-changes-idle-time~ if automatic syntax checking is causing lags

#+begin_src emacs-lisp
;; support for Rust development
(use-package rust-mode)
(use-package rustic
  :after rust-mode
  :config
  (setq rustic-lsp-client 'eglot         ; use Eglot as LSP client
        rustic-lsp-server 'rust-analyzer ; use rust-analyzer for LSP server
        rustic-format-on-save nil)       ; don't autoformat buffer on save
  )

;; major-mode specific transient for `rust-mode'
(with-eval-after-load 'rust-mode
  (defun transient/rust-mode--rustic-popup ()
    "Show `rustic-popup' if `rustic-mode' is enabled."
    (interactive)
    (require 'rustic)
    (funcall-interactively #'rustic-popup))
  (transient-define-prefix transient/rust-mode ()
    "`rust-mode' commands and `rustic-mode' popup entrypoint"
    ["Rust"
     ("u" "Compile" rust-compile)
     ("k" "Check" rust-check)
     ("t" "Test" rust-test)
     ("r" "Run" rust-run)
     ("l" "Run Clippy" rust-run-clippy)
     ("f" "Format buffer" rust-format-buffer)
     ("n" "Goto fmt prob" rust-goto-format-problem)
     ("p" "`rustic-mode' popup" transient/rust-mode--rustic-popup)
     ]
    )
  (define-key rust-mode-map (kbd "C-c m") #'transient/rust-mode))
#+end_src

* Email

This section describes the following email setup to sync and read mail:
- [[https://github.com/gauteh/lieer][Lieer]] is used for syncing with a Gmail source (which requires XOAUTH2).
  - ~gmi pull~ pulls changes from source like new email or tag changes.
  - ~gmi push~ pushes changes to the source like tag changes.
  - ~gmi send~ sends an email via the Gmail API.
- Index emails using [[https://notmuchmail.org/][notmuch]].
- Read and tag email via notmuch using Emacs.
- Send email via lieer using Emacs.

#+begin_example
  ------- push tags with lieer      (gmi push) <------------
  |                                                        |
  v                                                        |
Gmail --> pull mail/tags with lieer (gmi pull) --> notmuch (index) <--> Emacs
  ^                                                                       |
  |                                                                       |
  ------- send mail with lieer      (gmi send) <---------------------------
#+end_example

** Setting up lieer and notmuch                                    :external:

Create a build directory (say =~/build=, change as needed).

#+begin_example
$ mkdir -p ~/build
#+end_example

If using MacPorts on macOS:

#+begin_example
$ sudo port install notmuch
#+end_example

If using Linux, it is installable via the package manager or on Debian-based distributions (replace =~/build= as needed):

#+begin_example
$ sudo apt install libxapian-dev libgmime-3.0-dev libtalloc-dev zlib1g-dev python3-sphinx texinfo install-info
$ cd ~/build
$ git clone git://git.notmuchmail.org/git/notmuch
$ cd notmuch
$ make
$ cd ~/.local/bin
$ ln -s /path/to/notmuch/notmuch
#+end_example

Create the mail directory at =~/.mail=.

Edit =~/.notmuch-config= and modify the ~[new]~ section as follows:

#+begin_example
[new]
tags=
ignore=/.*[.](json|lock|bak)$/
#+end_example

Next create a virtual environment for ~lieer~ and activate it.

#+begin_example
$ conda create -n email python=3.7
$ conda activate email
#+end_example

Install the Python bindings for ~notmuch~. If possible, ~git checkout~
the commit or tag corresponding to the version of ~notmuch~ installed
for maximum compatibility before installing the binding via ~pip~ (the
notmuch repo may already be cloned if it was installed from source).

*Note*: ~pip install -e .~ or ~setup.py install -e~ installs packages
in editable mode (setuptools "develop mode").

#+begin_example
$ cd ~/build
$ git clone git://git.notmuchmail.org/git/notmuch
$ cd notmuch/bindings/python
$ pip install .
#+end_example

Install ~lieer~.

#+begin_example
$ cd ~/build
$ git clone https://github.com/gauteh/lieer.git
$ cd lieer
$ pip install .
#+end_example

*Linux note*: If notmuch was compiled from source but not installed
onto the system, create a wrapper script that calls ~gmi~ with
~LD_LIBRARY_PATH=/path/to/notmuch/lib/~ instead. (Change the path
=$HOME/build/notmuch= as needed.)

#+begin_example
$ cat > ~/.local/bin/gmi <<EOF
#!/bin/bash

# Wrapper script for running gmi

CONDA_INSTALL_DIR=${HOME}/mambaforge
CONDA_PYNVIM_ENV=${CONDA_DEFAULT_ENV:-email}

source "${CONDA_INSTALL_DIR}/etc/profile.d/conda.sh"
conda activate "${CONDA_PYNVIM_ENV}"

LD_LIBRARY_PATH=$HOME/build/notmuch/lib gmi "\$@"
EOF
$ chmod +x ~/.local/bin/gmi
#+end_example

*End Linux note*.

*macOS note*: After doing the above, lieer can run using a command ~gmi~.
For macOS, because ~notmuch~ was installed with MacPorts and lieer
within its own environment, ~gmi~ needs to be called from within the
virtual environment container and with ~DYLD_FALLBACK_LIBRARY_PATH~
set to MacPort's library directory at =/opt/local/lib= so it can find
the ~notmuch~ libraries, for example:

#+begin_example
DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/mambaforge/envs/email/bin/gmi
#+end_example

To avoid having to specify this every time ~gmi~ needs to be called,
a wrapper script can be used (change the paths as appropriate).

#+begin_example
#!/bin/sh

# Wrapper script for running gmi

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib ~/mambaforge/envs/email/bin/gmi "$@"
#+end_example

Run the following to create such a file in a directory on the system
path (say =~/.local/bin=), after which calling ~gmi~ directly should
work as expected.

#+begin_example
$ cat > ~/.local/bin/gmi <<EOF
#!/bin/sh

# Wrapper script for running gmi

CONDA_INSTALL_DIR=${HOME}/mambaforge
CONDA_PYNVIM_ENV=${CONDA_DEFAULT_ENV:-email}

source "${CONDA_INSTALL_DIR}/etc/profile.d/conda.sh"
conda activate "${CONDA_PYNVIM_ENV}"

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib gmi "\$@"
EOF
$ chmod +x ~/.local/bin/gmi
#+end_example

*End macOS note*.

Deactivate the virtual environment and build the ~notmuch~ database.

#+begin_example
$ conda deactivate email
$ cd ~/.mail
$ notmuch new
#+end_example

Initialize the ~notmuch~ database.

#+begin_example
$ cd ~
$ mkdir .mail
$ notmuch new
#+end_example

Create a local mail directory for the account (replace
=username@emailserver.com= with the actual email address).

#+begin_example
$ cd ~/.mail
$ mkdir username@emailserver.com
$ cd username@emailserver.com
#+end_example

Two options for setting up and authenticating the email account in lieer:

1. Run ~gmi init username@emailserver.com~ which uses the developer's
   client ID.
2. Create a Google dev OAuth client ID, download its secrets file, and
   run ~gmi init -c your-client-secrets.json username@emailserver.com~
   to use the client secrets file.

Option 2 is typically better due to the higher likelihood of running
up against potential usage limits on the shared client ID key, so that
is covered here.

- Go to [[https://console.developers.google.com/flows/enableapi?apiid=gmail][this link]] to create a new Gmail project and API credentials for it.
- Agree to the terms and conditions.
- Continue and navigate to the project. Click the *Credentials* entry
  on the sidebar.
- /Which API are you using?/ \to Gmail API
- /Where will you be calling from?/ \to Other UI (e.g. Windows, CLI tool)
- /What data will you be accessing?/ \to User data
- Click *What credentials do I need?*.
- Click *SET UP CONSENT SCREEN* which opens an /OAuth consent screen/
  tab.
- Select *Internal* if a GSuite user, otherwise *External*.
- In the next screen, fill in the application name (like ~my-email-app~)
  and click *Save*.
- Close the tab and return to the previous one on the /Credentials/ page.
- Refresh the page or click again on *Credentials* and the page
  layout should now be a different one.
# - Click *+ CREATE CREDENTIALS* followed by *API KEY*.
# - Note down the API key.
# - Make sure to edit the API key settings to restrict it to only Gmail APIs.
- Click *+ CREATE CREDENTIALS* followed by *OAuth client ID*.
  Set application type to *Desktop app* and name the application
  (like ~my-email-app~).
- After setting it up, click the download button to download that
  OAuth client ID secret as a JSON file.

When done, move the client secret file (replace ~CLIENT_ID~ with the
actual client id) to the local mailbox directory and use it to
authenticate.

#+begin_example
$ mv ~/Downloads/client_secret_CLIENTID.json
$ gmi init -c client_secret_CLIENTID.json username@emailserver.com
#+end_example

Now retrieve email using ~gmi~.

#+begin_example
$ gmi pull
#+end_example

If there's a need to change client IDs or reset the client secret, it
is possible to reauthenticate using a new client secret file.

#+begin_example
$ gmi auth -f -c new_client_secret_CLIENTID.json
#+end_example

*Aside*

By default the custom tags in ~new.tags~ in the notmuch configuration
that are populated for all new emails are also pushed to the remote.

As an example, suppose notmuch is configured to add the ~new~ tag to
any new email pulled per the following section in =~/.notmuch-config=
(note that for Gmail, it already has the ~unread~ tag so this is not
really that needed).

#+begin_example
[new]
tags=new
ignore=/.*[.](json|lock|bak)$/
#+end_example

Lieer can be configured to not push the custom tag ~new~ when syncing
for each specific email source (so that the source does not get
populated with extraneous tags) by running the following in the email
source directory.

#+begin_example
$ gmi set --ignore-tags-local new
#+end_example

*Back from aside*

Next, configure a hook that runs ~gmi pull~ when ~notmuch new~ is called.

First, make a ~hooks~ directory in the notmuch database.

#+begin_example
$ mkdir -p ~/.mail/.notmuch/hooks
#+end_example

Next create the file =~/.mail/.notmuch/hooks/pre-new= with the
following contents (change the local mailbox directory name and ~gmi~
path as relevant).

#+begin_example
#/bin/sh
cd ~/.mail/username@emailserver.com
~/.local/bin/gmi sync
#+end_example

Modify its permissions so it is executable.

#+begin_example
$ chmod +x ~/.mail/.notmuch/hook/pre-new
#+end_example

After setting this up, running ~notmuch new~ will sync new mail to the database.

(Adapted from [[http://www.johnborwick.com/2019/02/09/notmuch-gmailieer.html][this blog post]] and the lieer [[https://github.com/gauteh/lieer/blob/master/docs/index.md][documentation]].)

** Lieer and notmuch usage notes

*** Changing local or remote ignored tags in lieer Gmail synchronization

When changing local or remote ignored tags (for example using commands
~gmi set --ignore-tags-remote~ or ~gmi set --ignore-tags-local~), it
is best to do a full push or push (doing a dry run first to make sure
the changes are the ones that are desired).

The reason is that if the ignored tags were changed after the initial
sync, this will not update already synced messages.

Before changing anything, make sure the local and remote respositories
are fully synchronized.

After ~gmi set --ignore-tags-remote~ or editing the JSON config to the
same effect:

#+begin_example
$ gmi pull -f --dry-run
$ gmi pull -f
#+end_example

And after ~gmi set --ignore-tags-local~ or editing the JSON config to
the same effect:

#+begin_example
$ gmi push -f --dry-run
$ gmi push -f
#+end_example

Also, most importantly make sure to *only change one at a time* (don't
change both local and remote ignored tags at the same time).

A full push or pull is also a heavy handed fix when tags end up not
synchronizing in general.

*** Regular background mail syncs using launchd in macOS           :external:

On most Linux and Unix machines, it is easiest to have ~notmuch new~
run in the backend according to a schedule using ~cron~ to sync mail
automatically.

On macOS, it is recommended to use [[https://support.apple.com/guide/terminal/script-management-with-launchd-apdc6c1077b-5d5d-4d35-9c19-60f2397b2369/mac][launchd]] ([[https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html][more info]]) instead.
Create the file =~/Library/LaunchAgents/local.notmuch.new.plist= with
the following contents that specifies the ~notmuch new~ launchd job.
This provided configuration makes the next assumptions.
- The ~notmuch~ binary was installed to =/opt/local/bin/notmuch= which
  is the default location using MacPorts. Modify this as needed.
- ~notmuch new~ is to be run every 600 seconds. If changing this run
  interval, modify both ~StartInterval~ and ~ThrottleInterval~ to the
  desired time interval in seconds; note that due to a [[https://gist.github.com/dabrahams/4092951][some]] [[https://alvinalexander.com/mac-os-x/mac-os-x-startinterval-broken-launchctl-throttleinterval/][bugs]], it is
  best to /make sure both values are set/.

#+begin_example
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <!-- Name of job -->
  <key>Label</key>
  <string>local.notmuch.new</string>
  <!-- Command to run -->
  <key>ProgramArguments</key>
  <array>
    <string>/opt/local/bin/notmuch</string>
    <string>new</string>
  </array>
  <!-- Run interval in seconds -->
  <key>StartInterval</key>
  <integer>600</integer>
  <!-- Throttle, https://alvinalexander.com/mac-os-x/mac-os-x-startinterval-broken-launchctl-throttleinterval/ -->
  <key>ThrottleInterval</key>
  <integer>600</integer>
</dict>
</plist>
#+end_example

To load the mail sync job, run the following.

#+begin_example
$ launchctl load ~/Library/LaunchAgents/local.notmuch.new.plist
#+end_example

To see if the mail sync job is currently loaded, run the following.

#+begin_example
$ launchctl list | grep local.notmuch.new
#+end_example

To unload the mail sync job, do the following.

#+begin_example
$ launchctl unload ~/Library/LaunchAgents/local.notmuch.new.plist
#+end_example

** Reading email using notmuch.el                 :workaround:external:melpa:

Notmuch has an Emacs [[https://notmuchmail.org/notmuch-emacs/][client]].

*Configuration*:
- Prompt for which account to use when sending email.
- When archiving, remove the ~inbox~ tag.
- Show 10 most recent searches in the hello screen.
- Use ~,~ as the thousands separator character.
- Sort search results by date descending (default is date ascending).
- Don't show notmuch logo.
- Set up replies so text being replied to is properly quoted by Gmail
  (it automatically assumes duplicated text should be quoted).

*Notes*:
- It is best to symlink or copy over the contents of the =emacs=
  folder from the Notmuch codebase into the =site-lisp/notmuch= folder
  in ~user-emacs-directory~ (or some dir in ~load-path~) than using
  the MELPA version, so the Elisp code matches the system binary. (If
  symlinking, change the path =~/build/notmuch/emacs= as needed.)

#+begin_example
$ cd ~/.emacs.d/site-lisp
$ ln -s ~/build/notmuch/emacs notmuch
#+end_example

#+name: notmuch
#+begin_src emacs-lisp
;; configure Notmuch email client
(when (executable-find "notmuch")
  (use-package notmuch
    :ensure nil ;; in site-lisp directory
    :bind (("C-c N" . notmuch)
           :map notmuch-show-mode-map
           ("d" . notmuch-show--toggle-trash-tag)
           ("SPC" . notmuch-show-advance) ; don't archive by default when advancing
           ("S-SPC" . notmuch-show-rewind)
           :map notmuch-search-mode-map
           ("d" . notmuch-search--toggle-trash-tag)
           ("S-SPC" . notmuch-search-scroll-down)
           :map notmuch-tree-mode-map
           ("d" . notmuch-tree--toggle-trash-tag)
           ("S-SPC" . notmuch-tree-scroll-message-window-back))
    :init
    (setq notmuch-always-prompt-for-sender t
          notmuch-archive-tags '("-inbox")
          notmuch-hello-recent-searches-max 10
          notmuch-hello-thousands-separator "," ;; US convention
          notmuch-search-oldest-first nil ;; sort date descending
          notmuch-search-result-format `(("date" . "%12s ")
                                         ("count" . "%-7s ")
                                         ("authors" . "%-20s ")
                                         ("tags" . "%s ")
                                         ("subject" . "%s"))
          notmuch-show-logo nil
          ;; workaround for Notmuch using SVG icons when unsupported
          ;; https://emacs.stackexchange.com/questions/14875/notmuch-mode-very-slow-in-emacs-mac-port-railwaycat
          notmuch-tag-formats '(("unread"
                                 (propertize tag 'face 'notmuch-tag-unread))
                                ("flagged"
                                 (propertize tag 'face 'notmuch-tag-flagged)))
          notmuch-tree-result-format `(("date" . "%12s  ")
                                       ("authors" . "%-20s")
                                       ((("tree" . "%s")
                                         ("subject" . "%s"))
                                        . " %-54s ")
                                       ("tags" . "%s")))
    :config
    ;; unbind "<C-tab>" as it conflicts with the `tab-next' binding
    (define-key notmuch-hello-mode-map (kbd "<C-tab>") nil)
    (define-key notmuch-show-mode-map (kbd "<C-tab>") nil)
    ;; toggle deletion of message from the Show view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-show--toggle-trash-tag ()
      "Toggle trash tag for message in the Show view."
      (interactive)
      (if (member "trash" (notmuch-show-get-tags))
          (notmuch-show-tag (list "-trash"))
        (notmuch-show-tag (list "+trash" "-inbox"))))
    ;; toggle deletion of thread from the Search view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-search--toggle-trash-tag (&optional beg end)
      "Toggle trash tag for thread(s) in the Search view.
If applying to a selected region, it adds or removes the trash
tag based on the entry at the beginning of the region."
      (interactive (notmuch-interactive-region))
      (if (member "trash" (notmuch-search-get-tags beg))
          (notmuch-search-tag (list "-trash") beg end)
        (notmuch-search-tag (list "+trash" "-inbox") beg end)))
    ;; toggle deletion of thread from the Tree view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-tree--toggle-trash-tag ()
      "Toggle trash tag for message in the Tree view."
      (interactive)
      (if (member "trash" (notmuch-tree-get-tags))
          (notmuch-tree-tag (list "-trash"))
        (notmuch-tree-tag (list "+trash" "-inbox"))))))
#+end_src

** Asynchronous mail polling in Notmuch

Create async version of ~notmuch-poll~ and overwrite default bindings.

Adapted from this [[https://notmuchmail.org/pipermail/notmuch/2020/029248.html][patch]] posted to the Notmuch email group.

#+name: notmuch-poll-async
#+begin_src emacs-lisp
;; async version of `notmuch-poll' that sends a message when complete
;; buffer should be manually refreshed with "g" after polling is done
(with-eval-after-load 'notmuch
  (defun notmuch-poll-async ()
    "Like `notmuch-poll' but asynchronous."
    (interactive)
    (notmuch-start-notmuch
     "notmuch-new"
     nil
     (lambda (_proc change)
       (message (concat "notmuch-new: %s"
                        "\n"
                        "Please refresh buffer as needed.")
                change))
     "new")
    (message "notmuch-new: started"))
  ;; overwrite default "G" bindings in notmuch modes
  (define-key notmuch-common-keymap (kbd "G") #'notmuch-poll-async))
#+end_src

** Shortening names in Search view for threads with multiple authors

Advise ~:around~ ~notmuch-search-insert-authors~ to show the first and
last author of a thread, and abbreviate and truncate each of their
names in the ~authors~ param to better fit the author column width.

Regexp name transforms adapted from [[https://scripter.co/narrowing-the-author-column-in-magit/][here]].

#+name: notmuch-shorten-multiple-author-names
#+begin_src emacs-lisp
;; advise `notmuch-search-insert-authors' so that when a thread has
;; multiple authors, only the first and last message authors are
;; displayed and their names are abbreviated to fit the column width
(with-eval-after-load 'notmuch
  (defvar notmuch--abbreviate-person-name-width
    (let* ((format-string (string-trim
                           (cdr
                            (assoc "authors"
                                   notmuch-search-result-format))))
           (authors-width (string-width (format format-string ""))))
      (- (/ authors-width 2) 1))
    "Width of each author in Notmuch Search view when more than one.
Should be N/2-1, N is the width of the Search view author column.")

  (defun notmuch--abbreviate-person-name (name &optional maxlen)
    "Abbreviates a person NAME.
The result will have `notmuch--abbreviate-person-name-width'
characters or less. This is done by using the initial of the
person's first name and shortening the person's last name as
necessary; also handles emails."
    (let* ((maxlen (or maxlen notmuch--abbreviate-person-name-width))
           (split-idx (string-match-p "\[,@\]" name))
           (split-char (if split-idx
                           (substring name split-idx (+ split-idx 1))
                         "")))
      (cond ((string-equal split-char "@") ;; user.name@server.com -> u name
             (let ((name-part (substring name 0 split-idx)))
               (notmuch--abbreviate-person-name name-part)))
            (t
             ;; is-comma-split t? lastname, firstname -> f lastname
             ;; is-comma-split f? firstname lastname -> f lastname
             ;;                   OR firstname -> firstname
             (let* ((is-comma-split (string-equal split-char ","))
                    (regexp (if is-comma-split
                                "\\(.*?\\), *\\(.\\).*"
                              "\\(.\\).*?[. ]+\\(.*\\)"))
                    (replacement (if is-comma-split
                                     "\\2 \\1"
                                   "\\1 \\2"))
                    (abbrev-name (replace-regexp-in-string regexp
                                                           replacement
                                                           name))
                    (further-truncate (> (length abbrev-name)
                                         maxlen)))
               (if further-truncate
                   (concat
                    (substring abbrev-name
                               0
                               (- maxlen 2))
                    "..")
                 abbrev-name))))))

  (defun notmuch-search-insert-authors--around-abbreviate (orig-fun &rest args)
    "Advice for `notmuch-search-insert-authors' to abbreviate names.
Extracts the authors field from ARGS, abbreviates its elements
using `notmuch--abbreviate-person-name' and calls ORIG-FUN
replacing the original authors with their abbreviated names.
Assumes ', ' is used to separate authors and names are not of the
form 'Lastname, Firstname'."
    (seq-let [format-string authors] args
      (save-match-data
        (let ((author-list (mapcar (lambda (s) (replace-regexp-in-string
                                                "'" "" s)) ;; no single quotes
                                   (split-string authors ", "))))
          (if (> (length author-list) 1)
              (let* ((oldest-newest-authors (cons (car author-list)
                                                  (last author-list)))
                     (abbrev-authors
                      (mapconcat 'identity
                                 (mapcar 'notmuch--abbreviate-person-name
                                         oldest-newest-authors)
                                 ", ")))
                (apply orig-fun (list format-string abbrev-authors)))
            (apply orig-fun args))))))

  ;; abbreviate names when there are multiple authors
  (advice-add 'notmuch-search-insert-authors :around
              'notmuch-search-insert-authors--around-abbreviate))
#+end_src

** Toggling visibility of search tags in the notmuch search results list

Add ability to toggle search tags in the notmuch search results.

When turned on, the search results will not show tags that
are part of the search query, the rationale being the user knows
what they searched for and because the search query.

However, tag modifications are always shown. Examples:
- When the search query is ~tag:inbox~ and the ~inbox~ tag removed
  from a message, +~inbox~+ is displayed for that message.
- When the search query is ~not tag:inbox~ and the ~inbox~ tag is
  added to a message, _~inbox~_ is displayed for that message.

This has some similarities to what Gmail does with labels in search
results, hiding labels that are part of the search query.

*Configuration*:
- Turned on by default.
- ~C-t~ in a search results buffer toggles search tag visibility.

#+name: notmuch-toggle-search-tags-in-results
#+begin_src emacs-lisp
;; notmuch extension to toggle search tag visibility in results by
;; advising the search listings field insertion function to remove
;; tags in the search query from the displayed tags except for those
;; modified after the search
(with-eval-after-load 'notmuch

  (defun notmuch--extract-search-tags (query)
    "Extracts out a list of tags from a given notmuch search QUERY.
More concretely, it identifies tokens that begin with the prefix
'is:' or 'tag:' and returns them as a list without the prefix.
Returns nil if there are no tags in the query."
    (seq-filter
     'identity
     (mapcar (lambda (x)
               (if (string-match "^\\(tag\\|is\\):\\([^ ]*\\)" x)
                   (match-string 2 x)
                 nil))
             (split-string query))))

  (defun string-equal-except (except-list s1 s2)
    "Tests if strings S1 are S2 the same, but return nil if
either is in EXCEPT-LIST."
    (if (or (member s1 except-list)
            (member s2 except-list))
        nil
      (string-equal s1 s2)))

  (defun notmuch--filter-common-search-tags (tags orig-tags query)
    "Returns '(TAGS ORIG-TAGS) with search tags in QUERY filtered out.
Only query search tags appearing in both TAGS and ORIG-TAGS are
removed."
    (let ((add-tags (cl-set-difference tags orig-tags :test 'string-equal))
          (rem-tags (cl-set-difference orig-tags tags :test 'string-equal))
          (search-tags (notmuch--extract-search-tags query)))
      (list (cl-set-difference tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      add-tags))
            (cl-set-difference orig-tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      rem-tags)))))

  (defun notmuch-search-insert-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-search-insert-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-search-insert-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string result] args
      (if (string-equal field "tags")
          (let ((base-tags (plist-get result :tags))
                (base-orig-tags (plist-get result :orig-tags))
                (query (if (boundp 'notmuch-search-query-string)
                           notmuch-search-query-string
                         nil)))
            (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                       base-tags base-orig-tags query)
              (insert (format format-string
                              (notmuch-tag-format-tags tags orig-tags)))))
        (apply orig-fun args))))

  (defun notmuch-tree-format-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-tree-format-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-tree-format-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string msg] args
      (cond ((listp field) (apply orig-fun args))
            ((string-equal field "tags")
             (let ((base-tags (plist-get msg :tags))
                   (base-orig-tags (plist-get msg :orig-tags))
                   (face (if (plist-get msg :match)
                             'notmuch-tree-match-tag-face
                           'notmuch-tree-no-match-tag-face))
                   (query (if (boundp 'notmuch-tree-basic-query)
                              notmuch-tree-basic-query
                            nil)))
               (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                          base-tags base-orig-tags query)
                 (format format-string
                         (notmuch-tag-format-tags tags orig-tags face)))))
            (t (apply orig-fun args)))))

  ;; using a global variable helps in correcting scenarios where
  ;; individual tag visibility states get misaligned
  (defvar notmuch--search-tags-visible t
    "Indicates if search tags are visible in Notmuch Tree and Search views.")

  (defun notmuch--toggle-search-tag-visibility ()
    "Toggle visibility of search tags in the Search and Tree views.
Assumes "
    (interactive)
    (let ((current-hide-search-tags
           (advice-member-p #'notmuch-search-insert-field--filter-search-tags
                            'notmuch-search-insert-field))
          (current-hide-tree-tags
           (advice-member-p #'notmuch-tree-format-field--filter-search-tags
                            'notmuch-tree-format-field)))
      ;; toggle Search view advice as needed
      (cond
       ((and current-hide-search-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-search-insert-field
                       #'notmuch-search-insert-field--filter-search-tags))
       ((and (not current-hide-search-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-search-insert-field :around
                    #'notmuch-search-insert-field--filter-search-tags)))
      ;; toggle Tree view advice as needed
      (cond
       ((and current-hide-tree-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-tree-format-field
                       #'notmuch-tree-format-field--filter-search-tags))
       ((and (not current-hide-tree-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-tree-format-field :around
                    #'notmuch-tree-format-field--filter-search-tags)))
      (setq notmuch--search-tags-visible (not notmuch--search-tags-visible))
      (notmuch-refresh-all-buffers)
      (message (if notmuch--search-tags-visible
                   "Search tags visible."
                 "Search tags hidden."))))

  ;; enable filtering of search tags in the Search and Tree views by default
  (notmuch--toggle-search-tag-visibility)

  ;; bindings to toggle visibility of search tags in the results
  (dolist (keymap (list notmuch-hello-mode-map ; see https://stackoverflow.com/q/27084989
                        notmuch-search-mode-map
                        notmuch-tree-mode-map))
    (define-key keymap (kbd "C-t")
      #'notmuch--toggle-search-tag-visibility)))
#+end_src

** Sending mail with notmuch.el using Lieer as the sendmail program :external:

Lieer can be used to send outgoing mail through the Gmail account
([[https://github.com/gauteh/lieer/wiki/GNU-Emacs-and-Lieer][instructions]]).

First, create an executable wrapper script around ~gmi send~ that uses
the appropriate email account for sending email. Replace the paths to
the ~gmi~ binary (including setting environment variables to the path
to where the notmuch compiled .so library files are located) and
=$HOME/.mail/username@emailserver.com= (path to the account directory)
as needed. The =gmi-send= wrapper script can also be located somewhere
else on ~$PATH~ other than =~/.local/bin= as desired.

*Linux*:

#+begin_example
$ cat > ~/.local/bin/gmi-send <<EOF
#!/bin/sh

# Wrapper script for running gmi

CONDA_INSTALL_DIR=${HOME}/mambaforge
CONDA_PYNVIM_ENV=${CONDA_DEFAULT_ENV:-email}

source "${CONDA_INSTALL_DIR}/etc/profile.d/conda.sh"
conda activate "${CONDA_PYNVIM_ENV}"

LD_LIBRARY_PATH=$HOME/build/notmuch/lib gmi send --quiet -t -C $HOME/.mail/username@emailserver.com "\$@"
EOF
$ chmod +x ~/.local/bin/gmi-send
#+end_example

*macOS*:

#+begin_example
$ cat > ~/.local/bin/gmi-send <<EOF
#!/bin/sh

# Wrapper script for running gmi

CONDA_INSTALL_DIR=${HOME}/mambaforge
CONDA_PYNVIM_ENV=${CONDA_DEFAULT_ENV:-email}

source "${CONDA_INSTALL_DIR}/etc/profile.d/conda.sh"
conda activate "${CONDA_PYNVIM_ENV}"

DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib gmi send --quiet -t -C $HOME/.mail/username@emailserver.com "\$@"
EOF
$ chmod +x ~/.local/bin/gmi-send
#+end_example

Next, create a notmuch local configuration file =notmuch-config.el=
file in the ~user-emacs-directory~ with the following contents.
Usually this is =~/.emacs.d/notmuch-config.el= filepath. Change the
~gmi-send~ executable path =~/.local/bin/gmi-send= as appropriate.

#+begin_example
;;; notmuch-config.el --- Notmuch config file -*- lexical-binding: t -*-

;;; Commentary:

;; Notmuch configuration file, helpful for avoiding clutter in the
;; regular config files due to machine-specific notmuch settings.
;; This file is loaded when notmuch starts up in Emacs.

;;; Code:

;; configure sendmail to use lieer to send email
(setq sendmail-program (expand-file-name "~/.local/bin/gmi-send")
      ;; need the following, otherwise `sendmail-send-it' tries to
      ;; call "gmi send" with unsupported "-oep" and "-odi" options
      sendmail-error-reporting-interactive nil)

;; don't save outgoing mail locally, as sent mails are saved in Gmail
;; automatically
(setq notmuch-fcc-dirs nil)

;; kill message composition buffers after sending
(setq message-kill-buffer-on-exit t)

(provide 'notmuch-config)

;;; notmuch-config.el ends here
#+end_example

** OrgMsg for composing HTML emails                                   :melpa:

[[https://github.com/jeremy-compostella/org-msg][OrgMsg]] provides HTML email composition capability.
Calling ~org-msg-mode~ toggles whether to use HTML composition for emails
by (by default, it is off).

Since this configuration only uses notmuch for email, load OrgMsg
after notmuch (which has the effect of not loading it if notmuch is
not loaded).

#+name: org-msg
#+begin_src emacs-lisp
;; provides HTML email composition using Org-mode
;; for autogreeting, set `org-msg-greeting-fmt' to "\nHi *%s*,\n\n"
(use-package org-msg
  :after notmuch ; only load if notmuch package is also loaded
  :init
  (setq org-msg-options (concat "html-postamble:nil H:5 num:nil ^:{} "
                                "toc:nil author:nil email:nil \\n:t")
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt nil
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '(text html)
        org-msg-text-plain-alternative t
        org-msg-convert-citation t)
  :config
  ;; enable HTML email message composition
  (org-msg-mode 1)
  ;; bindings to toggle HTML email message composition
  (dolist (keymap (list notmuch-hello-mode-map
                        notmuch-search-mode-map
                        notmuch-show-mode-map
                        notmuch-tree-mode-map))
    (define-key keymap (kbd "M") #'org-msg-mode)))
#+end_src

*** org-msg-edit-mode transient

OrgMsg message compose major mode transient. This major mode is in
effect when editing message buffers with ~org-msg-mode~ enabled.

#+name: org-msg-edit-mode-transient
#+begin_src emacs-lisp
;; major-mode specific transient for org-msg-edit-mode
(with-eval-after-load 'org-msg
  (transient-define-prefix transient/org-msg-edit-mode ()
    "`org-msg-edit-mode' commands."
    ["OrgMsg"
     ["Jump to"
      ("f" "From" message-goto-from)
      ("t" "To" message-goto-to)
      ("c" "Cc" message-goto-cc)
      ("B" "Bcc" message-goto-bcc)
      ("F" "Fcc" message-goto-fcc)
      ("S" "Subject" message-goto-subject)
      ("b" "Body" org-msg-goto-body)
      ]
     ["Action"
      ("C-a" "Manage attachments" org-msg-attach)
      ("C-e" "Preview" org-msg-preview)
      ("C-c" "Send" org-ctrl-c-ctrl-c)
      ("C-k" "Kill" org-msg-edit-kill-buffer)
      ]
     ]
    )
  (define-key org-msg-edit-mode-map (kbd "C-c m") #'transient/org-msg-edit-mode))
#+end_src

** Link to notmuch messages in Org-mode documents                  :external:

[[https://code.orgmode.org/bzg/org-mode/src/master/contrib/lisp/ol-notmuch.el][ol-notmuch]] is an Org-mode contributed package that adds Org-mode
support for notmuch links.

~ol-notmuch~ is installed either by installing the ~org-contrib~
package from the Org package repository, or by downloading the
=ol-notmuch.el= file to a directory on the ~load-path~ like a folder
in the =site-lisp/= subdirectory of ~emacs-user-directory~.

Loading the packages enables support for following notmuch links in
Org-mode buffers and storing links to searches and messages using
~org-store-link~.

*Note*: This requires Org mode 9.2.3 or newer.

#+name: ol-notmuch
#+begin_src emacs-lisp
(condition-case nil
    (require 'ol-notmuch)
  (error (message "ol-notmuch is not installed or requires Org 9.2.3+")))
#+end_src

** Consolidated code

All the code needed for ~init-local.el~ in one place.

#+begin_src emacs-lisp
;; configure Notmuch email client
(when (executable-find "notmuch")
  (use-package notmuch
    :ensure nil ;; in site-lisp directory
    :bind (("C-c N" . notmuch)
           :map notmuch-show-mode-map
           ("d" . notmuch-show--toggle-trash-tag)
           ("SPC" . notmuch-show-advance) ; don't archive by default when advancing
           ("S-SPC" . notmuch-show-rewind)
           :map notmuch-search-mode-map
           ("d" . notmuch-search--toggle-trash-tag)
           ("S-SPC" . notmuch-search-scroll-down)
           :map notmuch-tree-mode-map
           ("d" . notmuch-tree--toggle-trash-tag)
           ("S-SPC" . notmuch-tree-scroll-message-window-back))
    :init
    (setq notmuch-always-prompt-for-sender t
          notmuch-archive-tags '("-inbox")
          notmuch-hello-recent-searches-max 10
          notmuch-hello-thousands-separator "," ;; US convention
          notmuch-search-oldest-first nil ;; sort date descending
          notmuch-search-result-format `(("date" . "%12s ")
                                         ("count" . "%-7s ")
                                         ("authors" . "%-20s ")
                                         ("tags" . "%s ")
                                         ("subject" . "%s"))
          notmuch-show-logo nil
          ;; workaround for Notmuch using SVG icons when unsupported
          ;; https://emacs.stackexchange.com/questions/14875/notmuch-mode-very-slow-in-emacs-mac-port-railwaycat
          notmuch-tag-formats '(("unread"
                                 (propertize tag 'face 'notmuch-tag-unread))
                                ("flagged"
                                 (propertize tag 'face 'notmuch-tag-flagged)))
          notmuch-tree-result-format `(("date" . "%12s  ")
                                       ("authors" . "%-20s")
                                       ((("tree" . "%s")
                                         ("subject" . "%s"))
                                        . " %-54s ")
                                       ("tags" . "%s")))
    :config
    ;; unbind "<C-tab>" as it conflicts with the `tab-next' binding
    (define-key notmuch-hello-mode-map (kbd "<C-tab>") nil)
    (define-key notmuch-show-mode-map (kbd "<C-tab>") nil)
    ;; toggle deletion of message from the Show view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-show--toggle-trash-tag ()
      "Toggle trash tag for message in the Show view."
      (interactive)
      (if (member "trash" (notmuch-show-get-tags))
          (notmuch-show-tag (list "-trash"))
        (notmuch-show-tag (list "+trash" "-inbox"))))
    ;; toggle deletion of thread from the Search view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-search--toggle-trash-tag (&optional beg end)
      "Toggle trash tag for thread(s) in the Search view.
If applying to a selected region, it adds or removes the trash
tag based on the entry at the beginning of the region."
      (interactive (notmuch-interactive-region))
      (if (member "trash" (notmuch-search-get-tags beg))
          (notmuch-search-tag (list "-trash") beg end)
        (notmuch-search-tag (list "+trash" "-inbox") beg end)))
    ;; toggle deletion of thread from the Tree view
    ;; note that in Gmail, deleted messages are marked with the "trash" label
    (defun notmuch-tree--toggle-trash-tag ()
      "Toggle trash tag for message in the Tree view."
      (interactive)
      (if (member "trash" (notmuch-tree-get-tags))
          (notmuch-tree-tag (list "-trash"))
        (notmuch-tree-tag (list "+trash" "-inbox"))))))

;; async version of `notmuch-poll' that sends a message when complete
;; buffer should be manually refreshed with "g" after polling is done
(with-eval-after-load 'notmuch
  (defun notmuch-poll-async ()
    "Like `notmuch-poll' but asynchronous."
    (interactive)
    (notmuch-start-notmuch
     "notmuch-new"
     nil
     (lambda (_proc change)
       (message (concat "notmuch-new: %s"
                        "\n"
                        "Please refresh buffer as needed.")
                change))
     "new")
    (message "notmuch-new: started"))
  ;; overwrite default "G" bindings in notmuch modes
  (define-key notmuch-common-keymap (kbd "G") #'notmuch-poll-async))

;; advise `notmuch-search-insert-authors' so that when a thread has
;; multiple authors, only the first and last message authors are
;; displayed and their names are abbreviated to fit the column width
(with-eval-after-load 'notmuch
  (defvar notmuch--abbreviate-person-name-width
    (let* ((format-string (string-trim
                           (cdr
                            (assoc "authors"
                                   notmuch-search-result-format))))
           (authors-width (string-width (format format-string ""))))
      (- (/ authors-width 2) 1))
    "Width of each author in Notmuch Search view when more than one.
Should be N/2-1, N is the width of the Search view author column.")

  (defun notmuch--abbreviate-person-name (name &optional maxlen)
    "Abbreviates a person NAME.
The result will have `notmuch--abbreviate-person-name-width'
characters or less. This is done by using the initial of the
person's first name and shortening the person's last name as
necessary; also handles emails."
    (let* ((maxlen (or maxlen notmuch--abbreviate-person-name-width))
           (split-idx (string-match-p "\[,@\]" name))
           (split-char (if split-idx
                           (substring name split-idx (+ split-idx 1))
                         "")))
      (cond ((string-equal split-char "@") ;; user.name@server.com -> u name
             (let ((name-part (substring name 0 split-idx)))
               (notmuch--abbreviate-person-name name-part)))
            (t
             ;; is-comma-split t? lastname, firstname -> f lastname
             ;; is-comma-split f? firstname lastname -> f lastname
             ;;                   OR firstname -> firstname
             (let* ((is-comma-split (string-equal split-char ","))
                    (regexp (if is-comma-split
                                "\\(.*?\\), *\\(.\\).*"
                              "\\(.\\).*?[. ]+\\(.*\\)"))
                    (replacement (if is-comma-split
                                     "\\2 \\1"
                                   "\\1 \\2"))
                    (abbrev-name (replace-regexp-in-string regexp
                                                           replacement
                                                           name))
                    (further-truncate (> (length abbrev-name)
                                         maxlen)))
               (if further-truncate
                   (concat
                    (substring abbrev-name
                               0
                               (- maxlen 2))
                    "..")
                 abbrev-name))))))

  (defun notmuch-search-insert-authors--around-abbreviate (orig-fun &rest args)
    "Advice for `notmuch-search-insert-authors' to abbreviate names.
Extracts the authors field from ARGS, abbreviates its elements
using `notmuch--abbreviate-person-name' and calls ORIG-FUN
replacing the original authors with their abbreviated names.
Assumes ', ' is used to separate authors and names are not of the
form 'Lastname, Firstname'."
    (seq-let [format-string authors] args
      (save-match-data
        (let ((author-list (mapcar (lambda (s) (replace-regexp-in-string
                                                "'" "" s)) ;; no single quotes
                                   (split-string authors ", "))))
          (if (> (length author-list) 1)
              (let* ((oldest-newest-authors (cons (car author-list)
                                                  (last author-list)))
                     (abbrev-authors
                      (mapconcat 'identity
                                 (mapcar 'notmuch--abbreviate-person-name
                                         oldest-newest-authors)
                                 ", ")))
                (apply orig-fun (list format-string abbrev-authors)))
            (apply orig-fun args))))))

  ;; abbreviate names when there are multiple authors
  (advice-add 'notmuch-search-insert-authors :around
              'notmuch-search-insert-authors--around-abbreviate))

;; notmuch extension to toggle search tag visibility in results by
;; advising the search listings field insertion function to remove
;; tags in the search query from the displayed tags except for those
;; modified after the search
(with-eval-after-load 'notmuch

  (defun notmuch--extract-search-tags (query)
    "Extracts out a list of tags from a given notmuch search QUERY.
More concretely, it identifies tokens that begin with the prefix
'is:' or 'tag:' and returns them as a list without the prefix.
Returns nil if there are no tags in the query."
    (seq-filter
     'identity
     (mapcar (lambda (x)
               (if (string-match "^\\(tag\\|is\\):\\([^ ]*\\)" x)
                   (match-string 2 x)
                 nil))
             (split-string query))))

  (defun string-equal-except (except-list s1 s2)
    "Tests if strings S1 are S2 the same, but return nil if
either is in EXCEPT-LIST."
    (if (or (member s1 except-list)
            (member s2 except-list))
        nil
      (string-equal s1 s2)))

  (defun notmuch--filter-common-search-tags (tags orig-tags query)
    "Returns '(TAGS ORIG-TAGS) with search tags in QUERY filtered out.
Only query search tags appearing in both TAGS and ORIG-TAGS are
removed."
    (let ((add-tags (cl-set-difference tags orig-tags :test 'string-equal))
          (rem-tags (cl-set-difference orig-tags tags :test 'string-equal))
          (search-tags (notmuch--extract-search-tags query)))
      (list (cl-set-difference tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      add-tags))
            (cl-set-difference orig-tags
                               search-tags
                               :test (apply-partially
                                      'string-equal-except
                                      rem-tags)))))

  (defun notmuch-search-insert-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-search-insert-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-search-insert-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string result] args
      (if (string-equal field "tags")
          (let ((base-tags (plist-get result :tags))
                (base-orig-tags (plist-get result :orig-tags))
                (query (if (boundp 'notmuch-search-query-string)
                           notmuch-search-query-string
                         nil)))
            (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                       base-tags base-orig-tags query)
              (insert (format format-string
                              (notmuch-tag-format-tags tags orig-tags)))))
        (apply orig-fun args))))

  (defun notmuch-tree-format-field--filter-search-tags (orig-fun &rest args)
    "Advises the `notmuch-tree-format-field' function
to filter search tags from the displayed tags like in Gmail.
ORIG-FUN should be `notmuch-tree-format-field' and ARGS are the
original arguments passed to it."
    (seq-let [field format-string msg] args
      (cond ((listp field) (apply orig-fun args))
            ((string-equal field "tags")
             (let ((base-tags (plist-get msg :tags))
                   (base-orig-tags (plist-get msg :orig-tags))
                   (face (if (plist-get msg :match)
                             'notmuch-tree-match-tag-face
                           'notmuch-tree-no-match-tag-face))
                   (query (if (boundp 'notmuch-tree-basic-query)
                              notmuch-tree-basic-query
                            nil)))
               (seq-let [tags orig-tags] (notmuch--filter-common-search-tags
                                          base-tags base-orig-tags query)
                 (format format-string
                         (notmuch-tag-format-tags tags orig-tags face)))))
            (t (apply orig-fun args)))))

  ;; using a global variable helps in correcting scenarios where
  ;; individual tag visibility states get misaligned
  (defvar notmuch--search-tags-visible t
    "Indicates if search tags are visible in Notmuch Tree and Search views.")

  (defun notmuch--toggle-search-tag-visibility ()
    "Toggle visibility of search tags in the Search and Tree views.
Assumes "
    (interactive)
    (let ((current-hide-search-tags
           (advice-member-p #'notmuch-search-insert-field--filter-search-tags
                            'notmuch-search-insert-field))
          (current-hide-tree-tags
           (advice-member-p #'notmuch-tree-format-field--filter-search-tags
                            'notmuch-tree-format-field)))
      ;; toggle Search view advice as needed
      (cond
       ((and current-hide-search-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-search-insert-field
                       #'notmuch-search-insert-field--filter-search-tags))
       ((and (not current-hide-search-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-search-insert-field :around
                    #'notmuch-search-insert-field--filter-search-tags)))
      ;; toggle Tree view advice as needed
      (cond
       ((and current-hide-tree-tags (not notmuch--search-tags-visible))
        (advice-remove 'notmuch-tree-format-field
                       #'notmuch-tree-format-field--filter-search-tags))
       ((and (not current-hide-tree-tags) notmuch--search-tags-visible)
        (advice-add 'notmuch-tree-format-field :around
                    #'notmuch-tree-format-field--filter-search-tags)))
      (setq notmuch--search-tags-visible (not notmuch--search-tags-visible))
      (notmuch-refresh-all-buffers)
      (message (if notmuch--search-tags-visible
                   "Search tags visible."
                 "Search tags hidden."))))

  ;; enable filtering of search tags in the Search and Tree views by default
  (notmuch--toggle-search-tag-visibility)

  ;; bindings to toggle visibility of search tags in the results
  (dolist (keymap (list notmuch-hello-mode-map ; see https://stackoverflow.com/q/27084989
                        notmuch-search-mode-map
                        notmuch-tree-mode-map))
    (define-key keymap (kbd "C-t")
      #'notmuch--toggle-search-tag-visibility)))

;; provides HTML email composition using Org-mode
;; for autogreeting, set `org-msg-greeting-fmt' to "\nHi *%s*,\n\n"
(use-package org-msg
  :after notmuch ; only load if notmuch package is also loaded
  :init
  (setq org-msg-options (concat "html-postamble:nil H:5 num:nil ^:{} "
                                "toc:nil author:nil email:nil \\n:t")
        org-msg-startup "hidestars indent inlineimages"
        org-msg-greeting-fmt nil
        org-msg-greeting-name-limit 3
        org-msg-default-alternatives '(text html)
        org-msg-text-plain-alternative t
        org-msg-convert-citation t)
  :config
  ;; enable HTML email message composition
  (org-msg-mode 1)
  ;; bindings to toggle HTML email message composition
  (dolist (keymap (list notmuch-hello-mode-map
                        notmuch-search-mode-map
                        notmuch-show-mode-map
                        notmuch-tree-mode-map))
    (define-key keymap (kbd "M") #'org-msg-mode)))

(condition-case nil
    (require 'ol-notmuch)
  (error (message "ol-notmuch is not installed or requires Org 9.2.3+")))

;; major-mode specific transient for org-msg-edit-mode
(with-eval-after-load 'org-msg
  (transient-define-prefix transient/org-msg-edit-mode ()
    "`org-msg-edit-mode' commands."
    ["OrgMsg"
     ["Jump to"
      ("f" "From" message-goto-from)
      ("t" "To" message-goto-to)
      ("c" "Cc" message-goto-cc)
      ("B" "Bcc" message-goto-bcc)
      ("F" "Fcc" message-goto-fcc)
      ("S" "Subject" message-goto-subject)
      ("b" "Body" org-msg-goto-body)
      ]
     ["Action"
      ("C-a" "Manage attachments" org-msg-attach)
      ("C-e" "Preview" org-msg-preview)
      ("C-c" "Send" org-ctrl-c-ctrl-c)
      ("C-k" "Kill" org-msg-edit-kill-buffer)
      ]
     ]
    )
  (define-key org-msg-edit-mode-map (kbd "C-c m") #'transient/org-msg-edit-mode))
#+end_src
* Local Variables                                                  :noexport:

Settings for editing this file.

#+begin_src org
Local Variables:
eval: (setq-local org-src-preserve-indentation t)
End:
#+end_src
